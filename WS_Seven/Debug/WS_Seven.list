
WS_Seven.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007884  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08007a10  08007a10  00017a10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ac0  08007ac0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007ac0  08007ac0  00017ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ac8  08007ac8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ac8  08007ac8  00017ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007acc  08007acc  00017acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007ad0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000440  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004b0  200004b0  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00011968  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000299d  00000000  00000000  00031a4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001160  00000000  00000000  000343e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000da1  00000000  00000000  00035548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002249e  00000000  00000000  000362e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015241  00000000  00000000  00058787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cfa9a  00000000  00000000  0006d9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004ed0  00000000  00000000  0013d464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  00142334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080079f4 	.word	0x080079f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	080079f4 	.word	0x080079f4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2uiz>:
 8000aa0:	004a      	lsls	r2, r1, #1
 8000aa2:	d211      	bcs.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d211      	bcs.n	8000ace <__aeabi_d2uiz+0x2e>
 8000aaa:	d50d      	bpl.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d40e      	bmi.n	8000ad4 <__aeabi_d2uiz+0x34>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_d2uiz+0x3a>
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2f>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae8:	bf24      	itt	cs
 8000aea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000af2:	d90d      	bls.n	8000b10 <__aeabi_d2f+0x30>
 8000af4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000afc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b08:	bf08      	it	eq
 8000b0a:	f020 0001 	biceq.w	r0, r0, #1
 8000b0e:	4770      	bx	lr
 8000b10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b14:	d121      	bne.n	8000b5a <__aeabi_d2f+0x7a>
 8000b16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b1a:	bfbc      	itt	lt
 8000b1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	4770      	bxlt	lr
 8000b22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2a:	f1c2 0218 	rsb	r2, r2, #24
 8000b2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b36:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	f040 0001 	orrne.w	r0, r0, #1
 8000b40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b4c:	ea40 000c 	orr.w	r0, r0, ip
 8000b50:	fa23 f302 	lsr.w	r3, r3, r2
 8000b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b58:	e7cc      	b.n	8000af4 <__aeabi_d2f+0x14>
 8000b5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5e:	d107      	bne.n	8000b70 <__aeabi_d2f+0x90>
 8000b60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b64:	bf1e      	ittt	ne
 8000b66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6e:	4770      	bxne	lr
 8000b70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <__aeabi_uldivmod>:
 8000b80:	b953      	cbnz	r3, 8000b98 <__aeabi_uldivmod+0x18>
 8000b82:	b94a      	cbnz	r2, 8000b98 <__aeabi_uldivmod+0x18>
 8000b84:	2900      	cmp	r1, #0
 8000b86:	bf08      	it	eq
 8000b88:	2800      	cmpeq	r0, #0
 8000b8a:	bf1c      	itt	ne
 8000b8c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b90:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b94:	f000 b970 	b.w	8000e78 <__aeabi_idiv0>
 8000b98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba0:	f000 f806 	bl	8000bb0 <__udivmoddi4>
 8000ba4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bac:	b004      	add	sp, #16
 8000bae:	4770      	bx	lr

08000bb0 <__udivmoddi4>:
 8000bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb4:	9e08      	ldr	r6, [sp, #32]
 8000bb6:	460d      	mov	r5, r1
 8000bb8:	4604      	mov	r4, r0
 8000bba:	460f      	mov	r7, r1
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d14a      	bne.n	8000c56 <__udivmoddi4+0xa6>
 8000bc0:	428a      	cmp	r2, r1
 8000bc2:	4694      	mov	ip, r2
 8000bc4:	d965      	bls.n	8000c92 <__udivmoddi4+0xe2>
 8000bc6:	fab2 f382 	clz	r3, r2
 8000bca:	b143      	cbz	r3, 8000bde <__udivmoddi4+0x2e>
 8000bcc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bd0:	f1c3 0220 	rsb	r2, r3, #32
 8000bd4:	409f      	lsls	r7, r3
 8000bd6:	fa20 f202 	lsr.w	r2, r0, r2
 8000bda:	4317      	orrs	r7, r2
 8000bdc:	409c      	lsls	r4, r3
 8000bde:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000be2:	fa1f f58c 	uxth.w	r5, ip
 8000be6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bea:	0c22      	lsrs	r2, r4, #16
 8000bec:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bf0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bf4:	fb01 f005 	mul.w	r0, r1, r5
 8000bf8:	4290      	cmp	r0, r2
 8000bfa:	d90a      	bls.n	8000c12 <__udivmoddi4+0x62>
 8000bfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000c00:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c04:	f080 811c 	bcs.w	8000e40 <__udivmoddi4+0x290>
 8000c08:	4290      	cmp	r0, r2
 8000c0a:	f240 8119 	bls.w	8000e40 <__udivmoddi4+0x290>
 8000c0e:	3902      	subs	r1, #2
 8000c10:	4462      	add	r2, ip
 8000c12:	1a12      	subs	r2, r2, r0
 8000c14:	b2a4      	uxth	r4, r4
 8000c16:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c1a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c1e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c22:	fb00 f505 	mul.w	r5, r0, r5
 8000c26:	42a5      	cmp	r5, r4
 8000c28:	d90a      	bls.n	8000c40 <__udivmoddi4+0x90>
 8000c2a:	eb1c 0404 	adds.w	r4, ip, r4
 8000c2e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c32:	f080 8107 	bcs.w	8000e44 <__udivmoddi4+0x294>
 8000c36:	42a5      	cmp	r5, r4
 8000c38:	f240 8104 	bls.w	8000e44 <__udivmoddi4+0x294>
 8000c3c:	4464      	add	r4, ip
 8000c3e:	3802      	subs	r0, #2
 8000c40:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c44:	1b64      	subs	r4, r4, r5
 8000c46:	2100      	movs	r1, #0
 8000c48:	b11e      	cbz	r6, 8000c52 <__udivmoddi4+0xa2>
 8000c4a:	40dc      	lsrs	r4, r3
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	e9c6 4300 	strd	r4, r3, [r6]
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d908      	bls.n	8000c6c <__udivmoddi4+0xbc>
 8000c5a:	2e00      	cmp	r6, #0
 8000c5c:	f000 80ed 	beq.w	8000e3a <__udivmoddi4+0x28a>
 8000c60:	2100      	movs	r1, #0
 8000c62:	e9c6 0500 	strd	r0, r5, [r6]
 8000c66:	4608      	mov	r0, r1
 8000c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6c:	fab3 f183 	clz	r1, r3
 8000c70:	2900      	cmp	r1, #0
 8000c72:	d149      	bne.n	8000d08 <__udivmoddi4+0x158>
 8000c74:	42ab      	cmp	r3, r5
 8000c76:	d302      	bcc.n	8000c7e <__udivmoddi4+0xce>
 8000c78:	4282      	cmp	r2, r0
 8000c7a:	f200 80f8 	bhi.w	8000e6e <__udivmoddi4+0x2be>
 8000c7e:	1a84      	subs	r4, r0, r2
 8000c80:	eb65 0203 	sbc.w	r2, r5, r3
 8000c84:	2001      	movs	r0, #1
 8000c86:	4617      	mov	r7, r2
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	d0e2      	beq.n	8000c52 <__udivmoddi4+0xa2>
 8000c8c:	e9c6 4700 	strd	r4, r7, [r6]
 8000c90:	e7df      	b.n	8000c52 <__udivmoddi4+0xa2>
 8000c92:	b902      	cbnz	r2, 8000c96 <__udivmoddi4+0xe6>
 8000c94:	deff      	udf	#255	; 0xff
 8000c96:	fab2 f382 	clz	r3, r2
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	f040 8090 	bne.w	8000dc0 <__udivmoddi4+0x210>
 8000ca0:	1a8a      	subs	r2, r1, r2
 8000ca2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca6:	fa1f fe8c 	uxth.w	lr, ip
 8000caa:	2101      	movs	r1, #1
 8000cac:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cb0:	fb07 2015 	mls	r0, r7, r5, r2
 8000cb4:	0c22      	lsrs	r2, r4, #16
 8000cb6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cba:	fb0e f005 	mul.w	r0, lr, r5
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x124>
 8000cc2:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x122>
 8000ccc:	4290      	cmp	r0, r2
 8000cce:	f200 80cb 	bhi.w	8000e68 <__udivmoddi4+0x2b8>
 8000cd2:	4645      	mov	r5, r8
 8000cd4:	1a12      	subs	r2, r2, r0
 8000cd6:	b2a4      	uxth	r4, r4
 8000cd8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cdc:	fb07 2210 	mls	r2, r7, r0, r2
 8000ce0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ce4:	fb0e fe00 	mul.w	lr, lr, r0
 8000ce8:	45a6      	cmp	lr, r4
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x14e>
 8000cec:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cf4:	d202      	bcs.n	8000cfc <__udivmoddi4+0x14c>
 8000cf6:	45a6      	cmp	lr, r4
 8000cf8:	f200 80bb 	bhi.w	8000e72 <__udivmoddi4+0x2c2>
 8000cfc:	4610      	mov	r0, r2
 8000cfe:	eba4 040e 	sub.w	r4, r4, lr
 8000d02:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d06:	e79f      	b.n	8000c48 <__udivmoddi4+0x98>
 8000d08:	f1c1 0720 	rsb	r7, r1, #32
 8000d0c:	408b      	lsls	r3, r1
 8000d0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d16:	fa05 f401 	lsl.w	r4, r5, r1
 8000d1a:	fa20 f307 	lsr.w	r3, r0, r7
 8000d1e:	40fd      	lsrs	r5, r7
 8000d20:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d24:	4323      	orrs	r3, r4
 8000d26:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d2a:	fa1f fe8c 	uxth.w	lr, ip
 8000d2e:	fb09 5518 	mls	r5, r9, r8, r5
 8000d32:	0c1c      	lsrs	r4, r3, #16
 8000d34:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d38:	fb08 f50e 	mul.w	r5, r8, lr
 8000d3c:	42a5      	cmp	r5, r4
 8000d3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d42:	fa00 f001 	lsl.w	r0, r0, r1
 8000d46:	d90b      	bls.n	8000d60 <__udivmoddi4+0x1b0>
 8000d48:	eb1c 0404 	adds.w	r4, ip, r4
 8000d4c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d50:	f080 8088 	bcs.w	8000e64 <__udivmoddi4+0x2b4>
 8000d54:	42a5      	cmp	r5, r4
 8000d56:	f240 8085 	bls.w	8000e64 <__udivmoddi4+0x2b4>
 8000d5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d5e:	4464      	add	r4, ip
 8000d60:	1b64      	subs	r4, r4, r5
 8000d62:	b29d      	uxth	r5, r3
 8000d64:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d68:	fb09 4413 	mls	r4, r9, r3, r4
 8000d6c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d70:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d74:	45a6      	cmp	lr, r4
 8000d76:	d908      	bls.n	8000d8a <__udivmoddi4+0x1da>
 8000d78:	eb1c 0404 	adds.w	r4, ip, r4
 8000d7c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000d80:	d26c      	bcs.n	8000e5c <__udivmoddi4+0x2ac>
 8000d82:	45a6      	cmp	lr, r4
 8000d84:	d96a      	bls.n	8000e5c <__udivmoddi4+0x2ac>
 8000d86:	3b02      	subs	r3, #2
 8000d88:	4464      	add	r4, ip
 8000d8a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8e:	fba3 9502 	umull	r9, r5, r3, r2
 8000d92:	eba4 040e 	sub.w	r4, r4, lr
 8000d96:	42ac      	cmp	r4, r5
 8000d98:	46c8      	mov	r8, r9
 8000d9a:	46ae      	mov	lr, r5
 8000d9c:	d356      	bcc.n	8000e4c <__udivmoddi4+0x29c>
 8000d9e:	d053      	beq.n	8000e48 <__udivmoddi4+0x298>
 8000da0:	b156      	cbz	r6, 8000db8 <__udivmoddi4+0x208>
 8000da2:	ebb0 0208 	subs.w	r2, r0, r8
 8000da6:	eb64 040e 	sbc.w	r4, r4, lr
 8000daa:	fa04 f707 	lsl.w	r7, r4, r7
 8000dae:	40ca      	lsrs	r2, r1
 8000db0:	40cc      	lsrs	r4, r1
 8000db2:	4317      	orrs	r7, r2
 8000db4:	e9c6 7400 	strd	r7, r4, [r6]
 8000db8:	4618      	mov	r0, r3
 8000dba:	2100      	movs	r1, #0
 8000dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc0:	f1c3 0120 	rsb	r1, r3, #32
 8000dc4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dc8:	fa20 f201 	lsr.w	r2, r0, r1
 8000dcc:	fa25 f101 	lsr.w	r1, r5, r1
 8000dd0:	409d      	lsls	r5, r3
 8000dd2:	432a      	orrs	r2, r5
 8000dd4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd8:	fa1f fe8c 	uxth.w	lr, ip
 8000ddc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de0:	fb07 1510 	mls	r5, r7, r0, r1
 8000de4:	0c11      	lsrs	r1, r2, #16
 8000de6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dea:	fb00 f50e 	mul.w	r5, r0, lr
 8000dee:	428d      	cmp	r5, r1
 8000df0:	fa04 f403 	lsl.w	r4, r4, r3
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x258>
 8000df6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dfe:	d22f      	bcs.n	8000e60 <__udivmoddi4+0x2b0>
 8000e00:	428d      	cmp	r5, r1
 8000e02:	d92d      	bls.n	8000e60 <__udivmoddi4+0x2b0>
 8000e04:	3802      	subs	r0, #2
 8000e06:	4461      	add	r1, ip
 8000e08:	1b49      	subs	r1, r1, r5
 8000e0a:	b292      	uxth	r2, r2
 8000e0c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e10:	fb07 1115 	mls	r1, r7, r5, r1
 8000e14:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e18:	fb05 f10e 	mul.w	r1, r5, lr
 8000e1c:	4291      	cmp	r1, r2
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x282>
 8000e20:	eb1c 0202 	adds.w	r2, ip, r2
 8000e24:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e28:	d216      	bcs.n	8000e58 <__udivmoddi4+0x2a8>
 8000e2a:	4291      	cmp	r1, r2
 8000e2c:	d914      	bls.n	8000e58 <__udivmoddi4+0x2a8>
 8000e2e:	3d02      	subs	r5, #2
 8000e30:	4462      	add	r2, ip
 8000e32:	1a52      	subs	r2, r2, r1
 8000e34:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e38:	e738      	b.n	8000cac <__udivmoddi4+0xfc>
 8000e3a:	4631      	mov	r1, r6
 8000e3c:	4630      	mov	r0, r6
 8000e3e:	e708      	b.n	8000c52 <__udivmoddi4+0xa2>
 8000e40:	4639      	mov	r1, r7
 8000e42:	e6e6      	b.n	8000c12 <__udivmoddi4+0x62>
 8000e44:	4610      	mov	r0, r2
 8000e46:	e6fb      	b.n	8000c40 <__udivmoddi4+0x90>
 8000e48:	4548      	cmp	r0, r9
 8000e4a:	d2a9      	bcs.n	8000da0 <__udivmoddi4+0x1f0>
 8000e4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e50:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e54:	3b01      	subs	r3, #1
 8000e56:	e7a3      	b.n	8000da0 <__udivmoddi4+0x1f0>
 8000e58:	4645      	mov	r5, r8
 8000e5a:	e7ea      	b.n	8000e32 <__udivmoddi4+0x282>
 8000e5c:	462b      	mov	r3, r5
 8000e5e:	e794      	b.n	8000d8a <__udivmoddi4+0x1da>
 8000e60:	4640      	mov	r0, r8
 8000e62:	e7d1      	b.n	8000e08 <__udivmoddi4+0x258>
 8000e64:	46d0      	mov	r8, sl
 8000e66:	e77b      	b.n	8000d60 <__udivmoddi4+0x1b0>
 8000e68:	3d02      	subs	r5, #2
 8000e6a:	4462      	add	r2, ip
 8000e6c:	e732      	b.n	8000cd4 <__udivmoddi4+0x124>
 8000e6e:	4608      	mov	r0, r1
 8000e70:	e70a      	b.n	8000c88 <__udivmoddi4+0xd8>
 8000e72:	4464      	add	r4, ip
 8000e74:	3802      	subs	r0, #2
 8000e76:	e742      	b.n	8000cfe <__udivmoddi4+0x14e>

08000e78 <__aeabi_idiv0>:
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <LIS3DSH_WriteIO>:

//Functions definitions
//Private functions
//1. Write IO
void LIS3DSH_WriteIO(uint8_t reg, uint8_t *dataW, uint8_t size)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	6039      	str	r1, [r7, #0]
 8000e86:	71fb      	strb	r3, [r7, #7]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	73fb      	strb	r3, [r7, #15]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 8000e90:	2200      	movs	r2, #0
 8000e92:	2108      	movs	r1, #8
 8000e94:	480c      	ldr	r0, [pc, #48]	; (8000ec8 <LIS3DSH_WriteIO+0x4c>)
 8000e96:	f002 faf5 	bl	8003484 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, &spiReg, 1, 10);
 8000e9a:	f107 010f 	add.w	r1, r7, #15
 8000e9e:	230a      	movs	r3, #10
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	480a      	ldr	r0, [pc, #40]	; (8000ecc <LIS3DSH_WriteIO+0x50>)
 8000ea4:	f004 fbbf 	bl	8005626 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Transmit(&accSPI_Handle, dataW, size, 10);
 8000ea8:	79bb      	ldrb	r3, [r7, #6]
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	230a      	movs	r3, #10
 8000eae:	6839      	ldr	r1, [r7, #0]
 8000eb0:	4806      	ldr	r0, [pc, #24]	; (8000ecc <LIS3DSH_WriteIO+0x50>)
 8000eb2:	f004 fbb8 	bl	8005626 <HAL_SPI_Transmit>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	2108      	movs	r1, #8
 8000eba:	4803      	ldr	r0, [pc, #12]	; (8000ec8 <LIS3DSH_WriteIO+0x4c>)
 8000ebc:	f002 fae2 	bl	8003484 <HAL_GPIO_WritePin>
}
 8000ec0:	bf00      	nop
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	2000008c 	.word	0x2000008c

08000ed0 <LIS3DSH_ReadIO>:
//2. Read IO
void LIS3DSH_ReadIO(uint8_t reg, uint8_t *dataR, uint8_t size)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	6039      	str	r1, [r7, #0]
 8000eda:	71fb      	strb	r3, [r7, #7]
 8000edc:	4613      	mov	r3, r2
 8000ede:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	723b      	strb	r3, [r7, #8]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 8000eea:	2200      	movs	r2, #0
 8000eec:	2108      	movs	r1, #8
 8000eee:	4818      	ldr	r0, [pc, #96]	; (8000f50 <LIS3DSH_ReadIO+0x80>)
 8000ef0:	f002 fac8 	bl	8003484 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, spiBuf, 1, 10);
 8000ef4:	f107 0108 	add.w	r1, r7, #8
 8000ef8:	230a      	movs	r3, #10
 8000efa:	2201      	movs	r2, #1
 8000efc:	4815      	ldr	r0, [pc, #84]	; (8000f54 <LIS3DSH_ReadIO+0x84>)
 8000efe:	f004 fb92 	bl	8005626 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Receive(&accSPI_Handle, spiBuf, size, 10);
 8000f02:	79bb      	ldrb	r3, [r7, #6]
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	f107 0108 	add.w	r1, r7, #8
 8000f0a:	230a      	movs	r3, #10
 8000f0c:	4811      	ldr	r0, [pc, #68]	; (8000f54 <LIS3DSH_ReadIO+0x84>)
 8000f0e:	f004 fccd 	bl	80058ac <HAL_SPI_Receive>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 8000f12:	2201      	movs	r2, #1
 8000f14:	2108      	movs	r1, #8
 8000f16:	480e      	ldr	r0, [pc, #56]	; (8000f50 <LIS3DSH_ReadIO+0x80>)
 8000f18:	f002 fab4 	bl	8003484 <HAL_GPIO_WritePin>
	
	for(uint8_t i=0; i<(size&0x3); i++)
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	73fb      	strb	r3, [r7, #15]
 8000f20:	e00b      	b.n	8000f3a <LIS3DSH_ReadIO+0x6a>
	{
		dataR[i] = spiBuf[i];
 8000f22:	7bfa      	ldrb	r2, [r7, #15]
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	6839      	ldr	r1, [r7, #0]
 8000f28:	440b      	add	r3, r1
 8000f2a:	3210      	adds	r2, #16
 8000f2c:	443a      	add	r2, r7
 8000f2e:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000f32:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<(size&0x3); i++)
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	3301      	adds	r3, #1
 8000f38:	73fb      	strb	r3, [r7, #15]
 8000f3a:	7bfa      	ldrb	r2, [r7, #15]
 8000f3c:	79bb      	ldrb	r3, [r7, #6]
 8000f3e:	f003 0303 	and.w	r3, r3, #3
 8000f42:	429a      	cmp	r2, r3
 8000f44:	dbed      	blt.n	8000f22 <LIS3DSH_ReadIO+0x52>
	}
}
 8000f46:	bf00      	nop
 8000f48:	bf00      	nop
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40021000 	.word	0x40021000
 8000f54:	2000008c 	.word	0x2000008c

08000f58 <LIS3DSH_Init>:

//1. Accelerometer initialise function
void LIS3DSH_Init(SPI_HandleTypeDef *accSPI, LIS3DSH_InitTypeDef *accInitDef)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	uint8_t spiData = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	73fb      	strb	r3, [r7, #15]
	
	memcpy(&accSPI_Handle, accSPI, sizeof(*accSPI));
 8000f66:	2258      	movs	r2, #88	; 0x58
 8000f68:	6879      	ldr	r1, [r7, #4]
 8000f6a:	485b      	ldr	r0, [pc, #364]	; (80010d8 <LIS3DSH_Init+0x180>)
 8000f6c:	f006 f984 	bl	8007278 <memcpy>
	//** 1. Enable Axes and Output Data Rate **//
	//Set CTRL REG4 settings value
	spiData |= (accInitDef->enableAxes & 0x07);		//Enable Axes
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	78db      	ldrb	r3, [r3, #3]
 8000f74:	b25b      	sxtb	r3, r3
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	b25a      	sxtb	r2, r3
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	b25b      	sxtb	r3, r3
 8000f80:	4313      	orrs	r3, r2
 8000f82:	b25b      	sxtb	r3, r3
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->dataRate & 0xF0);			//Output Data Rate
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	b25b      	sxtb	r3, r3
 8000f8e:	f023 030f 	bic.w	r3, r3, #15
 8000f92:	b25a      	sxtb	r2, r3
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	b25b      	sxtb	r3, r3
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	b25b      	sxtb	r3, r3
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG4_ADDR, &spiData, 1);
 8000fa0:	f107 030f 	add.w	r3, r7, #15
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	2020      	movs	r0, #32
 8000faa:	f7ff ff67 	bl	8000e7c <LIS3DSH_WriteIO>
	
	//** 2. Full-Scale selection, Anti-aliasing BW, self test and 4-wire SPI **//
	spiData = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->antiAliasingBW & 0xC0);		//Anti-aliasing BW
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	789b      	ldrb	r3, [r3, #2]
 8000fb6:	b25b      	sxtb	r3, r3
 8000fb8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fbc:	b25a      	sxtb	r2, r3
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
 8000fc0:	b25b      	sxtb	r3, r3
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	b25b      	sxtb	r3, r3
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->fullScale & 0x38);				//Full-Scale
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	785b      	ldrb	r3, [r3, #1]
 8000fce:	b25b      	sxtb	r3, r3
 8000fd0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000fd4:	b25a      	sxtb	r2, r3
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	b25b      	sxtb	r3, r3
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	b25b      	sxtb	r3, r3
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG5_ADDR, &spiData, 1);
 8000fe2:	f107 030f 	add.w	r3, r7, #15
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	4619      	mov	r1, r3
 8000fea:	2024      	movs	r0, #36	; 0x24
 8000fec:	f7ff ff46 	bl	8000e7c <LIS3DSH_WriteIO>
	
	//** 3. Interrupt Configuration **//
	if(accInitDef->interruptEnable)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	791b      	ldrb	r3, [r3, #4]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d008      	beq.n	800100a <LIS3DSH_Init+0xb2>
	{
		spiData = 0x88;
 8000ff8:	2388      	movs	r3, #136	; 0x88
 8000ffa:	73fb      	strb	r3, [r7, #15]
		//Write to accelerometer
		LIS3DSH_WriteIO(LIS3DSH_CTRL_REG3_ADDR, &spiData, 1);
 8000ffc:	f107 030f 	add.w	r3, r7, #15
 8001000:	2201      	movs	r2, #1
 8001002:	4619      	mov	r1, r3
 8001004:	2023      	movs	r0, #35	; 0x23
 8001006:	f7ff ff39 	bl	8000e7c <LIS3DSH_WriteIO>
	}
	
	//Assign sensor sensitivity (based on Full-Scale)
	switch(accInitDef->fullScale)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	785b      	ldrb	r3, [r3, #1]
 800100e:	2b20      	cmp	r3, #32
 8001010:	d858      	bhi.n	80010c4 <LIS3DSH_Init+0x16c>
 8001012:	a201      	add	r2, pc, #4	; (adr r2, 8001018 <LIS3DSH_Init+0xc0>)
 8001014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001018:	0800109d 	.word	0x0800109d
 800101c:	080010c5 	.word	0x080010c5
 8001020:	080010c5 	.word	0x080010c5
 8001024:	080010c5 	.word	0x080010c5
 8001028:	080010c5 	.word	0x080010c5
 800102c:	080010c5 	.word	0x080010c5
 8001030:	080010c5 	.word	0x080010c5
 8001034:	080010c5 	.word	0x080010c5
 8001038:	080010a5 	.word	0x080010a5
 800103c:	080010c5 	.word	0x080010c5
 8001040:	080010c5 	.word	0x080010c5
 8001044:	080010c5 	.word	0x080010c5
 8001048:	080010c5 	.word	0x080010c5
 800104c:	080010c5 	.word	0x080010c5
 8001050:	080010c5 	.word	0x080010c5
 8001054:	080010c5 	.word	0x080010c5
 8001058:	080010ad 	.word	0x080010ad
 800105c:	080010c5 	.word	0x080010c5
 8001060:	080010c5 	.word	0x080010c5
 8001064:	080010c5 	.word	0x080010c5
 8001068:	080010c5 	.word	0x080010c5
 800106c:	080010c5 	.word	0x080010c5
 8001070:	080010c5 	.word	0x080010c5
 8001074:	080010c5 	.word	0x080010c5
 8001078:	080010b5 	.word	0x080010b5
 800107c:	080010c5 	.word	0x080010c5
 8001080:	080010c5 	.word	0x080010c5
 8001084:	080010c5 	.word	0x080010c5
 8001088:	080010c5 	.word	0x080010c5
 800108c:	080010c5 	.word	0x080010c5
 8001090:	080010c5 	.word	0x080010c5
 8001094:	080010c5 	.word	0x080010c5
 8001098:	080010bd 	.word	0x080010bd
	{
		case LIS3DSH_FULLSCALE_2:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 800109c:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <LIS3DSH_Init+0x184>)
 800109e:	4a10      	ldr	r2, [pc, #64]	; (80010e0 <LIS3DSH_Init+0x188>)
 80010a0:	601a      	str	r2, [r3, #0]
			break;
 80010a2:	e00f      	b.n	80010c4 <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_4:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 80010a4:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <LIS3DSH_Init+0x184>)
 80010a6:	4a0f      	ldr	r2, [pc, #60]	; (80010e4 <LIS3DSH_Init+0x18c>)
 80010a8:	601a      	str	r2, [r3, #0]
			break;
 80010aa:	e00b      	b.n	80010c4 <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_6:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 80010ac:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <LIS3DSH_Init+0x184>)
 80010ae:	4a0e      	ldr	r2, [pc, #56]	; (80010e8 <LIS3DSH_Init+0x190>)
 80010b0:	601a      	str	r2, [r3, #0]
			break;
 80010b2:	e007      	b.n	80010c4 <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_8:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <LIS3DSH_Init+0x184>)
 80010b6:	4a0d      	ldr	r2, [pc, #52]	; (80010ec <LIS3DSH_Init+0x194>)
 80010b8:	601a      	str	r2, [r3, #0]
			break;
 80010ba:	e003      	b.n	80010c4 <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_16:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 80010bc:	4b07      	ldr	r3, [pc, #28]	; (80010dc <LIS3DSH_Init+0x184>)
 80010be:	4a0c      	ldr	r2, [pc, #48]	; (80010f0 <LIS3DSH_Init+0x198>)
 80010c0:	601a      	str	r2, [r3, #0]
			break;
 80010c2:	bf00      	nop
	}
	_LIS3DHS_CS_DISABLE;
 80010c4:	2201      	movs	r2, #1
 80010c6:	2108      	movs	r1, #8
 80010c8:	480a      	ldr	r0, [pc, #40]	; (80010f4 <LIS3DSH_Init+0x19c>)
 80010ca:	f002 f9db 	bl	8003484 <HAL_GPIO_WritePin>
}
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	2000008c 	.word	0x2000008c
 80010dc:	20000000 	.word	0x20000000
 80010e0:	3d75c28f 	.word	0x3d75c28f
 80010e4:	3df5c28f 	.word	0x3df5c28f
 80010e8:	3e3851ec 	.word	0x3e3851ec
 80010ec:	3e75c28f 	.word	0x3e75c28f
 80010f0:	3f3ae148 	.word	0x3f3ae148
 80010f4:	40021000 	.word	0x40021000

080010f8 <LIS3DSH_GetDataRaw>:
//2. Get Accelerometer raw data
LIS3DSH_DataRaw LIS3DSH_GetDataRaw(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	uint8_t spiBuf[2];
	LIS3DSH_DataRaw tempDataRaw;
	//Read X data
	LIS3DSH_ReadIO(LIS3DSH_OUT_X_L_ADDR, spiBuf, 2);
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	2202      	movs	r2, #2
 8001106:	4619      	mov	r1, r3
 8001108:	2028      	movs	r0, #40	; 0x28
 800110a:	f7ff fee1 	bl	8000ed0 <LIS3DSH_ReadIO>
	tempDataRaw.x = ((spiBuf[1] << 8) + spiBuf[0]);
 800110e:	7d7b      	ldrb	r3, [r7, #21]
 8001110:	b29b      	uxth	r3, r3
 8001112:	021b      	lsls	r3, r3, #8
 8001114:	b29a      	uxth	r2, r3
 8001116:	7d3b      	ldrb	r3, [r7, #20]
 8001118:	b29b      	uxth	r3, r3
 800111a:	4413      	add	r3, r2
 800111c:	b29b      	uxth	r3, r3
 800111e:	b21b      	sxth	r3, r3
 8001120:	81bb      	strh	r3, [r7, #12]
	
	//Read Y data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Y_L_ADDR, spiBuf, 2);
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	2202      	movs	r2, #2
 8001128:	4619      	mov	r1, r3
 800112a:	202a      	movs	r0, #42	; 0x2a
 800112c:	f7ff fed0 	bl	8000ed0 <LIS3DSH_ReadIO>
	tempDataRaw.y = ((spiBuf[1] << 8) + spiBuf[0]);
 8001130:	7d7b      	ldrb	r3, [r7, #21]
 8001132:	b29b      	uxth	r3, r3
 8001134:	021b      	lsls	r3, r3, #8
 8001136:	b29a      	uxth	r2, r3
 8001138:	7d3b      	ldrb	r3, [r7, #20]
 800113a:	b29b      	uxth	r3, r3
 800113c:	4413      	add	r3, r2
 800113e:	b29b      	uxth	r3, r3
 8001140:	b21b      	sxth	r3, r3
 8001142:	81fb      	strh	r3, [r7, #14]
	
	//Read Z data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Z_L_ADDR, spiBuf, 2);
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	2202      	movs	r2, #2
 800114a:	4619      	mov	r1, r3
 800114c:	202c      	movs	r0, #44	; 0x2c
 800114e:	f7ff febf 	bl	8000ed0 <LIS3DSH_ReadIO>
	tempDataRaw.z = ((spiBuf[1] << 8) + spiBuf[0]);
 8001152:	7d7b      	ldrb	r3, [r7, #21]
 8001154:	b29b      	uxth	r3, r3
 8001156:	021b      	lsls	r3, r3, #8
 8001158:	b29a      	uxth	r2, r3
 800115a:	7d3b      	ldrb	r3, [r7, #20]
 800115c:	b29b      	uxth	r3, r3
 800115e:	4413      	add	r3, r2
 8001160:	b29b      	uxth	r3, r3
 8001162:	b21b      	sxth	r3, r3
 8001164:	823b      	strh	r3, [r7, #16]
	
	return tempDataRaw;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	461a      	mov	r2, r3
 800116a:	f107 030c 	add.w	r3, r7, #12
 800116e:	6818      	ldr	r0, [r3, #0]
 8001170:	6010      	str	r0, [r2, #0]
 8001172:	889b      	ldrh	r3, [r3, #4]
 8001174:	8093      	strh	r3, [r2, #4]
	
}
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <LIS3DSH_GetDataScaled>:
//3. Get Accelerometer mg data
LIS3DSH_DataScaled LIS3DSH_GetDataScaled(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08c      	sub	sp, #48	; 0x30
 8001184:	af00      	add	r7, sp, #0
	//Read raw data
	LIS3DSH_DataRaw tempRawData = LIS3DSH_GetDataRaw();;
 8001186:	f107 031c 	add.w	r3, r7, #28
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ffb4 	bl	80010f8 <LIS3DSH_GetDataRaw>
	//Scale data and return 
	LIS3DSH_DataScaled tempScaledData;
	tempScaledData.x = (tempRawData.x * lis3dsh_Sensitivity * __X_Scale) + 0.0f - __X_Bias;
 8001190:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001194:	ee07 3a90 	vmov	s15, r3
 8001198:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800119c:	4b31      	ldr	r3, [pc, #196]	; (8001264 <LIS3DSH_GetDataScaled+0xe4>)
 800119e:	edd3 7a00 	vldr	s15, [r3]
 80011a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011a6:	4b30      	ldr	r3, [pc, #192]	; (8001268 <LIS3DSH_GetDataScaled+0xe8>)
 80011a8:	edd3 7a00 	vldr	s15, [r3]
 80011ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b0:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800126c <LIS3DSH_GetDataScaled+0xec>
 80011b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80011b8:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <LIS3DSH_GetDataScaled+0xf0>)
 80011ba:	edd3 7a00 	vldr	s15, [r3]
 80011be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011c2:	edc7 7a04 	vstr	s15, [r7, #16]
	tempScaledData.y = (tempRawData.y * lis3dsh_Sensitivity * __Y_Scale) + 0.0f - __Y_Bias;
 80011c6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80011ca:	ee07 3a90 	vmov	s15, r3
 80011ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011d2:	4b24      	ldr	r3, [pc, #144]	; (8001264 <LIS3DSH_GetDataScaled+0xe4>)
 80011d4:	edd3 7a00 	vldr	s15, [r3]
 80011d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011dc:	4b25      	ldr	r3, [pc, #148]	; (8001274 <LIS3DSH_GetDataScaled+0xf4>)
 80011de:	edd3 7a00 	vldr	s15, [r3]
 80011e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e6:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800126c <LIS3DSH_GetDataScaled+0xec>
 80011ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80011ee:	4b22      	ldr	r3, [pc, #136]	; (8001278 <LIS3DSH_GetDataScaled+0xf8>)
 80011f0:	edd3 7a00 	vldr	s15, [r3]
 80011f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f8:	edc7 7a05 	vstr	s15, [r7, #20]
	tempScaledData.z = (tempRawData.z * lis3dsh_Sensitivity * __Z_Scale) + 0.0f - __Z_Bias;
 80011fc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001200:	ee07 3a90 	vmov	s15, r3
 8001204:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <LIS3DSH_GetDataScaled+0xe4>)
 800120a:	edd3 7a00 	vldr	s15, [r3]
 800120e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001212:	4b1a      	ldr	r3, [pc, #104]	; (800127c <LIS3DSH_GetDataScaled+0xfc>)
 8001214:	edd3 7a00 	vldr	s15, [r3]
 8001218:	ee67 7a27 	vmul.f32	s15, s14, s15
 800121c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800126c <LIS3DSH_GetDataScaled+0xec>
 8001220:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001224:	4b16      	ldr	r3, [pc, #88]	; (8001280 <LIS3DSH_GetDataScaled+0x100>)
 8001226:	edd3 7a00 	vldr	s15, [r3]
 800122a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800122e:	edc7 7a06 	vstr	s15, [r7, #24]
	
	return tempScaledData;
 8001232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001236:	f107 0210 	add.w	r2, r7, #16
 800123a:	ca07      	ldmia	r2, {r0, r1, r2}
 800123c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001240:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001246:	ee06 1a90 	vmov	s13, r1
 800124a:	ee07 2a10 	vmov	s14, r2
 800124e:	ee07 3a90 	vmov	s15, r3
}
 8001252:	eeb0 0a66 	vmov.f32	s0, s13
 8001256:	eef0 0a47 	vmov.f32	s1, s14
 800125a:	eeb0 1a67 	vmov.f32	s2, s15
 800125e:	3730      	adds	r7, #48	; 0x30
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000000 	.word	0x20000000
 8001268:	20000004 	.word	0x20000004
 800126c:	00000000 	.word	0x00000000
 8001270:	200000e4 	.word	0x200000e4
 8001274:	20000008 	.word	0x20000008
 8001278:	200000e8 	.word	0x200000e8
 800127c:	2000000c 	.word	0x2000000c
 8001280:	200000ec 	.word	0x200000ec

08001284 <LIS3DSH_X_calibrate>:
}

//** Calibration functions **//
//1. Set X-Axis calibrate
void LIS3DSH_X_calibrate(float x_min, float x_max)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	ed87 0a01 	vstr	s0, [r7, #4]
 800128e:	edc7 0a00 	vstr	s1, [r7]
	__X_Bias = (x_max+x_min)/2.0f;
 8001292:	ed97 7a00 	vldr	s14, [r7]
 8001296:	edd7 7a01 	vldr	s15, [r7, #4]
 800129a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800129e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80012a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012a6:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <LIS3DSH_X_calibrate+0x50>)
 80012a8:	edc3 7a00 	vstr	s15, [r3]
	__X_Scale = (2*1000)/(x_max - x_min);
 80012ac:	ed97 7a00 	vldr	s14, [r7]
 80012b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80012b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012b8:	eddf 6a07 	vldr	s13, [pc, #28]	; 80012d8 <LIS3DSH_X_calibrate+0x54>
 80012bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <LIS3DSH_X_calibrate+0x58>)
 80012c2:	edc3 7a00 	vstr	s15, [r3]
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	200000e4 	.word	0x200000e4
 80012d8:	44fa0000 	.word	0x44fa0000
 80012dc:	20000004 	.word	0x20000004

080012e0 <LIS3DSH_Y_calibrate>:
//2. Set Y-Axis calibrate
void LIS3DSH_Y_calibrate(float y_min, float y_max)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	ed87 0a01 	vstr	s0, [r7, #4]
 80012ea:	edc7 0a00 	vstr	s1, [r7]
	__Y_Bias = (y_max+y_min)/2.0f;
 80012ee:	ed97 7a00 	vldr	s14, [r7]
 80012f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012fa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80012fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <LIS3DSH_Y_calibrate+0x50>)
 8001304:	edc3 7a00 	vstr	s15, [r3]
	__Y_Scale = (2*1000)/(y_max - y_min);
 8001308:	ed97 7a00 	vldr	s14, [r7]
 800130c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001310:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001314:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001334 <LIS3DSH_Y_calibrate+0x54>
 8001318:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <LIS3DSH_Y_calibrate+0x58>)
 800131e:	edc3 7a00 	vstr	s15, [r3]
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	200000e8 	.word	0x200000e8
 8001334:	44fa0000 	.word	0x44fa0000
 8001338:	20000008 	.word	0x20000008

0800133c <LIS3DSH_Z_calibrate>:
//3. Set Z-Axis calibrate
void LIS3DSH_Z_calibrate(float z_min, float z_max)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	ed87 0a01 	vstr	s0, [r7, #4]
 8001346:	edc7 0a00 	vstr	s1, [r7]
	__Z_Bias = (z_max+z_min)/2.0f;
 800134a:	ed97 7a00 	vldr	s14, [r7]
 800134e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001352:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001356:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800135a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <LIS3DSH_Z_calibrate+0x50>)
 8001360:	edc3 7a00 	vstr	s15, [r3]
	__Z_Scale = (2*1000)/(z_max - z_min);
 8001364:	ed97 7a00 	vldr	s14, [r7]
 8001368:	edd7 7a01 	vldr	s15, [r7, #4]
 800136c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001370:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001390 <LIS3DSH_Z_calibrate+0x54>
 8001374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <LIS3DSH_Z_calibrate+0x58>)
 800137a:	edc3 7a00 	vstr	s15, [r3]
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	200000ec 	.word	0x200000ec
 8001390:	44fa0000 	.word	0x44fa0000
 8001394:	2000000c 	.word	0x2000000c

08001398 <CS43L22_Init>:

extern I2C_HandleTypeDef hi2c1;


// Implementation of functions
void CS43L22_Init(void) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af02      	add	r7, sp, #8

    // Enable chip
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 800139e:	2201      	movs	r2, #1
 80013a0:	2110      	movs	r1, #16
 80013a2:	4863      	ldr	r0, [pc, #396]	; (8001530 <CS43L22_Init+0x198>)
 80013a4:	f002 f86e 	bl	8003484 <HAL_GPIO_WritePin>
    //
    // Initialization
    //
    uint8_t TxBuffer[2];

    TxBuffer[0] = 0x0D;
 80013a8:	230d      	movs	r3, #13
 80013aa:	713b      	strb	r3, [r7, #4]
    TxBuffer[1] = 0x01;
 80013ac:	2301      	movs	r3, #1
 80013ae:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80013b0:	1d3a      	adds	r2, r7, #4
 80013b2:	230a      	movs	r3, #10
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	2302      	movs	r3, #2
 80013b8:	2194      	movs	r1, #148	; 0x94
 80013ba:	485e      	ldr	r0, [pc, #376]	; (8001534 <CS43L22_Init+0x19c>)
 80013bc:	f002 f9e4 	bl	8003788 <HAL_I2C_Master_Transmit>

    TxBuffer[0] = 0x00;
 80013c0:	2300      	movs	r3, #0
 80013c2:	713b      	strb	r3, [r7, #4]
    TxBuffer[1] = 0x99;
 80013c4:	2399      	movs	r3, #153	; 0x99
 80013c6:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80013c8:	1d3a      	adds	r2, r7, #4
 80013ca:	230a      	movs	r3, #10
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	2302      	movs	r3, #2
 80013d0:	2194      	movs	r1, #148	; 0x94
 80013d2:	4858      	ldr	r0, [pc, #352]	; (8001534 <CS43L22_Init+0x19c>)
 80013d4:	f002 f9d8 	bl	8003788 <HAL_I2C_Master_Transmit>

    TxBuffer[0] = 0x47;
 80013d8:	2347      	movs	r3, #71	; 0x47
 80013da:	713b      	strb	r3, [r7, #4]
    TxBuffer[1] = 0x80;
 80013dc:	2380      	movs	r3, #128	; 0x80
 80013de:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80013e0:	1d3a      	adds	r2, r7, #4
 80013e2:	230a      	movs	r3, #10
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	2302      	movs	r3, #2
 80013e8:	2194      	movs	r1, #148	; 0x94
 80013ea:	4852      	ldr	r0, [pc, #328]	; (8001534 <CS43L22_Init+0x19c>)
 80013ec:	f002 f9cc 	bl	8003788 <HAL_I2C_Master_Transmit>

    TxBuffer[0] = 0x32;
 80013f0:	2332      	movs	r3, #50	; 0x32
 80013f2:	713b      	strb	r3, [r7, #4]
    TxBuffer[1] = 0xFF;
 80013f4:	23ff      	movs	r3, #255	; 0xff
 80013f6:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80013f8:	1d3a      	adds	r2, r7, #4
 80013fa:	230a      	movs	r3, #10
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	2302      	movs	r3, #2
 8001400:	2194      	movs	r1, #148	; 0x94
 8001402:	484c      	ldr	r0, [pc, #304]	; (8001534 <CS43L22_Init+0x19c>)
 8001404:	f002 f9c0 	bl	8003788 <HAL_I2C_Master_Transmit>

    TxBuffer[0] = 0x32;
 8001408:	2332      	movs	r3, #50	; 0x32
 800140a:	713b      	strb	r3, [r7, #4]
    TxBuffer[1] = 0x7F;
 800140c:	237f      	movs	r3, #127	; 0x7f
 800140e:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8001410:	1d3a      	adds	r2, r7, #4
 8001412:	230a      	movs	r3, #10
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	2302      	movs	r3, #2
 8001418:	2194      	movs	r1, #148	; 0x94
 800141a:	4846      	ldr	r0, [pc, #280]	; (8001534 <CS43L22_Init+0x19c>)
 800141c:	f002 f9b4 	bl	8003788 <HAL_I2C_Master_Transmit>

    TxBuffer[0] = 0x00;
 8001420:	2300      	movs	r3, #0
 8001422:	713b      	strb	r3, [r7, #4]
    TxBuffer[1] = 0x00;
 8001424:	2300      	movs	r3, #0
 8001426:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8001428:	1d3a      	adds	r2, r7, #4
 800142a:	230a      	movs	r3, #10
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	2302      	movs	r3, #2
 8001430:	2194      	movs	r1, #148	; 0x94
 8001432:	4840      	ldr	r0, [pc, #256]	; (8001534 <CS43L22_Init+0x19c>)
 8001434:	f002 f9a8 	bl	8003788 <HAL_I2C_Master_Transmit>

    TxBuffer[0] = 0x04;
 8001438:	2304      	movs	r3, #4
 800143a:	713b      	strb	r3, [r7, #4]
    TxBuffer[1] = 0xAF;
 800143c:	23af      	movs	r3, #175	; 0xaf
 800143e:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8001440:	1d3a      	adds	r2, r7, #4
 8001442:	230a      	movs	r3, #10
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2302      	movs	r3, #2
 8001448:	2194      	movs	r1, #148	; 0x94
 800144a:	483a      	ldr	r0, [pc, #232]	; (8001534 <CS43L22_Init+0x19c>)
 800144c:	f002 f99c 	bl	8003788 <HAL_I2C_Master_Transmit>

    TxBuffer[0] = 0x0D;
 8001450:	230d      	movs	r3, #13
 8001452:	713b      	strb	r3, [r7, #4]
    TxBuffer[1] = 0x70;
 8001454:	2370      	movs	r3, #112	; 0x70
 8001456:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8001458:	1d3a      	adds	r2, r7, #4
 800145a:	230a      	movs	r3, #10
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	2302      	movs	r3, #2
 8001460:	2194      	movs	r1, #148	; 0x94
 8001462:	4834      	ldr	r0, [pc, #208]	; (8001534 <CS43L22_Init+0x19c>)
 8001464:	f002 f990 	bl	8003788 <HAL_I2C_Master_Transmit>

    TxBuffer[0] = 0x05;
 8001468:	2305      	movs	r3, #5
 800146a:	713b      	strb	r3, [r7, #4]
    TxBuffer[1] = 0x81;
 800146c:	2381      	movs	r3, #129	; 0x81
 800146e:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8001470:	1d3a      	adds	r2, r7, #4
 8001472:	230a      	movs	r3, #10
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	2302      	movs	r3, #2
 8001478:	2194      	movs	r1, #148	; 0x94
 800147a:	482e      	ldr	r0, [pc, #184]	; (8001534 <CS43L22_Init+0x19c>)
 800147c:	f002 f984 	bl	8003788 <HAL_I2C_Master_Transmit>

    TxBuffer[0] = 0x06;
 8001480:	2306      	movs	r3, #6
 8001482:	713b      	strb	r3, [r7, #4]
    TxBuffer[1] = 0x07;
 8001484:	2307      	movs	r3, #7
 8001486:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8001488:	1d3a      	adds	r2, r7, #4
 800148a:	230a      	movs	r3, #10
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	2302      	movs	r3, #2
 8001490:	2194      	movs	r1, #148	; 0x94
 8001492:	4828      	ldr	r0, [pc, #160]	; (8001534 <CS43L22_Init+0x19c>)
 8001494:	f002 f978 	bl	8003788 <HAL_I2C_Master_Transmit>

    TxBuffer[0] = 0x0A;
 8001498:	230a      	movs	r3, #10
 800149a:	713b      	strb	r3, [r7, #4]
    TxBuffer[1] = 0x00;
 800149c:	2300      	movs	r3, #0
 800149e:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80014a0:	1d3a      	adds	r2, r7, #4
 80014a2:	230a      	movs	r3, #10
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	2302      	movs	r3, #2
 80014a8:	2194      	movs	r1, #148	; 0x94
 80014aa:	4822      	ldr	r0, [pc, #136]	; (8001534 <CS43L22_Init+0x19c>)
 80014ac:	f002 f96c 	bl	8003788 <HAL_I2C_Master_Transmit>

    TxBuffer[0] = 0x27;
 80014b0:	2327      	movs	r3, #39	; 0x27
 80014b2:	713b      	strb	r3, [r7, #4]
    TxBuffer[1] = 0x00;
 80014b4:	2300      	movs	r3, #0
 80014b6:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80014b8:	1d3a      	adds	r2, r7, #4
 80014ba:	230a      	movs	r3, #10
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	2302      	movs	r3, #2
 80014c0:	2194      	movs	r1, #148	; 0x94
 80014c2:	481c      	ldr	r0, [pc, #112]	; (8001534 <CS43L22_Init+0x19c>)
 80014c4:	f002 f960 	bl	8003788 <HAL_I2C_Master_Transmit>

    TxBuffer[0] = 0x1A;
 80014c8:	231a      	movs	r3, #26
 80014ca:	713b      	strb	r3, [r7, #4]
    TxBuffer[1] = 0x0A;
 80014cc:	230a      	movs	r3, #10
 80014ce:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80014d0:	1d3a      	adds	r2, r7, #4
 80014d2:	230a      	movs	r3, #10
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	2302      	movs	r3, #2
 80014d8:	2194      	movs	r1, #148	; 0x94
 80014da:	4816      	ldr	r0, [pc, #88]	; (8001534 <CS43L22_Init+0x19c>)
 80014dc:	f002 f954 	bl	8003788 <HAL_I2C_Master_Transmit>

    TxBuffer[0] = 0x1B;
 80014e0:	231b      	movs	r3, #27
 80014e2:	713b      	strb	r3, [r7, #4]
    TxBuffer[1] = 0x0A;
 80014e4:	230a      	movs	r3, #10
 80014e6:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 80014e8:	1d3a      	adds	r2, r7, #4
 80014ea:	230a      	movs	r3, #10
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	2302      	movs	r3, #2
 80014f0:	2194      	movs	r1, #148	; 0x94
 80014f2:	4810      	ldr	r0, [pc, #64]	; (8001534 <CS43L22_Init+0x19c>)
 80014f4:	f002 f948 	bl	8003788 <HAL_I2C_Master_Transmit>

    TxBuffer[0] = 0x1F;
 80014f8:	231f      	movs	r3, #31
 80014fa:	713b      	strb	r3, [r7, #4]
    TxBuffer[1] = 0x0F;
 80014fc:	230f      	movs	r3, #15
 80014fe:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8001500:	1d3a      	adds	r2, r7, #4
 8001502:	230a      	movs	r3, #10
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	2302      	movs	r3, #2
 8001508:	2194      	movs	r1, #148	; 0x94
 800150a:	480a      	ldr	r0, [pc, #40]	; (8001534 <CS43L22_Init+0x19c>)
 800150c:	f002 f93c 	bl	8003788 <HAL_I2C_Master_Transmit>

    TxBuffer[0] = 0x02;
 8001510:	2302      	movs	r3, #2
 8001512:	713b      	strb	r3, [r7, #4]
    TxBuffer[1] = 0x9E;
 8001514:	239e      	movs	r3, #158	; 0x9e
 8001516:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, (uint8_t*) &TxBuffer, 2, I2C_TIMEOUT);
 8001518:	1d3a      	adds	r2, r7, #4
 800151a:	230a      	movs	r3, #10
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	2302      	movs	r3, #2
 8001520:	2194      	movs	r1, #148	; 0x94
 8001522:	4804      	ldr	r0, [pc, #16]	; (8001534 <CS43L22_Init+0x19c>)
 8001524:	f002 f930 	bl	8003788 <HAL_I2C_Master_Transmit>
}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40020c00 	.word	0x40020c00
 8001534:	200000f0 	.word	0x200000f0

08001538 <CS43L22_Beep>:

void CS43L22_Beep(soundToneType pitch, uint32_t duration_ms) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af02      	add	r7, sp, #8
 800153e:	4603      	mov	r3, r0
 8001540:	6039      	str	r1, [r7, #0]
 8001542:	80fb      	strh	r3, [r7, #6]
    uint8_t TxBuffer[2];

    // Set volume and off time
    TxBuffer[0] = 0x1D;        // Register address
 8001544:	231d      	movs	r3, #29
 8001546:	733b      	strb	r3, [r7, #12]
    TxBuffer[1] = 0x00;        // Value (volume and off time)
 8001548:	2300      	movs	r3, #0
 800154a:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, TxBuffer, 2, I2C_TIMEOUT);
 800154c:	f107 020c 	add.w	r2, r7, #12
 8001550:	230a      	movs	r3, #10
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	2302      	movs	r3, #2
 8001556:	2194      	movs	r1, #148	; 0x94
 8001558:	4818      	ldr	r0, [pc, #96]	; (80015bc <CS43L22_Beep+0x84>)
 800155a:	f002 f915 	bl	8003788 <HAL_I2C_Master_Transmit>

    // Set sound frequency
    TxBuffer[0] = 0x1C;        // Register address
 800155e:	231c      	movs	r3, #28
 8001560:	733b      	strb	r3, [r7, #12]
    TxBuffer[1] = pitch;
 8001562:	88fb      	ldrh	r3, [r7, #6]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, TxBuffer, 2, I2C_TIMEOUT);
 8001568:	f107 020c 	add.w	r2, r7, #12
 800156c:	230a      	movs	r3, #10
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	2302      	movs	r3, #2
 8001572:	2194      	movs	r1, #148	; 0x94
 8001574:	4811      	ldr	r0, [pc, #68]	; (80015bc <CS43L22_Beep+0x84>)
 8001576:	f002 f907 	bl	8003788 <HAL_I2C_Master_Transmit>

    // Enable continuous mode (SOUND STARTED)
    TxBuffer[0] = 0x1E;        // Register address
 800157a:	231e      	movs	r3, #30
 800157c:	733b      	strb	r3, [r7, #12]
    TxBuffer[1] = 0xC0;        // Value (beep and tone configuration)
 800157e:	23c0      	movs	r3, #192	; 0xc0
 8001580:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, TxBuffer, 2, I2C_TIMEOUT);
 8001582:	f107 020c 	add.w	r2, r7, #12
 8001586:	230a      	movs	r3, #10
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	2302      	movs	r3, #2
 800158c:	2194      	movs	r1, #148	; 0x94
 800158e:	480b      	ldr	r0, [pc, #44]	; (80015bc <CS43L22_Beep+0x84>)
 8001590:	f002 f8fa 	bl	8003788 <HAL_I2C_Master_Transmit>

    // Playing...
    HAL_Delay(duration_ms);
 8001594:	6838      	ldr	r0, [r7, #0]
 8001596:	f001 f933 	bl	8002800 <HAL_Delay>

    // Disable continuous mode (SOUND STOPPED)
    TxBuffer[0] = 0x1E;        // Register address
 800159a:	231e      	movs	r3, #30
 800159c:	733b      	strb	r3, [r7, #12]
    TxBuffer[1] = 0x00;        // Value (beep and tone configuration)
 800159e:	2300      	movs	r3, #0
 80015a0:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDRESS, TxBuffer, 2, I2C_TIMEOUT);
 80015a2:	f107 020c 	add.w	r2, r7, #12
 80015a6:	230a      	movs	r3, #10
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	2302      	movs	r3, #2
 80015ac:	2194      	movs	r1, #148	; 0x94
 80015ae:	4803      	ldr	r0, [pc, #12]	; (80015bc <CS43L22_Beep+0x84>)
 80015b0:	f002 f8ea 	bl	8003788 <HAL_I2C_Master_Transmit>
}
 80015b4:	bf00      	nop
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	200000f0 	.word	0x200000f0

080015c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015c6:	f001 f8a9 	bl	800271c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ca:	f000 f8a5 	bl	8001718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ce:	f000 fa59 	bl	8001a84 <MX_GPIO_Init>
  MX_DMA_Init();
 80015d2:	f000 fa37 	bl	8001a44 <MX_DMA_Init>
  MX_SPI1_Init();
 80015d6:	f000 f969 	bl	80018ac <MX_SPI1_Init>
  MX_TIM4_Init();
 80015da:	f000 f99d 	bl	8001918 <MX_TIM4_Init>
  MX_I2C1_Init();
 80015de:	f000 f909 	bl	80017f4 <MX_I2C1_Init>
  MX_I2S3_Init();
 80015e2:	f000 f935 	bl	8001850 <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim4);
 80015e6:	4840      	ldr	r0, [pc, #256]	; (80016e8 <main+0x128>)
 80015e8:	f004 fdba 	bl	8006160 <HAL_TIM_Base_Start_IT>
  LIS3DSH_InitTypeDef myAccConfigDef;

  myAccConfigDef.dataRate = LIS3DSH_DATARATE_25;
 80015ec:	2340      	movs	r3, #64	; 0x40
 80015ee:	703b      	strb	r3, [r7, #0]
  myAccConfigDef.fullScale = LIS3DSH_FULLSCALE_4;
 80015f0:	2308      	movs	r3, #8
 80015f2:	707b      	strb	r3, [r7, #1]
  myAccConfigDef.antiAliasingBW = LIS3DSH_FILTER_BW_50;
 80015f4:	23c0      	movs	r3, #192	; 0xc0
 80015f6:	70bb      	strb	r3, [r7, #2]
  myAccConfigDef.enableAxes = LIS3DSH_XYZ_ENABLE;
 80015f8:	2307      	movs	r3, #7
 80015fa:	70fb      	strb	r3, [r7, #3]
  myAccConfigDef.interruptEnable = true;
 80015fc:	2301      	movs	r3, #1
 80015fe:	713b      	strb	r3, [r7, #4]
  LIS3DSH_Init(&hspi1, &myAccConfigDef);
 8001600:	463b      	mov	r3, r7
 8001602:	4619      	mov	r1, r3
 8001604:	4839      	ldr	r0, [pc, #228]	; (80016ec <main+0x12c>)
 8001606:	f7ff fca7 	bl	8000f58 <LIS3DSH_Init>

  LIS3DSH_X_calibrate(-1000.0, 980.0);
 800160a:	eddf 0a39 	vldr	s1, [pc, #228]	; 80016f0 <main+0x130>
 800160e:	ed9f 0a39 	vldr	s0, [pc, #228]	; 80016f4 <main+0x134>
 8001612:	f7ff fe37 	bl	8001284 <LIS3DSH_X_calibrate>
  LIS3DSH_Y_calibrate(-1020.0, 1040.0);
 8001616:	eddf 0a38 	vldr	s1, [pc, #224]	; 80016f8 <main+0x138>
 800161a:	ed9f 0a38 	vldr	s0, [pc, #224]	; 80016fc <main+0x13c>
 800161e:	f7ff fe5f 	bl	80012e0 <LIS3DSH_Y_calibrate>
  LIS3DSH_Z_calibrate(-920.0, 1040.0);
 8001622:	eddf 0a35 	vldr	s1, [pc, #212]	; 80016f8 <main+0x138>
 8001626:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8001700 <main+0x140>
 800162a:	f7ff fe87 	bl	800133c <LIS3DSH_Z_calibrate>

  CS43L22_Init();
 800162e:	f7ff feb3 	bl	8001398 <CS43L22_Init>

    //Transmit empty data
    HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)dataI2S, 100);
 8001632:	2264      	movs	r2, #100	; 0x64
 8001634:	4933      	ldr	r1, [pc, #204]	; (8001704 <main+0x144>)
 8001636:	4834      	ldr	r0, [pc, #208]	; (8001708 <main+0x148>)
 8001638:	f002 fd40 	bl	80040bc <HAL_I2S_Transmit_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
        myData = LIS3DSH_GetDataScaled();
 800163c:	f7ff fda0 	bl	8001180 <LIS3DSH_GetDataScaled>
 8001640:	eef0 6a40 	vmov.f32	s13, s0
 8001644:	eeb0 7a60 	vmov.f32	s14, s1
 8001648:	eef0 7a41 	vmov.f32	s15, s2
 800164c:	4b2f      	ldr	r3, [pc, #188]	; (800170c <main+0x14c>)
 800164e:	edc3 6a00 	vstr	s13, [r3]
 8001652:	ed83 7a01 	vstr	s14, [r3, #4]
 8001656:	edc3 7a02 	vstr	s15, [r3, #8]

        // Prepare dataRdy flag and average of coordinates
        acquireAndAverageData(&myData);
 800165a:	482c      	ldr	r0, [pc, #176]	; (800170c <main+0x14c>)
 800165c:	f000 fd1a 	bl	8002094 <acquireAndAverageData>

        if (drdyFlag)
 8001660:	4b2b      	ldr	r3, [pc, #172]	; (8001710 <main+0x150>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0e9      	beq.n	800163c <main+0x7c>
        {
            // Determine LED direction
            tiltedLed = determineLED(myData);
 8001668:	4b28      	ldr	r3, [pc, #160]	; (800170c <main+0x14c>)
 800166a:	edd3 6a00 	vldr	s13, [r3]
 800166e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001672:	edd3 7a02 	vldr	s15, [r3, #8]
 8001676:	eeb0 0a66 	vmov.f32	s0, s13
 800167a:	eef0 0a47 	vmov.f32	s1, s14
 800167e:	eeb0 1a67 	vmov.f32	s2, s15
 8001682:	f000 fbd9 	bl	8001e38 <determineLED>
 8001686:	4603      	mov	r3, r0
 8001688:	461a      	mov	r2, r3
 800168a:	4b22      	ldr	r3, [pc, #136]	; (8001714 <main+0x154>)
 800168c:	701a      	strb	r2, [r3, #0]

            // Control LED based on direction
            startPWM(tiltedLed);
 800168e:	4b21      	ldr	r3, [pc, #132]	; (8001714 <main+0x154>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f000 fd70 	bl	8002178 <startPWM>
            setSound(tiltedLed, myData);
 8001698:	4b1e      	ldr	r3, [pc, #120]	; (8001714 <main+0x154>)
 800169a:	781a      	ldrb	r2, [r3, #0]
 800169c:	4b1b      	ldr	r3, [pc, #108]	; (800170c <main+0x14c>)
 800169e:	edd3 6a00 	vldr	s13, [r3]
 80016a2:	ed93 7a01 	vldr	s14, [r3, #4]
 80016a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80016aa:	eeb0 0a66 	vmov.f32	s0, s13
 80016ae:	eef0 0a47 	vmov.f32	s1, s14
 80016b2:	eeb0 1a67 	vmov.f32	s2, s15
 80016b6:	4610      	mov	r0, r2
 80016b8:	f000 fc76 	bl	8001fa8 <setSound>
            updateDutycycle(tiltedLed, myData);
 80016bc:	4b15      	ldr	r3, [pc, #84]	; (8001714 <main+0x154>)
 80016be:	781a      	ldrb	r2, [r3, #0]
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <main+0x14c>)
 80016c2:	edd3 6a00 	vldr	s13, [r3]
 80016c6:	ed93 7a01 	vldr	s14, [r3, #4]
 80016ca:	edd3 7a02 	vldr	s15, [r3, #8]
 80016ce:	eeb0 0a66 	vmov.f32	s0, s13
 80016d2:	eef0 0a47 	vmov.f32	s1, s14
 80016d6:	eeb0 1a67 	vmov.f32	s2, s15
 80016da:	4610      	mov	r0, r2
 80016dc:	f000 fb04 	bl	8001ce8 <updateDutycycle>
            drdyFlag = 0;
 80016e0:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <main+0x150>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]
        myData = LIS3DSH_GetDataScaled();
 80016e6:	e7a9      	b.n	800163c <main+0x7c>
 80016e8:	20000244 	.word	0x20000244
 80016ec:	200001ec 	.word	0x200001ec
 80016f0:	44750000 	.word	0x44750000
 80016f4:	c47a0000 	.word	0xc47a0000
 80016f8:	44820000 	.word	0x44820000
 80016fc:	c47f0000 	.word	0xc47f0000
 8001700:	c4660000 	.word	0xc4660000
 8001704:	2000028c 	.word	0x2000028c
 8001708:	20000144 	.word	0x20000144
 800170c:	20000354 	.word	0x20000354
 8001710:	20000360 	.word	0x20000360
 8001714:	20000010 	.word	0x20000010

08001718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b094      	sub	sp, #80	; 0x50
 800171c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800171e:	f107 0320 	add.w	r3, r7, #32
 8001722:	2230      	movs	r2, #48	; 0x30
 8001724:	2100      	movs	r1, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f005 fd74 	bl	8007214 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800172c:	f107 030c 	add.w	r3, r7, #12
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(16);
 800173c:	4b2b      	ldr	r3, [pc, #172]	; (80017ec <SystemClock_Config+0xd4>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001744:	4a29      	ldr	r2, [pc, #164]	; (80017ec <SystemClock_Config+0xd4>)
 8001746:	f043 0310 	orr.w	r3, r3, #16
 800174a:	6053      	str	r3, [r2, #4]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800174c:	4b27      	ldr	r3, [pc, #156]	; (80017ec <SystemClock_Config+0xd4>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	4a26      	ldr	r2, [pc, #152]	; (80017ec <SystemClock_Config+0xd4>)
 8001752:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001756:	6053      	str	r3, [r2, #4]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001758:	2300      	movs	r3, #0
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	4b23      	ldr	r3, [pc, #140]	; (80017ec <SystemClock_Config+0xd4>)
 800175e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001760:	4a22      	ldr	r2, [pc, #136]	; (80017ec <SystemClock_Config+0xd4>)
 8001762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001766:	6413      	str	r3, [r2, #64]	; 0x40
 8001768:	4b20      	ldr	r3, [pc, #128]	; (80017ec <SystemClock_Config+0xd4>)
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001774:	2300      	movs	r3, #0
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <SystemClock_Config+0xd8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a1c      	ldr	r2, [pc, #112]	; (80017f0 <SystemClock_Config+0xd8>)
 800177e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001782:	6013      	str	r3, [r2, #0]
 8001784:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <SystemClock_Config+0xd8>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800178c:	607b      	str	r3, [r7, #4]
 800178e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001790:	2301      	movs	r3, #1
 8001792:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001794:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800179a:	2300      	movs	r3, #0
 800179c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800179e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017a4:	f107 0320 	add.w	r3, r7, #32
 80017a8:	4618      	mov	r0, r3
 80017aa:	f003 f8ed 	bl	8004988 <HAL_RCC_OscConfig>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80017b4:	f000 fd52 	bl	800225c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017b8:	230f      	movs	r3, #15
 80017ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80017bc:	2301      	movs	r3, #1
 80017be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017c4:	2300      	movs	r3, #0
 80017c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017cc:	f107 030c 	add.w	r3, r7, #12
 80017d0:	2100      	movs	r1, #0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f003 fb50 	bl	8004e78 <HAL_RCC_ClockConfig>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80017de:	f000 fd3d 	bl	800225c <Error_Handler>
  }
}
 80017e2:	bf00      	nop
 80017e4:	3750      	adds	r7, #80	; 0x50
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40007000 	.word	0x40007000

080017f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017f8:	4b12      	ldr	r3, [pc, #72]	; (8001844 <MX_I2C1_Init+0x50>)
 80017fa:	4a13      	ldr	r2, [pc, #76]	; (8001848 <MX_I2C1_Init+0x54>)
 80017fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017fe:	4b11      	ldr	r3, [pc, #68]	; (8001844 <MX_I2C1_Init+0x50>)
 8001800:	4a12      	ldr	r2, [pc, #72]	; (800184c <MX_I2C1_Init+0x58>)
 8001802:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001804:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <MX_I2C1_Init+0x50>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800180a:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <MX_I2C1_Init+0x50>)
 800180c:	2200      	movs	r2, #0
 800180e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001810:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <MX_I2C1_Init+0x50>)
 8001812:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001816:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001818:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <MX_I2C1_Init+0x50>)
 800181a:	2200      	movs	r2, #0
 800181c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <MX_I2C1_Init+0x50>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001824:	4b07      	ldr	r3, [pc, #28]	; (8001844 <MX_I2C1_Init+0x50>)
 8001826:	2200      	movs	r2, #0
 8001828:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <MX_I2C1_Init+0x50>)
 800182c:	2200      	movs	r2, #0
 800182e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001830:	4804      	ldr	r0, [pc, #16]	; (8001844 <MX_I2C1_Init+0x50>)
 8001832:	f001 fe65 	bl	8003500 <HAL_I2C_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800183c:	f000 fd0e 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}
 8001844:	200000f0 	.word	0x200000f0
 8001848:	40005400 	.word	0x40005400
 800184c:	000186a0 	.word	0x000186a0

08001850 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001854:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <MX_I2S3_Init+0x54>)
 8001856:	4a14      	ldr	r2, [pc, #80]	; (80018a8 <MX_I2S3_Init+0x58>)
 8001858:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800185a:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <MX_I2S3_Init+0x54>)
 800185c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001860:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001862:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <MX_I2S3_Init+0x54>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001868:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <MX_I2S3_Init+0x54>)
 800186a:	2200      	movs	r2, #0
 800186c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800186e:	4b0d      	ldr	r3, [pc, #52]	; (80018a4 <MX_I2S3_Init+0x54>)
 8001870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001874:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001876:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <MX_I2S3_Init+0x54>)
 8001878:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800187c:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <MX_I2S3_Init+0x54>)
 8001880:	2200      	movs	r2, #0
 8001882:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001884:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <MX_I2S3_Init+0x54>)
 8001886:	2200      	movs	r2, #0
 8001888:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <MX_I2S3_Init+0x54>)
 800188c:	2200      	movs	r2, #0
 800188e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001890:	4804      	ldr	r0, [pc, #16]	; (80018a4 <MX_I2S3_Init+0x54>)
 8001892:	f002 fad3 	bl	8003e3c <HAL_I2S_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 800189c:	f000 fcde 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000144 	.word	0x20000144
 80018a8:	40003c00 	.word	0x40003c00

080018ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018b0:	4b17      	ldr	r3, [pc, #92]	; (8001910 <MX_SPI1_Init+0x64>)
 80018b2:	4a18      	ldr	r2, [pc, #96]	; (8001914 <MX_SPI1_Init+0x68>)
 80018b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018b6:	4b16      	ldr	r3, [pc, #88]	; (8001910 <MX_SPI1_Init+0x64>)
 80018b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018be:	4b14      	ldr	r3, [pc, #80]	; (8001910 <MX_SPI1_Init+0x64>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <MX_SPI1_Init+0x64>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <MX_SPI1_Init+0x64>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018d0:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <MX_SPI1_Init+0x64>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <MX_SPI1_Init+0x64>)
 80018d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80018de:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <MX_SPI1_Init+0x64>)
 80018e0:	2220      	movs	r2, #32
 80018e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018e4:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <MX_SPI1_Init+0x64>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018ea:	4b09      	ldr	r3, [pc, #36]	; (8001910 <MX_SPI1_Init+0x64>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018f0:	4b07      	ldr	r3, [pc, #28]	; (8001910 <MX_SPI1_Init+0x64>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018f6:	4b06      	ldr	r3, [pc, #24]	; (8001910 <MX_SPI1_Init+0x64>)
 80018f8:	220a      	movs	r2, #10
 80018fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018fc:	4804      	ldr	r0, [pc, #16]	; (8001910 <MX_SPI1_Init+0x64>)
 80018fe:	f003 fe09 	bl	8005514 <HAL_SPI_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001908:	f000 fca8 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}
 8001910:	200001ec 	.word	0x200001ec
 8001914:	40013000 	.word	0x40013000

08001918 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08e      	sub	sp, #56	; 0x38
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800191e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	609a      	str	r2, [r3, #8]
 800192a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800192c:	f107 0320 	add.w	r3, r7, #32
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001936:	1d3b      	adds	r3, r7, #4
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
 8001944:	615a      	str	r2, [r3, #20]
 8001946:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001948:	4b3c      	ldr	r3, [pc, #240]	; (8001a3c <MX_TIM4_Init+0x124>)
 800194a:	4a3d      	ldr	r2, [pc, #244]	; (8001a40 <MX_TIM4_Init+0x128>)
 800194c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 800194e:	4b3b      	ldr	r3, [pc, #236]	; (8001a3c <MX_TIM4_Init+0x124>)
 8001950:	2201      	movs	r2, #1
 8001952:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001954:	4b39      	ldr	r3, [pc, #228]	; (8001a3c <MX_TIM4_Init+0x124>)
 8001956:	2210      	movs	r2, #16
 8001958:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 39;
 800195a:	4b38      	ldr	r3, [pc, #224]	; (8001a3c <MX_TIM4_Init+0x124>)
 800195c:	2227      	movs	r2, #39	; 0x27
 800195e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001960:	4b36      	ldr	r3, [pc, #216]	; (8001a3c <MX_TIM4_Init+0x124>)
 8001962:	2200      	movs	r2, #0
 8001964:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001966:	4b35      	ldr	r3, [pc, #212]	; (8001a3c <MX_TIM4_Init+0x124>)
 8001968:	2280      	movs	r2, #128	; 0x80
 800196a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800196c:	4833      	ldr	r0, [pc, #204]	; (8001a3c <MX_TIM4_Init+0x124>)
 800196e:	f004 fba7 	bl	80060c0 <HAL_TIM_Base_Init>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8001978:	f000 fc70 	bl	800225c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800197c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001980:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001982:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001986:	4619      	mov	r1, r3
 8001988:	482c      	ldr	r0, [pc, #176]	; (8001a3c <MX_TIM4_Init+0x124>)
 800198a:	f004 ff9d 	bl	80068c8 <HAL_TIM_ConfigClockSource>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8001994:	f000 fc62 	bl	800225c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001998:	4828      	ldr	r0, [pc, #160]	; (8001a3c <MX_TIM4_Init+0x124>)
 800199a:	f004 fc51 	bl	8006240 <HAL_TIM_PWM_Init>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80019a4:	f000 fc5a 	bl	800225c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a8:	2300      	movs	r3, #0
 80019aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019b0:	f107 0320 	add.w	r3, r7, #32
 80019b4:	4619      	mov	r1, r3
 80019b6:	4821      	ldr	r0, [pc, #132]	; (8001a3c <MX_TIM4_Init+0x124>)
 80019b8:	f005 fb9c 	bl	80070f4 <HAL_TIMEx_MasterConfigSynchronization>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80019c2:	f000 fc4b 	bl	800225c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019c6:	2360      	movs	r3, #96	; 0x60
 80019c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	2200      	movs	r2, #0
 80019da:	4619      	mov	r1, r3
 80019dc:	4817      	ldr	r0, [pc, #92]	; (8001a3c <MX_TIM4_Init+0x124>)
 80019de:	f004 feb1 	bl	8006744 <HAL_TIM_PWM_ConfigChannel>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80019e8:	f000 fc38 	bl	800225c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019ec:	1d3b      	adds	r3, r7, #4
 80019ee:	2204      	movs	r2, #4
 80019f0:	4619      	mov	r1, r3
 80019f2:	4812      	ldr	r0, [pc, #72]	; (8001a3c <MX_TIM4_Init+0x124>)
 80019f4:	f004 fea6 	bl	8006744 <HAL_TIM_PWM_ConfigChannel>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 80019fe:	f000 fc2d 	bl	800225c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	2208      	movs	r2, #8
 8001a06:	4619      	mov	r1, r3
 8001a08:	480c      	ldr	r0, [pc, #48]	; (8001a3c <MX_TIM4_Init+0x124>)
 8001a0a:	f004 fe9b 	bl	8006744 <HAL_TIM_PWM_ConfigChannel>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 8001a14:	f000 fc22 	bl	800225c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	220c      	movs	r2, #12
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4807      	ldr	r0, [pc, #28]	; (8001a3c <MX_TIM4_Init+0x124>)
 8001a20:	f004 fe90 	bl	8006744 <HAL_TIM_PWM_ConfigChannel>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_TIM4_Init+0x116>
  {
    Error_Handler();
 8001a2a:	f000 fc17 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001a2e:	4803      	ldr	r0, [pc, #12]	; (8001a3c <MX_TIM4_Init+0x124>)
 8001a30:	f000 fdb8 	bl	80025a4 <HAL_TIM_MspPostInit>

}
 8001a34:	bf00      	nop
 8001a36:	3738      	adds	r7, #56	; 0x38
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000244 	.word	0x20000244
 8001a40:	40000800 	.word	0x40000800

08001a44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	607b      	str	r3, [r7, #4]
 8001a4e:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <MX_DMA_Init+0x3c>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a0b      	ldr	r2, [pc, #44]	; (8001a80 <MX_DMA_Init+0x3c>)
 8001a54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <MX_DMA_Init+0x3c>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001a66:	2200      	movs	r2, #0
 8001a68:	2100      	movs	r1, #0
 8001a6a:	2010      	movs	r0, #16
 8001a6c:	f000 ffc7 	bl	80029fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001a70:	2010      	movs	r0, #16
 8001a72:	f000 ffe0 	bl	8002a36 <HAL_NVIC_EnableIRQ>

}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40023800 	.word	0x40023800

08001a84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08c      	sub	sp, #48	; 0x30
 8001a88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8a:	f107 031c 	add.w	r3, r7, #28
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	60da      	str	r2, [r3, #12]
 8001a98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61bb      	str	r3, [r7, #24]
 8001a9e:	4b48      	ldr	r3, [pc, #288]	; (8001bc0 <MX_GPIO_Init+0x13c>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4a47      	ldr	r2, [pc, #284]	; (8001bc0 <MX_GPIO_Init+0x13c>)
 8001aa4:	f043 0310 	orr.w	r3, r3, #16
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4b45      	ldr	r3, [pc, #276]	; (8001bc0 <MX_GPIO_Init+0x13c>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f003 0310 	and.w	r3, r3, #16
 8001ab2:	61bb      	str	r3, [r7, #24]
 8001ab4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	4b41      	ldr	r3, [pc, #260]	; (8001bc0 <MX_GPIO_Init+0x13c>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a40      	ldr	r2, [pc, #256]	; (8001bc0 <MX_GPIO_Init+0x13c>)
 8001ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac6:	4b3e      	ldr	r3, [pc, #248]	; (8001bc0 <MX_GPIO_Init+0x13c>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	4b3a      	ldr	r3, [pc, #232]	; (8001bc0 <MX_GPIO_Init+0x13c>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a39      	ldr	r2, [pc, #228]	; (8001bc0 <MX_GPIO_Init+0x13c>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b37      	ldr	r3, [pc, #220]	; (8001bc0 <MX_GPIO_Init+0x13c>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	4b33      	ldr	r3, [pc, #204]	; (8001bc0 <MX_GPIO_Init+0x13c>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a32      	ldr	r2, [pc, #200]	; (8001bc0 <MX_GPIO_Init+0x13c>)
 8001af8:	f043 0308 	orr.w	r3, r3, #8
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b30      	ldr	r3, [pc, #192]	; (8001bc0 <MX_GPIO_Init+0x13c>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f003 0308 	and.w	r3, r3, #8
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	4b2c      	ldr	r3, [pc, #176]	; (8001bc0 <MX_GPIO_Init+0x13c>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a2b      	ldr	r2, [pc, #172]	; (8001bc0 <MX_GPIO_Init+0x13c>)
 8001b14:	f043 0304 	orr.w	r3, r3, #4
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b29      	ldr	r3, [pc, #164]	; (8001bc0 <MX_GPIO_Init+0x13c>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f003 0304 	and.w	r3, r3, #4
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	607b      	str	r3, [r7, #4]
 8001b2a:	4b25      	ldr	r3, [pc, #148]	; (8001bc0 <MX_GPIO_Init+0x13c>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a24      	ldr	r2, [pc, #144]	; (8001bc0 <MX_GPIO_Init+0x13c>)
 8001b30:	f043 0302 	orr.w	r3, r3, #2
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b22      	ldr	r3, [pc, #136]	; (8001bc0 <MX_GPIO_Init+0x13c>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2108      	movs	r1, #8
 8001b46:	481f      	ldr	r0, [pc, #124]	; (8001bc4 <MX_GPIO_Init+0x140>)
 8001b48:	f001 fc9c 	bl	8003484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2110      	movs	r1, #16
 8001b50:	481d      	ldr	r0, [pc, #116]	; (8001bc8 <MX_GPIO_Init+0x144>)
 8001b52:	f001 fc97 	bl	8003484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b56:	2308      	movs	r3, #8
 8001b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b62:	2300      	movs	r3, #0
 8001b64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b66:	f107 031c 	add.w	r3, r7, #28
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4815      	ldr	r0, [pc, #84]	; (8001bc4 <MX_GPIO_Init+0x140>)
 8001b6e:	f001 faed 	bl	800314c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b72:	2310      	movs	r3, #16
 8001b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b76:	2301      	movs	r3, #1
 8001b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b82:	f107 031c 	add.w	r3, r7, #28
 8001b86:	4619      	mov	r1, r3
 8001b88:	480f      	ldr	r0, [pc, #60]	; (8001bc8 <MX_GPIO_Init+0x144>)
 8001b8a:	f001 fadf 	bl	800314c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b92:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b9c:	f107 031c 	add.w	r3, r7, #28
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4808      	ldr	r0, [pc, #32]	; (8001bc4 <MX_GPIO_Init+0x140>)
 8001ba4:	f001 fad2 	bl	800314c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2100      	movs	r1, #0
 8001bac:	2006      	movs	r0, #6
 8001bae:	f000 ff26 	bl	80029fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001bb2:	2006      	movs	r0, #6
 8001bb4:	f000 ff3f 	bl	8002a36 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bb8:	bf00      	nop
 8001bba:	3730      	adds	r7, #48	; 0x30
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40020c00 	.word	0x40020c00

08001bcc <isFlat>:

/* USER CODE BEGIN 4 */
bool isFlat(LIS3DSH_DataScaled data)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	eef0 6a40 	vmov.f32	s13, s0
 8001bd6:	eeb0 7a60 	vmov.f32	s14, s1
 8001bda:	eef0 7a41 	vmov.f32	s15, s2
 8001bde:	edc7 6a01 	vstr	s13, [r7, #4]
 8001be2:	ed87 7a02 	vstr	s14, [r7, #8]
 8001be6:	edc7 7a03 	vstr	s15, [r7, #12]
    if (data.x > -X_TOLERANCE && data.x < X_TOLERANCE &&
 8001bea:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bee:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001c44 <isFlat+0x78>
 8001bf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfa:	dd1c      	ble.n	8001c36 <isFlat+0x6a>
 8001bfc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c00:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001c48 <isFlat+0x7c>
 8001c04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0c:	d513      	bpl.n	8001c36 <isFlat+0x6a>
        data.y > -Y_TOLERANCE && data.y < Y_TOLERANCE) {
 8001c0e:	edd7 7a02 	vldr	s15, [r7, #8]
    if (data.x > -X_TOLERANCE && data.x < X_TOLERANCE &&
 8001c12:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001c4c <isFlat+0x80>
 8001c16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1e:	dd0a      	ble.n	8001c36 <isFlat+0x6a>
        data.y > -Y_TOLERANCE && data.y < Y_TOLERANCE) {
 8001c20:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c24:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001c50 <isFlat+0x84>
 8001c28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c30:	d501      	bpl.n	8001c36 <isFlat+0x6a>
            // The board is considered flat
            return true;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <isFlat+0x6c>
        }

    // The board is not flat
    return false;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	c2340000 	.word	0xc2340000
 8001c48:	42340000 	.word	0x42340000
 8001c4c:	c2080000 	.word	0xc2080000
 8001c50:	42080000 	.word	0x42080000
 8001c54:	00000000 	.word	0x00000000

08001c58 <calculateTiltAngle>:


float calculateTiltAngle(LIS3DSH_DataScaled data) {
 8001c58:	b5b0      	push	{r4, r5, r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	eef0 6a40 	vmov.f32	s13, s0
 8001c62:	eeb0 7a60 	vmov.f32	s14, s1
 8001c66:	eef0 7a41 	vmov.f32	s15, s2
 8001c6a:	edc7 6a01 	vstr	s13, [r7, #4]
 8001c6e:	ed87 7a02 	vstr	s14, [r7, #8]
 8001c72:	edc7 7a03 	vstr	s15, [r7, #12]
    return atan2(data.y, data.x) * 180.0 / M_PI;
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7fe fc09 	bl	8000490 <__aeabi_f2d>
 8001c7e:	4604      	mov	r4, r0
 8001c80:	460d      	mov	r5, r1
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe fc03 	bl	8000490 <__aeabi_f2d>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	ec43 2b11 	vmov	d1, r2, r3
 8001c92:	ec45 4b10 	vmov	d0, r4, r5
 8001c96:	f005 fafd 	bl	8007294 <atan2>
 8001c9a:	ec51 0b10 	vmov	r0, r1, d0
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <calculateTiltAngle+0x88>)
 8001ca4:	f7fe fc4c 	bl	8000540 <__aeabi_dmul>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4610      	mov	r0, r2
 8001cae:	4619      	mov	r1, r3
 8001cb0:	a309      	add	r3, pc, #36	; (adr r3, 8001cd8 <calculateTiltAngle+0x80>)
 8001cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb6:	f7fe fd6d 	bl	8000794 <__aeabi_ddiv>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	4610      	mov	r0, r2
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f7fe ff0d 	bl	8000ae0 <__aeabi_d2f>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	ee07 3a90 	vmov	s15, r3
}
 8001ccc:	eeb0 0a67 	vmov.f32	s0, s15
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bdb0      	pop	{r4, r5, r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	54442d18 	.word	0x54442d18
 8001cdc:	400921fb 	.word	0x400921fb
 8001ce0:	40668000 	.word	0x40668000
 8001ce4:	00000000 	.word	0x00000000

08001ce8 <updateDutycycle>:

void updateDutycycle(uint8_t led, LIS3DSH_DataScaled data)
{
 8001ce8:	b5b0      	push	{r4, r5, r7, lr}
 8001cea:	b08c      	sub	sp, #48	; 0x30
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	eef0 6a40 	vmov.f32	s13, s0
 8001cf4:	eeb0 7a60 	vmov.f32	s14, s1
 8001cf8:	eef0 7a41 	vmov.f32	s15, s2
 8001cfc:	73fb      	strb	r3, [r7, #15]
 8001cfe:	edc7 6a00 	vstr	s13, [r7]
 8001d02:	ed87 7a01 	vstr	s14, [r7, #4]
 8001d06:	edc7 7a02 	vstr	s15, [r7, #8]
    const float midpointAngles[4] = {DEGREES_90, DEGREES_180, DEGREES_270, DEGREES_360};
 8001d0a:	4b45      	ldr	r3, [pc, #276]	; (8001e20 <updateDutycycle+0x138>)
 8001d0c:	f107 0414 	add.w	r4, r7, #20
 8001d10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint32_t dutyCycle;
    float tiltAngle = calculateTiltAngle(data);
 8001d16:	edd7 6a00 	vldr	s13, [r7]
 8001d1a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d22:	eeb0 0a66 	vmov.f32	s0, s13
 8001d26:	eef0 0a47 	vmov.f32	s1, s14
 8001d2a:	eeb0 1a67 	vmov.f32	s2, s15
 8001d2e:	f7ff ff93 	bl	8001c58 <calculateTiltAngle>
 8001d32:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c

    // Normalize angle to be between 0 and 360 degrees
    tiltAngle = fmod(tiltAngle + 360, 360);
 8001d36:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001d3a:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001e24 <updateDutycycle+0x13c>
 8001d3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d42:	ee17 0a90 	vmov	r0, s15
 8001d46:	f7fe fba3 	bl	8000490 <__aeabi_f2d>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	ed9f 1b32 	vldr	d1, [pc, #200]	; 8001e18 <updateDutycycle+0x130>
 8001d52:	ec43 2b10 	vmov	d0, r2, r3
 8001d56:	f005 fa9f 	bl	8007298 <fmod>
 8001d5a:	ec53 2b10 	vmov	r2, r3, d0
 8001d5e:	4610      	mov	r0, r2
 8001d60:	4619      	mov	r1, r3
 8001d62:	f7fe febd 	bl	8000ae0 <__aeabi_d2f>
 8001d66:	4603      	mov	r3, r0
 8001d68:	62fb      	str	r3, [r7, #44]	; 0x2c
    // Calculate angle difference from midpoint
    float angleDifference = fabs(midpointAngles[led] - tiltAngle); // Adjust index to match array
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	3330      	adds	r3, #48	; 0x30
 8001d70:	443b      	add	r3, r7
 8001d72:	3b1c      	subs	r3, #28
 8001d74:	ed93 7a00 	vldr	s14, [r3]
 8001d78:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001d7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d80:	eef0 7ae7 	vabs.f32	s15, s15
 8001d84:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    // Calculate duty cycle as a fraction of 90 degrees,for value between 0 and ARR
    dutyCycle = (uint32_t)((angleDifference / 90.0) * htim4.Instance->ARR);
 8001d88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d8a:	f7fe fb81 	bl	8000490 <__aeabi_f2d>
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	4b25      	ldr	r3, [pc, #148]	; (8001e28 <updateDutycycle+0x140>)
 8001d94:	f7fe fcfe 	bl	8000794 <__aeabi_ddiv>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4614      	mov	r4, r2
 8001d9e:	461d      	mov	r5, r3
 8001da0:	4b22      	ldr	r3, [pc, #136]	; (8001e2c <updateDutycycle+0x144>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fb50 	bl	800044c <__aeabi_ui2d>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4620      	mov	r0, r4
 8001db2:	4629      	mov	r1, r5
 8001db4:	f7fe fbc4 	bl	8000540 <__aeabi_dmul>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	f7fe fe6e 	bl	8000aa0 <__aeabi_d2uiz>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	627b      	str	r3, [r7, #36]	; 0x24

    // Set duty cycle based on the current LED
    switch (led) {
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	d81d      	bhi.n	8001e0a <updateDutycycle+0x122>
 8001dce:	a201      	add	r2, pc, #4	; (adr r2, 8001dd4 <updateDutycycle+0xec>)
 8001dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd4:	08001de9 	.word	0x08001de9
 8001dd8:	08001df1 	.word	0x08001df1
 8001ddc:	08001df9 	.word	0x08001df9
 8001de0:	08001e01 	.word	0x08001e01
 8001de4:	08001e09 	.word	0x08001e09
        case NORTH:
            TIM4->CCR1 = dutyCycle;
 8001de8:	4a11      	ldr	r2, [pc, #68]	; (8001e30 <updateDutycycle+0x148>)
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	6353      	str	r3, [r2, #52]	; 0x34
            break;
 8001dee:	e00c      	b.n	8001e0a <updateDutycycle+0x122>
        case EAST:
            TIM4->CCR2 = dutyCycle;
 8001df0:	4a0f      	ldr	r2, [pc, #60]	; (8001e30 <updateDutycycle+0x148>)
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	6393      	str	r3, [r2, #56]	; 0x38
            break;
 8001df6:	e008      	b.n	8001e0a <updateDutycycle+0x122>
        case SOUTH:
            TIM4->CCR3 = dutyCycle;
 8001df8:	4a0d      	ldr	r2, [pc, #52]	; (8001e30 <updateDutycycle+0x148>)
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	63d3      	str	r3, [r2, #60]	; 0x3c
            break;
 8001dfe:	e004      	b.n	8001e0a <updateDutycycle+0x122>
        case WEST:
            TIM4->CCR4 = dutyCycle;
 8001e00:	4a0b      	ldr	r2, [pc, #44]	; (8001e30 <updateDutycycle+0x148>)
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	6413      	str	r3, [r2, #64]	; 0x40
            break;
 8001e06:	e000      	b.n	8001e0a <updateDutycycle+0x122>
        case FLAT:
        	// Do nothing
            break;
 8001e08:	bf00      	nop
    }

}
 8001e0a:	bf00      	nop
 8001e0c:	3730      	adds	r7, #48	; 0x30
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bdb0      	pop	{r4, r5, r7, pc}
 8001e12:	bf00      	nop
 8001e14:	f3af 8000 	nop.w
 8001e18:	00000000 	.word	0x00000000
 8001e1c:	40768000 	.word	0x40768000
 8001e20:	08007a10 	.word	0x08007a10
 8001e24:	43b40000 	.word	0x43b40000
 8001e28:	40568000 	.word	0x40568000
 8001e2c:	20000244 	.word	0x20000244
 8001e30:	40000800 	.word	0x40000800
 8001e34:	00000000 	.word	0x00000000

08001e38 <determineLED>:

// Function to determine LED direction based on tilt angle
uint8_t determineLED(LIS3DSH_DataScaled data) {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	eef0 6a40 	vmov.f32	s13, s0
 8001e42:	eeb0 7a60 	vmov.f32	s14, s1
 8001e46:	eef0 7a41 	vmov.f32	s15, s2
 8001e4a:	edc7 6a01 	vstr	s13, [r7, #4]
 8001e4e:	ed87 7a02 	vstr	s14, [r7, #8]
 8001e52:	edc7 7a03 	vstr	s15, [r7, #12]
    float tiltAngle = calculateTiltAngle(data);
 8001e56:	edd7 6a01 	vldr	s13, [r7, #4]
 8001e5a:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e62:	eeb0 0a66 	vmov.f32	s0, s13
 8001e66:	eef0 0a47 	vmov.f32	s1, s14
 8001e6a:	eeb0 1a67 	vmov.f32	s2, s15
 8001e6e:	f7ff fef3 	bl	8001c58 <calculateTiltAngle>
 8001e72:	ed87 0a05 	vstr	s0, [r7, #20]

    // Normalize angle to be between 0 and 360 degrees
    tiltAngle = fmod(tiltAngle + 360, 360);
 8001e76:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e7a:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001f88 <determineLED+0x150>
 8001e7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e82:	ee17 0a90 	vmov	r0, s15
 8001e86:	f7fe fb03 	bl	8000490 <__aeabi_f2d>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	ed9f 1b3c 	vldr	d1, [pc, #240]	; 8001f80 <determineLED+0x148>
 8001e92:	ec43 2b10 	vmov	d0, r2, r3
 8001e96:	f005 f9ff 	bl	8007298 <fmod>
 8001e9a:	ec53 2b10 	vmov	r2, r3, d0
 8001e9e:	4610      	mov	r0, r2
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f7fe fe1d 	bl	8000ae0 <__aeabi_d2f>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	617b      	str	r3, [r7, #20]

    // Divide the range into four equal parts and assign LEDs

    if(isFlat(data))
 8001eaa:	edd7 6a01 	vldr	s13, [r7, #4]
 8001eae:	ed97 7a02 	vldr	s14, [r7, #8]
 8001eb2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001eb6:	eeb0 0a66 	vmov.f32	s0, s13
 8001eba:	eef0 0a47 	vmov.f32	s1, s14
 8001ebe:	eeb0 1a67 	vmov.f32	s2, s15
 8001ec2:	f7ff fe83 	bl	8001bcc <isFlat>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <determineLED+0x98>
    {
    	return FLAT;
 8001ecc:	2304      	movs	r3, #4
 8001ece:	e050      	b.n	8001f72 <determineLED+0x13a>
    }

    if (tiltAngle >= 0 +  ANGLE_THRESHOLD && tiltAngle <= 90) {
 8001ed0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ed4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ed8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee0:	db0a      	blt.n	8001ef8 <determineLED+0xc0>
 8001ee2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ee6:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001f8c <determineLED+0x154>
 8001eea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef2:	d801      	bhi.n	8001ef8 <determineLED+0xc0>
        return NORTH;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	e03c      	b.n	8001f72 <determineLED+0x13a>
    } else if (tiltAngle >= 90 +  ANGLE_THRESHOLD && tiltAngle <= 180 ) {
 8001ef8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001efc:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001f90 <determineLED+0x158>
 8001f00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f08:	db0a      	blt.n	8001f20 <determineLED+0xe8>
 8001f0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f0e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001f94 <determineLED+0x15c>
 8001f12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1a:	d801      	bhi.n	8001f20 <determineLED+0xe8>
        return EAST;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e028      	b.n	8001f72 <determineLED+0x13a>
    } else if (tiltAngle >= 180 +  ANGLE_THRESHOLD && tiltAngle <= 270) {
 8001f20:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f24:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001f98 <determineLED+0x160>
 8001f28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f30:	db0a      	blt.n	8001f48 <determineLED+0x110>
 8001f32:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f36:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001f9c <determineLED+0x164>
 8001f3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f42:	d801      	bhi.n	8001f48 <determineLED+0x110>
        return SOUTH;
 8001f44:	2302      	movs	r3, #2
 8001f46:	e014      	b.n	8001f72 <determineLED+0x13a>
    } else if(tiltAngle >= 270 +  ANGLE_THRESHOLD && tiltAngle <= 360){
 8001f48:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f4c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001fa0 <determineLED+0x168>
 8001f50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f58:	db0a      	blt.n	8001f70 <determineLED+0x138>
 8001f5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f5e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001f88 <determineLED+0x150>
 8001f62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f6a:	d801      	bhi.n	8001f70 <determineLED+0x138>
        return WEST;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e000      	b.n	8001f72 <determineLED+0x13a>
    } else
    {
    	return FLAT;
 8001f70:	2304      	movs	r3, #4
    }
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	f3af 8000 	nop.w
 8001f80:	00000000 	.word	0x00000000
 8001f84:	40768000 	.word	0x40768000
 8001f88:	43b40000 	.word	0x43b40000
 8001f8c:	42b40000 	.word	0x42b40000
 8001f90:	42c80000 	.word	0x42c80000
 8001f94:	43340000 	.word	0x43340000
 8001f98:	433e0000 	.word	0x433e0000
 8001f9c:	43870000 	.word	0x43870000
 8001fa0:	438c0000 	.word	0x438c0000
 8001fa4:	00000000 	.word	0x00000000

08001fa8 <setSound>:

void setSound(uint8_t led,LIS3DSH_DataScaled data)
{
 8001fa8:	b590      	push	{r4, r7, lr}
 8001faa:	b08b      	sub	sp, #44	; 0x2c
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	eef0 6a40 	vmov.f32	s13, s0
 8001fb4:	eeb0 7a60 	vmov.f32	s14, s1
 8001fb8:	eef0 7a41 	vmov.f32	s15, s2
 8001fbc:	73fb      	strb	r3, [r7, #15]
 8001fbe:	edc7 6a00 	vstr	s13, [r7]
 8001fc2:	ed87 7a01 	vstr	s14, [r7, #4]
 8001fc6:	edc7 7a02 	vstr	s15, [r7, #8]
    float midpointAngles[4] = {90.0, 180.0, 270.0, 360.0};
 8001fca:	4b2f      	ldr	r3, [pc, #188]	; (8002088 <setSound+0xe0>)
 8001fcc:	f107 0410 	add.w	r4, r7, #16
 8001fd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    float tiltAngle = calculateTiltAngle(data);
 8001fd6:	edd7 6a00 	vldr	s13, [r7]
 8001fda:	ed97 7a01 	vldr	s14, [r7, #4]
 8001fde:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fe2:	eeb0 0a66 	vmov.f32	s0, s13
 8001fe6:	eef0 0a47 	vmov.f32	s1, s14
 8001fea:	eeb0 1a67 	vmov.f32	s2, s15
 8001fee:	f7ff fe33 	bl	8001c58 <calculateTiltAngle>
 8001ff2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

    // Normalize angle to be between 0 and 360 degrees
    tiltAngle = fmod(tiltAngle + 360, 360);
 8001ff6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001ffa:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800208c <setSound+0xe4>
 8001ffe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002002:	ee17 0a90 	vmov	r0, s15
 8002006:	f7fe fa43 	bl	8000490 <__aeabi_f2d>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8002080 <setSound+0xd8>
 8002012:	ec43 2b10 	vmov	d0, r2, r3
 8002016:	f005 f93f 	bl	8007298 <fmod>
 800201a:	ec53 2b10 	vmov	r2, r3, d0
 800201e:	4610      	mov	r0, r2
 8002020:	4619      	mov	r1, r3
 8002022:	f7fe fd5d 	bl	8000ae0 <__aeabi_d2f>
 8002026:	4603      	mov	r3, r0
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
    // Calculate angle difference from midpoint
    float angleDifference = fabs(midpointAngles[led] - tiltAngle);
 800202a:	7bfb      	ldrb	r3, [r7, #15]
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	3328      	adds	r3, #40	; 0x28
 8002030:	443b      	add	r3, r7
 8002032:	3b18      	subs	r3, #24
 8002034:	ed93 7a00 	vldr	s14, [r3]
 8002038:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800203c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002040:	eef0 7ae7 	vabs.f32	s15, s15
 8002044:	edc7 7a08 	vstr	s15, [r7, #32]

    if (led != FLAT)
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	2b04      	cmp	r3, #4
 800204c:	d011      	beq.n	8002072 <setSound+0xca>
    {
        if(angleDifference <= 45)
 800204e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002052:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002090 <setSound+0xe8>
 8002056:	eef4 7ac7 	vcmpe.f32	s15, s14
 800205a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800205e:	d804      	bhi.n	800206a <setSound+0xc2>
    	{
    		CS43L22_Beep(C5, 200);
 8002060:	21c8      	movs	r1, #200	; 0xc8
 8002062:	2011      	movs	r0, #17
 8002064:	f7ff fa68 	bl	8001538 <CS43L22_Beep>
    	}
    }else
    {
    	// Do nothing
    }
}
 8002068:	e003      	b.n	8002072 <setSound+0xca>
    		CS43L22_Beep(F5, 200);
 800206a:	21c8      	movs	r1, #200	; 0xc8
 800206c:	2044      	movs	r0, #68	; 0x44
 800206e:	f7ff fa63 	bl	8001538 <CS43L22_Beep>
}
 8002072:	bf00      	nop
 8002074:	372c      	adds	r7, #44	; 0x2c
 8002076:	46bd      	mov	sp, r7
 8002078:	bd90      	pop	{r4, r7, pc}
 800207a:	bf00      	nop
 800207c:	f3af 8000 	nop.w
 8002080:	00000000 	.word	0x00000000
 8002084:	40768000 	.word	0x40768000
 8002088:	08007a10 	.word	0x08007a10
 800208c:	43b40000 	.word	0x43b40000
 8002090:	42340000 	.word	0x42340000

08002094 <acquireAndAverageData>:

void acquireAndAverageData(LIS3DSH_DataScaled *newData) {
 8002094:	b480      	push	{r7}
 8002096:	b087      	sub	sp, #28
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
    static LIS3DSH_DataScaled accumulatedData = {0};
    static uint8_t numValuesAveraged = 0;

    // Accumulate new data
    accumulatedData.x += newData->x;
 800209c:	4b33      	ldr	r3, [pc, #204]	; (800216c <acquireAndAverageData+0xd8>)
 800209e:	ed93 7a00 	vldr	s14, [r3]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	edd3 7a00 	vldr	s15, [r3]
 80020a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ac:	4b2f      	ldr	r3, [pc, #188]	; (800216c <acquireAndAverageData+0xd8>)
 80020ae:	edc3 7a00 	vstr	s15, [r3]
    accumulatedData.y += newData->y;
 80020b2:	4b2e      	ldr	r3, [pc, #184]	; (800216c <acquireAndAverageData+0xd8>)
 80020b4:	ed93 7a01 	vldr	s14, [r3, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80020be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020c2:	4b2a      	ldr	r3, [pc, #168]	; (800216c <acquireAndAverageData+0xd8>)
 80020c4:	edc3 7a01 	vstr	s15, [r3, #4]
    accumulatedData.z += newData->z;
 80020c8:	4b28      	ldr	r3, [pc, #160]	; (800216c <acquireAndAverageData+0xd8>)
 80020ca:	ed93 7a02 	vldr	s14, [r3, #8]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80020d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020d8:	4b24      	ldr	r3, [pc, #144]	; (800216c <acquireAndAverageData+0xd8>)
 80020da:	edc3 7a02 	vstr	s15, [r3, #8]

    numValuesAveraged++; // Increment the number of values averaged
 80020de:	4b24      	ldr	r3, [pc, #144]	; (8002170 <acquireAndAverageData+0xdc>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	3301      	adds	r3, #1
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	4b22      	ldr	r3, [pc, #136]	; (8002170 <acquireAndAverageData+0xdc>)
 80020e8:	701a      	strb	r2, [r3, #0]

    // Check if enough values are averaged
    if (numValuesAveraged >= NUM_VALUES_TO_AVERAGE) {
 80020ea:	4b21      	ldr	r3, [pc, #132]	; (8002170 <acquireAndAverageData+0xdc>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b07      	cmp	r3, #7
 80020f0:	d935      	bls.n	800215e <acquireAndAverageData+0xca>
        // Calculate the average
        accumulatedData.x /= NUM_VALUES_TO_AVERAGE;
 80020f2:	4b1e      	ldr	r3, [pc, #120]	; (800216c <acquireAndAverageData+0xd8>)
 80020f4:	ed93 7a00 	vldr	s14, [r3]
 80020f8:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80020fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002100:	4b1a      	ldr	r3, [pc, #104]	; (800216c <acquireAndAverageData+0xd8>)
 8002102:	edc3 7a00 	vstr	s15, [r3]
        accumulatedData.y /= NUM_VALUES_TO_AVERAGE;
 8002106:	4b19      	ldr	r3, [pc, #100]	; (800216c <acquireAndAverageData+0xd8>)
 8002108:	ed93 7a01 	vldr	s14, [r3, #4]
 800210c:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8002110:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002114:	4b15      	ldr	r3, [pc, #84]	; (800216c <acquireAndAverageData+0xd8>)
 8002116:	edc3 7a01 	vstr	s15, [r3, #4]
        accumulatedData.z /= NUM_VALUES_TO_AVERAGE;
 800211a:	4b14      	ldr	r3, [pc, #80]	; (800216c <acquireAndAverageData+0xd8>)
 800211c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002120:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8002124:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002128:	4b10      	ldr	r3, [pc, #64]	; (800216c <acquireAndAverageData+0xd8>)
 800212a:	edc3 7a02 	vstr	s15, [r3, #8]

        // Data is ready
        drdyFlag = 1;
 800212e:	4b11      	ldr	r3, [pc, #68]	; (8002174 <acquireAndAverageData+0xe0>)
 8002130:	2201      	movs	r2, #1
 8002132:	701a      	strb	r2, [r3, #0]

        // Update newData with averaged data
        newData->x = accumulatedData.x;
 8002134:	4b0d      	ldr	r3, [pc, #52]	; (800216c <acquireAndAverageData+0xd8>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	601a      	str	r2, [r3, #0]
        newData->y = accumulatedData.y;
 800213c:	4b0b      	ldr	r3, [pc, #44]	; (800216c <acquireAndAverageData+0xd8>)
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	605a      	str	r2, [r3, #4]
        newData->z = accumulatedData.z;
 8002144:	4b09      	ldr	r3, [pc, #36]	; (800216c <acquireAndAverageData+0xd8>)
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	609a      	str	r2, [r3, #8]

        // Reset counter and accumulated data for the next batch
        numValuesAveraged = 0;
 800214c:	4b08      	ldr	r3, [pc, #32]	; (8002170 <acquireAndAverageData+0xdc>)
 800214e:	2200      	movs	r2, #0
 8002150:	701a      	strb	r2, [r3, #0]
        accumulatedData = (LIS3DSH_DataScaled){0};
 8002152:	4b06      	ldr	r3, [pc, #24]	; (800216c <acquireAndAverageData+0xd8>)
 8002154:	461a      	mov	r2, r3
 8002156:	2300      	movs	r3, #0
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	6053      	str	r3, [r2, #4]
 800215c:	6093      	str	r3, [r2, #8]
    }
}
 800215e:	bf00      	nop
 8002160:	371c      	adds	r7, #28
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	20000364 	.word	0x20000364
 8002170:	20000370 	.word	0x20000370
 8002174:	20000360 	.word	0x20000360

08002178 <startPWM>:

void startPWM(uint8_t led) {
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	71fb      	strb	r3, [r7, #7]
    switch (led) {
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	2b04      	cmp	r3, #4
 8002186:	d862      	bhi.n	800224e <startPWM+0xd6>
 8002188:	a201      	add	r2, pc, #4	; (adr r2, 8002190 <startPWM+0x18>)
 800218a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800218e:	bf00      	nop
 8002190:	080021a5 	.word	0x080021a5
 8002194:	080021c7 	.word	0x080021c7
 8002198:	080021e9 	.word	0x080021e9
 800219c:	0800220b 	.word	0x0800220b
 80021a0:	0800222d 	.word	0x0800222d
        case NORTH:
            HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80021a4:	2100      	movs	r1, #0
 80021a6:	482c      	ldr	r0, [pc, #176]	; (8002258 <startPWM+0xe0>)
 80021a8:	f004 f8a4 	bl	80062f4 <HAL_TIM_PWM_Start>
            HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 80021ac:	2104      	movs	r1, #4
 80021ae:	482a      	ldr	r0, [pc, #168]	; (8002258 <startPWM+0xe0>)
 80021b0:	f004 f968 	bl	8006484 <HAL_TIM_PWM_Stop>
            HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 80021b4:	2108      	movs	r1, #8
 80021b6:	4828      	ldr	r0, [pc, #160]	; (8002258 <startPWM+0xe0>)
 80021b8:	f004 f964 	bl	8006484 <HAL_TIM_PWM_Stop>
            HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
 80021bc:	210c      	movs	r1, #12
 80021be:	4826      	ldr	r0, [pc, #152]	; (8002258 <startPWM+0xe0>)
 80021c0:	f004 f960 	bl	8006484 <HAL_TIM_PWM_Stop>
            break;
 80021c4:	e044      	b.n	8002250 <startPWM+0xd8>
        case EAST:
            HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 80021c6:	2100      	movs	r1, #0
 80021c8:	4823      	ldr	r0, [pc, #140]	; (8002258 <startPWM+0xe0>)
 80021ca:	f004 f95b 	bl	8006484 <HAL_TIM_PWM_Stop>
            HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80021ce:	2104      	movs	r1, #4
 80021d0:	4821      	ldr	r0, [pc, #132]	; (8002258 <startPWM+0xe0>)
 80021d2:	f004 f88f 	bl	80062f4 <HAL_TIM_PWM_Start>
            HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 80021d6:	2108      	movs	r1, #8
 80021d8:	481f      	ldr	r0, [pc, #124]	; (8002258 <startPWM+0xe0>)
 80021da:	f004 f953 	bl	8006484 <HAL_TIM_PWM_Stop>
            HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
 80021de:	210c      	movs	r1, #12
 80021e0:	481d      	ldr	r0, [pc, #116]	; (8002258 <startPWM+0xe0>)
 80021e2:	f004 f94f 	bl	8006484 <HAL_TIM_PWM_Stop>
            break;
 80021e6:	e033      	b.n	8002250 <startPWM+0xd8>
        case SOUTH:
            HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 80021e8:	2100      	movs	r1, #0
 80021ea:	481b      	ldr	r0, [pc, #108]	; (8002258 <startPWM+0xe0>)
 80021ec:	f004 f94a 	bl	8006484 <HAL_TIM_PWM_Stop>
            HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 80021f0:	2104      	movs	r1, #4
 80021f2:	4819      	ldr	r0, [pc, #100]	; (8002258 <startPWM+0xe0>)
 80021f4:	f004 f946 	bl	8006484 <HAL_TIM_PWM_Stop>
            HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80021f8:	2108      	movs	r1, #8
 80021fa:	4817      	ldr	r0, [pc, #92]	; (8002258 <startPWM+0xe0>)
 80021fc:	f004 f87a 	bl	80062f4 <HAL_TIM_PWM_Start>
            HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
 8002200:	210c      	movs	r1, #12
 8002202:	4815      	ldr	r0, [pc, #84]	; (8002258 <startPWM+0xe0>)
 8002204:	f004 f93e 	bl	8006484 <HAL_TIM_PWM_Stop>
            break;
 8002208:	e022      	b.n	8002250 <startPWM+0xd8>
        case WEST:
            HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 800220a:	2100      	movs	r1, #0
 800220c:	4812      	ldr	r0, [pc, #72]	; (8002258 <startPWM+0xe0>)
 800220e:	f004 f939 	bl	8006484 <HAL_TIM_PWM_Stop>
            HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8002212:	2104      	movs	r1, #4
 8002214:	4810      	ldr	r0, [pc, #64]	; (8002258 <startPWM+0xe0>)
 8002216:	f004 f935 	bl	8006484 <HAL_TIM_PWM_Stop>
            HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 800221a:	2108      	movs	r1, #8
 800221c:	480e      	ldr	r0, [pc, #56]	; (8002258 <startPWM+0xe0>)
 800221e:	f004 f931 	bl	8006484 <HAL_TIM_PWM_Stop>
            HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002222:	210c      	movs	r1, #12
 8002224:	480c      	ldr	r0, [pc, #48]	; (8002258 <startPWM+0xe0>)
 8002226:	f004 f865 	bl	80062f4 <HAL_TIM_PWM_Start>
            break;
 800222a:	e011      	b.n	8002250 <startPWM+0xd8>
        case FLAT:
            HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 800222c:	2100      	movs	r1, #0
 800222e:	480a      	ldr	r0, [pc, #40]	; (8002258 <startPWM+0xe0>)
 8002230:	f004 f928 	bl	8006484 <HAL_TIM_PWM_Stop>
            HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8002234:	2104      	movs	r1, #4
 8002236:	4808      	ldr	r0, [pc, #32]	; (8002258 <startPWM+0xe0>)
 8002238:	f004 f924 	bl	8006484 <HAL_TIM_PWM_Stop>
            HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 800223c:	2108      	movs	r1, #8
 800223e:	4806      	ldr	r0, [pc, #24]	; (8002258 <startPWM+0xe0>)
 8002240:	f004 f920 	bl	8006484 <HAL_TIM_PWM_Stop>
            HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
 8002244:	210c      	movs	r1, #12
 8002246:	4804      	ldr	r0, [pc, #16]	; (8002258 <startPWM+0xe0>)
 8002248:	f004 f91c 	bl	8006484 <HAL_TIM_PWM_Stop>
            break;
 800224c:	e000      	b.n	8002250 <startPWM+0xd8>
        default:
            // Do nothing
            break;
 800224e:	bf00      	nop
    }
}
 8002250:	bf00      	nop
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	20000244 	.word	0x20000244

0800225c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002260:	b672      	cpsid	i
}
 8002262:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002264:	e7fe      	b.n	8002264 <Error_Handler+0x8>
	...

08002268 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	607b      	str	r3, [r7, #4]
 8002272:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <HAL_MspInit+0x4c>)
 8002274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002276:	4a0f      	ldr	r2, [pc, #60]	; (80022b4 <HAL_MspInit+0x4c>)
 8002278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800227c:	6453      	str	r3, [r2, #68]	; 0x44
 800227e:	4b0d      	ldr	r3, [pc, #52]	; (80022b4 <HAL_MspInit+0x4c>)
 8002280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002286:	607b      	str	r3, [r7, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	603b      	str	r3, [r7, #0]
 800228e:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <HAL_MspInit+0x4c>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	4a08      	ldr	r2, [pc, #32]	; (80022b4 <HAL_MspInit+0x4c>)
 8002294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002298:	6413      	str	r3, [r2, #64]	; 0x40
 800229a:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <HAL_MspInit+0x4c>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a2:	603b      	str	r3, [r7, #0]
 80022a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	40023800 	.word	0x40023800

080022b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08a      	sub	sp, #40	; 0x28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c0:	f107 0314 	add.w	r3, r7, #20
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a19      	ldr	r2, [pc, #100]	; (800233c <HAL_I2C_MspInit+0x84>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d12c      	bne.n	8002334 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	4b18      	ldr	r3, [pc, #96]	; (8002340 <HAL_I2C_MspInit+0x88>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	4a17      	ldr	r2, [pc, #92]	; (8002340 <HAL_I2C_MspInit+0x88>)
 80022e4:	f043 0302 	orr.w	r3, r3, #2
 80022e8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ea:	4b15      	ldr	r3, [pc, #84]	; (8002340 <HAL_I2C_MspInit+0x88>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80022f6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80022fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022fc:	2312      	movs	r3, #18
 80022fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002304:	2303      	movs	r3, #3
 8002306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002308:	2304      	movs	r3, #4
 800230a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800230c:	f107 0314 	add.w	r3, r7, #20
 8002310:	4619      	mov	r1, r3
 8002312:	480c      	ldr	r0, [pc, #48]	; (8002344 <HAL_I2C_MspInit+0x8c>)
 8002314:	f000 ff1a 	bl	800314c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002318:	2300      	movs	r3, #0
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	4b08      	ldr	r3, [pc, #32]	; (8002340 <HAL_I2C_MspInit+0x88>)
 800231e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002320:	4a07      	ldr	r2, [pc, #28]	; (8002340 <HAL_I2C_MspInit+0x88>)
 8002322:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002326:	6413      	str	r3, [r2, #64]	; 0x40
 8002328:	4b05      	ldr	r3, [pc, #20]	; (8002340 <HAL_I2C_MspInit+0x88>)
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002334:	bf00      	nop
 8002336:	3728      	adds	r7, #40	; 0x28
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40005400 	.word	0x40005400
 8002340:	40023800 	.word	0x40023800
 8002344:	40020400 	.word	0x40020400

08002348 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08e      	sub	sp, #56	; 0x38
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002350:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002360:	f107 0314 	add.w	r3, r7, #20
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a4e      	ldr	r2, [pc, #312]	; (80024ac <HAL_I2S_MspInit+0x164>)
 8002374:	4293      	cmp	r3, r2
 8002376:	f040 8094 	bne.w	80024a2 <HAL_I2S_MspInit+0x15a>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800237a:	2301      	movs	r3, #1
 800237c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800237e:	23c0      	movs	r3, #192	; 0xc0
 8002380:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002382:	2302      	movs	r3, #2
 8002384:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002386:	f107 0314 	add.w	r3, r7, #20
 800238a:	4618      	mov	r0, r3
 800238c:	f002 ff80 	bl	8005290 <HAL_RCCEx_PeriphCLKConfig>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8002396:	f7ff ff61 	bl	800225c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	613b      	str	r3, [r7, #16]
 800239e:	4b44      	ldr	r3, [pc, #272]	; (80024b0 <HAL_I2S_MspInit+0x168>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	4a43      	ldr	r2, [pc, #268]	; (80024b0 <HAL_I2S_MspInit+0x168>)
 80023a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023a8:	6413      	str	r3, [r2, #64]	; 0x40
 80023aa:	4b41      	ldr	r3, [pc, #260]	; (80024b0 <HAL_I2S_MspInit+0x168>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023b2:	613b      	str	r3, [r7, #16]
 80023b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	4b3d      	ldr	r3, [pc, #244]	; (80024b0 <HAL_I2S_MspInit+0x168>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a3c      	ldr	r2, [pc, #240]	; (80024b0 <HAL_I2S_MspInit+0x168>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b3a      	ldr	r3, [pc, #232]	; (80024b0 <HAL_I2S_MspInit+0x168>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	4b36      	ldr	r3, [pc, #216]	; (80024b0 <HAL_I2S_MspInit+0x168>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	4a35      	ldr	r2, [pc, #212]	; (80024b0 <HAL_I2S_MspInit+0x168>)
 80023dc:	f043 0304 	orr.w	r3, r3, #4
 80023e0:	6313      	str	r3, [r2, #48]	; 0x30
 80023e2:	4b33      	ldr	r3, [pc, #204]	; (80024b0 <HAL_I2S_MspInit+0x168>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	60bb      	str	r3, [r7, #8]
 80023ec:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80023ee:	2310      	movs	r3, #16
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f2:	2302      	movs	r3, #2
 80023f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fa:	2300      	movs	r3, #0
 80023fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80023fe:	2306      	movs	r3, #6
 8002400:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002406:	4619      	mov	r1, r3
 8002408:	482a      	ldr	r0, [pc, #168]	; (80024b4 <HAL_I2S_MspInit+0x16c>)
 800240a:	f000 fe9f 	bl	800314c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 800240e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8002412:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002414:	2302      	movs	r3, #2
 8002416:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002418:	2300      	movs	r3, #0
 800241a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241c:	2300      	movs	r3, #0
 800241e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002420:	2306      	movs	r3, #6
 8002422:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002428:	4619      	mov	r1, r3
 800242a:	4823      	ldr	r0, [pc, #140]	; (80024b8 <HAL_I2S_MspInit+0x170>)
 800242c:	f000 fe8e 	bl	800314c <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8002430:	4b22      	ldr	r3, [pc, #136]	; (80024bc <HAL_I2S_MspInit+0x174>)
 8002432:	4a23      	ldr	r2, [pc, #140]	; (80024c0 <HAL_I2S_MspInit+0x178>)
 8002434:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8002436:	4b21      	ldr	r3, [pc, #132]	; (80024bc <HAL_I2S_MspInit+0x174>)
 8002438:	2200      	movs	r2, #0
 800243a:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800243c:	4b1f      	ldr	r3, [pc, #124]	; (80024bc <HAL_I2S_MspInit+0x174>)
 800243e:	2240      	movs	r2, #64	; 0x40
 8002440:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002442:	4b1e      	ldr	r3, [pc, #120]	; (80024bc <HAL_I2S_MspInit+0x174>)
 8002444:	2200      	movs	r2, #0
 8002446:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002448:	4b1c      	ldr	r3, [pc, #112]	; (80024bc <HAL_I2S_MspInit+0x174>)
 800244a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800244e:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002450:	4b1a      	ldr	r3, [pc, #104]	; (80024bc <HAL_I2S_MspInit+0x174>)
 8002452:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002456:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002458:	4b18      	ldr	r3, [pc, #96]	; (80024bc <HAL_I2S_MspInit+0x174>)
 800245a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800245e:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8002460:	4b16      	ldr	r3, [pc, #88]	; (80024bc <HAL_I2S_MspInit+0x174>)
 8002462:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002466:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002468:	4b14      	ldr	r3, [pc, #80]	; (80024bc <HAL_I2S_MspInit+0x174>)
 800246a:	2200      	movs	r2, #0
 800246c:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800246e:	4b13      	ldr	r3, [pc, #76]	; (80024bc <HAL_I2S_MspInit+0x174>)
 8002470:	2204      	movs	r2, #4
 8002472:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002474:	4b11      	ldr	r3, [pc, #68]	; (80024bc <HAL_I2S_MspInit+0x174>)
 8002476:	2203      	movs	r2, #3
 8002478:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800247a:	4b10      	ldr	r3, [pc, #64]	; (80024bc <HAL_I2S_MspInit+0x174>)
 800247c:	2200      	movs	r2, #0
 800247e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002480:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <HAL_I2S_MspInit+0x174>)
 8002482:	2200      	movs	r2, #0
 8002484:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8002486:	480d      	ldr	r0, [pc, #52]	; (80024bc <HAL_I2S_MspInit+0x174>)
 8002488:	f000 faf0 	bl	8002a6c <HAL_DMA_Init>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <HAL_I2S_MspInit+0x14e>
    {
      Error_Handler();
 8002492:	f7ff fee3 	bl	800225c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a08      	ldr	r2, [pc, #32]	; (80024bc <HAL_I2S_MspInit+0x174>)
 800249a:	639a      	str	r2, [r3, #56]	; 0x38
 800249c:	4a07      	ldr	r2, [pc, #28]	; (80024bc <HAL_I2S_MspInit+0x174>)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80024a2:	bf00      	nop
 80024a4:	3738      	adds	r7, #56	; 0x38
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40003c00 	.word	0x40003c00
 80024b0:	40023800 	.word	0x40023800
 80024b4:	40020000 	.word	0x40020000
 80024b8:	40020800 	.word	0x40020800
 80024bc:	2000018c 	.word	0x2000018c
 80024c0:	40026088 	.word	0x40026088

080024c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08a      	sub	sp, #40	; 0x28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024cc:	f107 0314 	add.w	r3, r7, #20
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	60da      	str	r2, [r3, #12]
 80024da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a19      	ldr	r2, [pc, #100]	; (8002548 <HAL_SPI_MspInit+0x84>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d12b      	bne.n	800253e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024e6:	2300      	movs	r3, #0
 80024e8:	613b      	str	r3, [r7, #16]
 80024ea:	4b18      	ldr	r3, [pc, #96]	; (800254c <HAL_SPI_MspInit+0x88>)
 80024ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ee:	4a17      	ldr	r2, [pc, #92]	; (800254c <HAL_SPI_MspInit+0x88>)
 80024f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024f4:	6453      	str	r3, [r2, #68]	; 0x44
 80024f6:	4b15      	ldr	r3, [pc, #84]	; (800254c <HAL_SPI_MspInit+0x88>)
 80024f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024fe:	613b      	str	r3, [r7, #16]
 8002500:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	4b11      	ldr	r3, [pc, #68]	; (800254c <HAL_SPI_MspInit+0x88>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	4a10      	ldr	r2, [pc, #64]	; (800254c <HAL_SPI_MspInit+0x88>)
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	6313      	str	r3, [r2, #48]	; 0x30
 8002512:	4b0e      	ldr	r3, [pc, #56]	; (800254c <HAL_SPI_MspInit+0x88>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800251e:	23e0      	movs	r3, #224	; 0xe0
 8002520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002522:	2302      	movs	r3, #2
 8002524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800252a:	2303      	movs	r3, #3
 800252c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800252e:	2305      	movs	r3, #5
 8002530:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002532:	f107 0314 	add.w	r3, r7, #20
 8002536:	4619      	mov	r1, r3
 8002538:	4805      	ldr	r0, [pc, #20]	; (8002550 <HAL_SPI_MspInit+0x8c>)
 800253a:	f000 fe07 	bl	800314c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800253e:	bf00      	nop
 8002540:	3728      	adds	r7, #40	; 0x28
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40013000 	.word	0x40013000
 800254c:	40023800 	.word	0x40023800
 8002550:	40020000 	.word	0x40020000

08002554 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a0e      	ldr	r2, [pc, #56]	; (800259c <HAL_TIM_Base_MspInit+0x48>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d115      	bne.n	8002592 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	60fb      	str	r3, [r7, #12]
 800256a:	4b0d      	ldr	r3, [pc, #52]	; (80025a0 <HAL_TIM_Base_MspInit+0x4c>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	4a0c      	ldr	r2, [pc, #48]	; (80025a0 <HAL_TIM_Base_MspInit+0x4c>)
 8002570:	f043 0304 	orr.w	r3, r3, #4
 8002574:	6413      	str	r3, [r2, #64]	; 0x40
 8002576:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <HAL_TIM_Base_MspInit+0x4c>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	f003 0304 	and.w	r3, r3, #4
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002582:	2200      	movs	r2, #0
 8002584:	2100      	movs	r1, #0
 8002586:	201e      	movs	r0, #30
 8002588:	f000 fa39 	bl	80029fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800258c:	201e      	movs	r0, #30
 800258e:	f000 fa52 	bl	8002a36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002592:	bf00      	nop
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40000800 	.word	0x40000800
 80025a0:	40023800 	.word	0x40023800

080025a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ac:	f107 030c 	add.w	r3, r7, #12
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	60da      	str	r2, [r3, #12]
 80025ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a12      	ldr	r2, [pc, #72]	; (800260c <HAL_TIM_MspPostInit+0x68>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d11e      	bne.n	8002604 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	60bb      	str	r3, [r7, #8]
 80025ca:	4b11      	ldr	r3, [pc, #68]	; (8002610 <HAL_TIM_MspPostInit+0x6c>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	4a10      	ldr	r2, [pc, #64]	; (8002610 <HAL_TIM_MspPostInit+0x6c>)
 80025d0:	f043 0308 	orr.w	r3, r3, #8
 80025d4:	6313      	str	r3, [r2, #48]	; 0x30
 80025d6:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <HAL_TIM_MspPostInit+0x6c>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	60bb      	str	r3, [r7, #8]
 80025e0:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80025e2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80025e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e8:	2302      	movs	r3, #2
 80025ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f0:	2300      	movs	r3, #0
 80025f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80025f4:	2302      	movs	r3, #2
 80025f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025f8:	f107 030c 	add.w	r3, r7, #12
 80025fc:	4619      	mov	r1, r3
 80025fe:	4805      	ldr	r0, [pc, #20]	; (8002614 <HAL_TIM_MspPostInit+0x70>)
 8002600:	f000 fda4 	bl	800314c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002604:	bf00      	nop
 8002606:	3720      	adds	r7, #32
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40000800 	.word	0x40000800
 8002610:	40023800 	.word	0x40023800
 8002614:	40020c00 	.word	0x40020c00

08002618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800261c:	e7fe      	b.n	800261c <NMI_Handler+0x4>

0800261e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800261e:	b480      	push	{r7}
 8002620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002622:	e7fe      	b.n	8002622 <HardFault_Handler+0x4>

08002624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002628:	e7fe      	b.n	8002628 <MemManage_Handler+0x4>

0800262a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800262a:	b480      	push	{r7}
 800262c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800262e:	e7fe      	b.n	800262e <BusFault_Handler+0x4>

08002630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002634:	e7fe      	b.n	8002634 <UsageFault_Handler+0x4>

08002636 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002636:	b480      	push	{r7}
 8002638:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800263a:	bf00      	nop
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002648:	bf00      	nop
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002652:	b480      	push	{r7}
 8002654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002664:	f000 f8ac 	bl	80027c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002668:	bf00      	nop
 800266a:	bd80      	pop	{r7, pc}

0800266c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002670:	2001      	movs	r0, #1
 8002672:	f000 ff21 	bl	80034b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
	...

0800267c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8002680:	4802      	ldr	r0, [pc, #8]	; (800268c <DMA1_Stream5_IRQHandler+0x10>)
 8002682:	f000 faf9 	bl	8002c78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	2000018c 	.word	0x2000018c

08002690 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002694:	4802      	ldr	r0, [pc, #8]	; (80026a0 <TIM4_IRQHandler+0x10>)
 8002696:	f003 ff65 	bl	8006564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20000244 	.word	0x20000244

080026a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <SystemInit+0x20>)
 80026aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ae:	4a05      	ldr	r2, [pc, #20]	; (80026c4 <SystemInit+0x20>)
 80026b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80026c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002700 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80026cc:	f7ff ffea 	bl	80026a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026d0:	480c      	ldr	r0, [pc, #48]	; (8002704 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026d2:	490d      	ldr	r1, [pc, #52]	; (8002708 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026d4:	4a0d      	ldr	r2, [pc, #52]	; (800270c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026d8:	e002      	b.n	80026e0 <LoopCopyDataInit>

080026da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026de:	3304      	adds	r3, #4

080026e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026e4:	d3f9      	bcc.n	80026da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026e6:	4a0a      	ldr	r2, [pc, #40]	; (8002710 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026e8:	4c0a      	ldr	r4, [pc, #40]	; (8002714 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026ec:	e001      	b.n	80026f2 <LoopFillZerobss>

080026ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026f0:	3204      	adds	r2, #4

080026f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026f4:	d3fb      	bcc.n	80026ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026f6:	f004 fd9b 	bl	8007230 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026fa:	f7fe ff61 	bl	80015c0 <main>
  bx  lr    
 80026fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002700:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002708:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800270c:	08007ad0 	.word	0x08007ad0
  ldr r2, =_sbss
 8002710:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002714:	200004b0 	.word	0x200004b0

08002718 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002718:	e7fe      	b.n	8002718 <ADC_IRQHandler>
	...

0800271c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002720:	4b0e      	ldr	r3, [pc, #56]	; (800275c <HAL_Init+0x40>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a0d      	ldr	r2, [pc, #52]	; (800275c <HAL_Init+0x40>)
 8002726:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800272a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800272c:	4b0b      	ldr	r3, [pc, #44]	; (800275c <HAL_Init+0x40>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a0a      	ldr	r2, [pc, #40]	; (800275c <HAL_Init+0x40>)
 8002732:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002736:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002738:	4b08      	ldr	r3, [pc, #32]	; (800275c <HAL_Init+0x40>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a07      	ldr	r2, [pc, #28]	; (800275c <HAL_Init+0x40>)
 800273e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002742:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002744:	2003      	movs	r0, #3
 8002746:	f000 f94f 	bl	80029e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800274a:	200f      	movs	r0, #15
 800274c:	f000 f808 	bl	8002760 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002750:	f7ff fd8a 	bl	8002268 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40023c00 	.word	0x40023c00

08002760 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002768:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <HAL_InitTick+0x54>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	4b12      	ldr	r3, [pc, #72]	; (80027b8 <HAL_InitTick+0x58>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	4619      	mov	r1, r3
 8002772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002776:	fbb3 f3f1 	udiv	r3, r3, r1
 800277a:	fbb2 f3f3 	udiv	r3, r2, r3
 800277e:	4618      	mov	r0, r3
 8002780:	f000 f967 	bl	8002a52 <HAL_SYSTICK_Config>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e00e      	b.n	80027ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b0f      	cmp	r3, #15
 8002792:	d80a      	bhi.n	80027aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002794:	2200      	movs	r2, #0
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800279c:	f000 f92f 	bl	80029fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027a0:	4a06      	ldr	r2, [pc, #24]	; (80027bc <HAL_InitTick+0x5c>)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
 80027a8:	e000      	b.n	80027ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	20000014 	.word	0x20000014
 80027b8:	2000001c 	.word	0x2000001c
 80027bc:	20000018 	.word	0x20000018

080027c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027c4:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <HAL_IncTick+0x20>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	461a      	mov	r2, r3
 80027ca:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_IncTick+0x24>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4413      	add	r3, r2
 80027d0:	4a04      	ldr	r2, [pc, #16]	; (80027e4 <HAL_IncTick+0x24>)
 80027d2:	6013      	str	r3, [r2, #0]
}
 80027d4:	bf00      	nop
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	2000001c 	.word	0x2000001c
 80027e4:	20000374 	.word	0x20000374

080027e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  return uwTick;
 80027ec:	4b03      	ldr	r3, [pc, #12]	; (80027fc <HAL_GetTick+0x14>)
 80027ee:	681b      	ldr	r3, [r3, #0]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	20000374 	.word	0x20000374

08002800 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002808:	f7ff ffee 	bl	80027e8 <HAL_GetTick>
 800280c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002818:	d005      	beq.n	8002826 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800281a:	4b0a      	ldr	r3, [pc, #40]	; (8002844 <HAL_Delay+0x44>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	461a      	mov	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4413      	add	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002826:	bf00      	nop
 8002828:	f7ff ffde 	bl	80027e8 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	429a      	cmp	r2, r3
 8002836:	d8f7      	bhi.n	8002828 <HAL_Delay+0x28>
  {
  }
}
 8002838:	bf00      	nop
 800283a:	bf00      	nop
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	2000001c 	.word	0x2000001c

08002848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002858:	4b0c      	ldr	r3, [pc, #48]	; (800288c <__NVIC_SetPriorityGrouping+0x44>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002864:	4013      	ands	r3, r2
 8002866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002870:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800287a:	4a04      	ldr	r2, [pc, #16]	; (800288c <__NVIC_SetPriorityGrouping+0x44>)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	60d3      	str	r3, [r2, #12]
}
 8002880:	bf00      	nop
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	e000ed00 	.word	0xe000ed00

08002890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002894:	4b04      	ldr	r3, [pc, #16]	; (80028a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	0a1b      	lsrs	r3, r3, #8
 800289a:	f003 0307 	and.w	r3, r3, #7
}
 800289e:	4618      	mov	r0, r3
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	e000ed00 	.word	0xe000ed00

080028ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	4603      	mov	r3, r0
 80028b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	db0b      	blt.n	80028d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028be:	79fb      	ldrb	r3, [r7, #7]
 80028c0:	f003 021f 	and.w	r2, r3, #31
 80028c4:	4907      	ldr	r1, [pc, #28]	; (80028e4 <__NVIC_EnableIRQ+0x38>)
 80028c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ca:	095b      	lsrs	r3, r3, #5
 80028cc:	2001      	movs	r0, #1
 80028ce:	fa00 f202 	lsl.w	r2, r0, r2
 80028d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	e000e100 	.word	0xe000e100

080028e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	6039      	str	r1, [r7, #0]
 80028f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	db0a      	blt.n	8002912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	490c      	ldr	r1, [pc, #48]	; (8002934 <__NVIC_SetPriority+0x4c>)
 8002902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002906:	0112      	lsls	r2, r2, #4
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	440b      	add	r3, r1
 800290c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002910:	e00a      	b.n	8002928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	b2da      	uxtb	r2, r3
 8002916:	4908      	ldr	r1, [pc, #32]	; (8002938 <__NVIC_SetPriority+0x50>)
 8002918:	79fb      	ldrb	r3, [r7, #7]
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	3b04      	subs	r3, #4
 8002920:	0112      	lsls	r2, r2, #4
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	440b      	add	r3, r1
 8002926:	761a      	strb	r2, [r3, #24]
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	e000e100 	.word	0xe000e100
 8002938:	e000ed00 	.word	0xe000ed00

0800293c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800293c:	b480      	push	{r7}
 800293e:	b089      	sub	sp, #36	; 0x24
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f1c3 0307 	rsb	r3, r3, #7
 8002956:	2b04      	cmp	r3, #4
 8002958:	bf28      	it	cs
 800295a:	2304      	movcs	r3, #4
 800295c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	3304      	adds	r3, #4
 8002962:	2b06      	cmp	r3, #6
 8002964:	d902      	bls.n	800296c <NVIC_EncodePriority+0x30>
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	3b03      	subs	r3, #3
 800296a:	e000      	b.n	800296e <NVIC_EncodePriority+0x32>
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002970:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43da      	mvns	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	401a      	ands	r2, r3
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002984:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	fa01 f303 	lsl.w	r3, r1, r3
 800298e:	43d9      	mvns	r1, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002994:	4313      	orrs	r3, r2
         );
}
 8002996:	4618      	mov	r0, r3
 8002998:	3724      	adds	r7, #36	; 0x24
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
	...

080029a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3b01      	subs	r3, #1
 80029b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029b4:	d301      	bcc.n	80029ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029b6:	2301      	movs	r3, #1
 80029b8:	e00f      	b.n	80029da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ba:	4a0a      	ldr	r2, [pc, #40]	; (80029e4 <SysTick_Config+0x40>)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3b01      	subs	r3, #1
 80029c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029c2:	210f      	movs	r1, #15
 80029c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029c8:	f7ff ff8e 	bl	80028e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029cc:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <SysTick_Config+0x40>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029d2:	4b04      	ldr	r3, [pc, #16]	; (80029e4 <SysTick_Config+0x40>)
 80029d4:	2207      	movs	r2, #7
 80029d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	e000e010 	.word	0xe000e010

080029e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7ff ff29 	bl	8002848 <__NVIC_SetPriorityGrouping>
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b086      	sub	sp, #24
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	4603      	mov	r3, r0
 8002a06:	60b9      	str	r1, [r7, #8]
 8002a08:	607a      	str	r2, [r7, #4]
 8002a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a10:	f7ff ff3e 	bl	8002890 <__NVIC_GetPriorityGrouping>
 8002a14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	68b9      	ldr	r1, [r7, #8]
 8002a1a:	6978      	ldr	r0, [r7, #20]
 8002a1c:	f7ff ff8e 	bl	800293c <NVIC_EncodePriority>
 8002a20:	4602      	mov	r2, r0
 8002a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a26:	4611      	mov	r1, r2
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff ff5d 	bl	80028e8 <__NVIC_SetPriority>
}
 8002a2e:	bf00      	nop
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b082      	sub	sp, #8
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff ff31 	bl	80028ac <__NVIC_EnableIRQ>
}
 8002a4a:	bf00      	nop
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b082      	sub	sp, #8
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7ff ffa2 	bl	80029a4 <SysTick_Config>
 8002a60:	4603      	mov	r3, r0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
	...

08002a6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a78:	f7ff feb6 	bl	80027e8 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e099      	b.n	8002bbc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0201 	bic.w	r2, r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aa8:	e00f      	b.n	8002aca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002aaa:	f7ff fe9d 	bl	80027e8 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b05      	cmp	r3, #5
 8002ab6:	d908      	bls.n	8002aca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2220      	movs	r2, #32
 8002abc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2203      	movs	r2, #3
 8002ac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e078      	b.n	8002bbc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1e8      	bne.n	8002aaa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	4b38      	ldr	r3, [pc, #224]	; (8002bc4 <HAL_DMA_Init+0x158>)
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002af6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d107      	bne.n	8002b34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	f023 0307 	bic.w	r3, r3, #7
 8002b4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d117      	bne.n	8002b8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00e      	beq.n	8002b8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 fa6f 	bl	8003054 <DMA_CheckFifoParam>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d008      	beq.n	8002b8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2240      	movs	r2, #64	; 0x40
 8002b80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e016      	b.n	8002bbc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 fa26 	bl	8002fe8 <DMA_CalcBaseAndBitshift>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba4:	223f      	movs	r2, #63	; 0x3f
 8002ba6:	409a      	lsls	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3718      	adds	r7, #24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	f010803f 	.word	0xf010803f

08002bc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
 8002bd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bde:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d101      	bne.n	8002bee <HAL_DMA_Start_IT+0x26>
 8002bea:	2302      	movs	r3, #2
 8002bec:	e040      	b.n	8002c70 <HAL_DMA_Start_IT+0xa8>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d12f      	bne.n	8002c62 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2202      	movs	r2, #2
 8002c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	68b9      	ldr	r1, [r7, #8]
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 f9b8 	bl	8002f8c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c20:	223f      	movs	r2, #63	; 0x3f
 8002c22:	409a      	lsls	r2, r3
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0216 	orr.w	r2, r2, #22
 8002c36:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d007      	beq.n	8002c50 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0208 	orr.w	r2, r2, #8
 8002c4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0201 	orr.w	r2, r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	e005      	b.n	8002c6e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c84:	4b8e      	ldr	r3, [pc, #568]	; (8002ec0 <HAL_DMA_IRQHandler+0x248>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a8e      	ldr	r2, [pc, #568]	; (8002ec4 <HAL_DMA_IRQHandler+0x24c>)
 8002c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8e:	0a9b      	lsrs	r3, r3, #10
 8002c90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca2:	2208      	movs	r2, #8
 8002ca4:	409a      	lsls	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d01a      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d013      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 0204 	bic.w	r2, r2, #4
 8002cca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd0:	2208      	movs	r2, #8
 8002cd2:	409a      	lsls	r2, r3
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cdc:	f043 0201 	orr.w	r2, r3, #1
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce8:	2201      	movs	r2, #1
 8002cea:	409a      	lsls	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d012      	beq.n	8002d1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00b      	beq.n	8002d1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d06:	2201      	movs	r2, #1
 8002d08:	409a      	lsls	r2, r3
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d12:	f043 0202 	orr.w	r2, r3, #2
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d1e:	2204      	movs	r2, #4
 8002d20:	409a      	lsls	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4013      	ands	r3, r2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d012      	beq.n	8002d50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00b      	beq.n	8002d50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d3c:	2204      	movs	r2, #4
 8002d3e:	409a      	lsls	r2, r3
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d48:	f043 0204 	orr.w	r2, r3, #4
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d54:	2210      	movs	r2, #16
 8002d56:	409a      	lsls	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d043      	beq.n	8002de8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0308 	and.w	r3, r3, #8
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d03c      	beq.n	8002de8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d72:	2210      	movs	r2, #16
 8002d74:	409a      	lsls	r2, r3
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d018      	beq.n	8002dba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d108      	bne.n	8002da8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d024      	beq.n	8002de8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	4798      	blx	r3
 8002da6:	e01f      	b.n	8002de8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d01b      	beq.n	8002de8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	4798      	blx	r3
 8002db8:	e016      	b.n	8002de8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d107      	bne.n	8002dd8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0208 	bic.w	r2, r2, #8
 8002dd6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d003      	beq.n	8002de8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dec:	2220      	movs	r2, #32
 8002dee:	409a      	lsls	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4013      	ands	r3, r2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 808f 	beq.w	8002f18 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0310 	and.w	r3, r3, #16
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 8087 	beq.w	8002f18 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0e:	2220      	movs	r2, #32
 8002e10:	409a      	lsls	r2, r3
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b05      	cmp	r3, #5
 8002e20:	d136      	bne.n	8002e90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 0216 	bic.w	r2, r2, #22
 8002e30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	695a      	ldr	r2, [r3, #20]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d103      	bne.n	8002e52 <HAL_DMA_IRQHandler+0x1da>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d007      	beq.n	8002e62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 0208 	bic.w	r2, r2, #8
 8002e60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e66:	223f      	movs	r2, #63	; 0x3f
 8002e68:	409a      	lsls	r2, r3
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d07e      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	4798      	blx	r3
        }
        return;
 8002e8e:	e079      	b.n	8002f84 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d01d      	beq.n	8002eda <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10d      	bne.n	8002ec8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d031      	beq.n	8002f18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	4798      	blx	r3
 8002ebc:	e02c      	b.n	8002f18 <HAL_DMA_IRQHandler+0x2a0>
 8002ebe:	bf00      	nop
 8002ec0:	20000014 	.word	0x20000014
 8002ec4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d023      	beq.n	8002f18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	4798      	blx	r3
 8002ed8:	e01e      	b.n	8002f18 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10f      	bne.n	8002f08 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0210 	bic.w	r2, r2, #16
 8002ef6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d032      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d022      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2205      	movs	r2, #5
 8002f30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0201 	bic.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	3301      	adds	r3, #1
 8002f48:	60bb      	str	r3, [r7, #8]
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d307      	bcc.n	8002f60 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1f2      	bne.n	8002f44 <HAL_DMA_IRQHandler+0x2cc>
 8002f5e:	e000      	b.n	8002f62 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f60:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d005      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	4798      	blx	r3
 8002f82:	e000      	b.n	8002f86 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f84:	bf00      	nop
    }
  }
}
 8002f86:	3718      	adds	r7, #24
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
 8002f98:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fa8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	2b40      	cmp	r3, #64	; 0x40
 8002fb8:	d108      	bne.n	8002fcc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002fca:	e007      	b.n	8002fdc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68ba      	ldr	r2, [r7, #8]
 8002fd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	60da      	str	r2, [r3, #12]
}
 8002fdc:	bf00      	nop
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	3b10      	subs	r3, #16
 8002ff8:	4a14      	ldr	r2, [pc, #80]	; (800304c <DMA_CalcBaseAndBitshift+0x64>)
 8002ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffe:	091b      	lsrs	r3, r3, #4
 8003000:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003002:	4a13      	ldr	r2, [pc, #76]	; (8003050 <DMA_CalcBaseAndBitshift+0x68>)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4413      	add	r3, r2
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2b03      	cmp	r3, #3
 8003014:	d909      	bls.n	800302a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800301e:	f023 0303 	bic.w	r3, r3, #3
 8003022:	1d1a      	adds	r2, r3, #4
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	659a      	str	r2, [r3, #88]	; 0x58
 8003028:	e007      	b.n	800303a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003032:	f023 0303 	bic.w	r3, r3, #3
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800303e:	4618      	mov	r0, r3
 8003040:	3714      	adds	r7, #20
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	aaaaaaab 	.word	0xaaaaaaab
 8003050:	08007a38 	.word	0x08007a38

08003054 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800305c:	2300      	movs	r3, #0
 800305e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003064:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d11f      	bne.n	80030ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2b03      	cmp	r3, #3
 8003072:	d856      	bhi.n	8003122 <DMA_CheckFifoParam+0xce>
 8003074:	a201      	add	r2, pc, #4	; (adr r2, 800307c <DMA_CheckFifoParam+0x28>)
 8003076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307a:	bf00      	nop
 800307c:	0800308d 	.word	0x0800308d
 8003080:	0800309f 	.word	0x0800309f
 8003084:	0800308d 	.word	0x0800308d
 8003088:	08003123 	.word	0x08003123
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003090:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d046      	beq.n	8003126 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800309c:	e043      	b.n	8003126 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030a6:	d140      	bne.n	800312a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ac:	e03d      	b.n	800312a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030b6:	d121      	bne.n	80030fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2b03      	cmp	r3, #3
 80030bc:	d837      	bhi.n	800312e <DMA_CheckFifoParam+0xda>
 80030be:	a201      	add	r2, pc, #4	; (adr r2, 80030c4 <DMA_CheckFifoParam+0x70>)
 80030c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c4:	080030d5 	.word	0x080030d5
 80030c8:	080030db 	.word	0x080030db
 80030cc:	080030d5 	.word	0x080030d5
 80030d0:	080030ed 	.word	0x080030ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	73fb      	strb	r3, [r7, #15]
      break;
 80030d8:	e030      	b.n	800313c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d025      	beq.n	8003132 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ea:	e022      	b.n	8003132 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030f4:	d11f      	bne.n	8003136 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030fa:	e01c      	b.n	8003136 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d903      	bls.n	800310a <DMA_CheckFifoParam+0xb6>
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	2b03      	cmp	r3, #3
 8003106:	d003      	beq.n	8003110 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003108:	e018      	b.n	800313c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	73fb      	strb	r3, [r7, #15]
      break;
 800310e:	e015      	b.n	800313c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003114:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00e      	beq.n	800313a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	73fb      	strb	r3, [r7, #15]
      break;
 8003120:	e00b      	b.n	800313a <DMA_CheckFifoParam+0xe6>
      break;
 8003122:	bf00      	nop
 8003124:	e00a      	b.n	800313c <DMA_CheckFifoParam+0xe8>
      break;
 8003126:	bf00      	nop
 8003128:	e008      	b.n	800313c <DMA_CheckFifoParam+0xe8>
      break;
 800312a:	bf00      	nop
 800312c:	e006      	b.n	800313c <DMA_CheckFifoParam+0xe8>
      break;
 800312e:	bf00      	nop
 8003130:	e004      	b.n	800313c <DMA_CheckFifoParam+0xe8>
      break;
 8003132:	bf00      	nop
 8003134:	e002      	b.n	800313c <DMA_CheckFifoParam+0xe8>
      break;   
 8003136:	bf00      	nop
 8003138:	e000      	b.n	800313c <DMA_CheckFifoParam+0xe8>
      break;
 800313a:	bf00      	nop
    }
  } 
  
  return status; 
 800313c:	7bfb      	ldrb	r3, [r7, #15]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop

0800314c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800314c:	b480      	push	{r7}
 800314e:	b089      	sub	sp, #36	; 0x24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003156:	2300      	movs	r3, #0
 8003158:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800315a:	2300      	movs	r3, #0
 800315c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800315e:	2300      	movs	r3, #0
 8003160:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003162:	2300      	movs	r3, #0
 8003164:	61fb      	str	r3, [r7, #28]
 8003166:	e16b      	b.n	8003440 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003168:	2201      	movs	r2, #1
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	4013      	ands	r3, r2
 800317a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	429a      	cmp	r2, r3
 8003182:	f040 815a 	bne.w	800343a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	2b01      	cmp	r3, #1
 8003190:	d005      	beq.n	800319e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800319a:	2b02      	cmp	r3, #2
 800319c:	d130      	bne.n	8003200 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	2203      	movs	r2, #3
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	43db      	mvns	r3, r3
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	4013      	ands	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	68da      	ldr	r2, [r3, #12]
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031d4:	2201      	movs	r2, #1
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	43db      	mvns	r3, r3
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	4013      	ands	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	091b      	lsrs	r3, r3, #4
 80031ea:	f003 0201 	and.w	r2, r3, #1
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f003 0303 	and.w	r3, r3, #3
 8003208:	2b03      	cmp	r3, #3
 800320a:	d017      	beq.n	800323c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	2203      	movs	r2, #3
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	43db      	mvns	r3, r3
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	4013      	ands	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	4313      	orrs	r3, r2
 8003234:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f003 0303 	and.w	r3, r3, #3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d123      	bne.n	8003290 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	08da      	lsrs	r2, r3, #3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	3208      	adds	r2, #8
 8003250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003254:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	220f      	movs	r2, #15
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	43db      	mvns	r3, r3
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	4013      	ands	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	691a      	ldr	r2, [r3, #16]
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	4313      	orrs	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	08da      	lsrs	r2, r3, #3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	3208      	adds	r2, #8
 800328a:	69b9      	ldr	r1, [r7, #24]
 800328c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	2203      	movs	r2, #3
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	43db      	mvns	r3, r3
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	4013      	ands	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f003 0203 	and.w	r2, r3, #3
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 80b4 	beq.w	800343a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032d2:	2300      	movs	r3, #0
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	4b60      	ldr	r3, [pc, #384]	; (8003458 <HAL_GPIO_Init+0x30c>)
 80032d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032da:	4a5f      	ldr	r2, [pc, #380]	; (8003458 <HAL_GPIO_Init+0x30c>)
 80032dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032e0:	6453      	str	r3, [r2, #68]	; 0x44
 80032e2:	4b5d      	ldr	r3, [pc, #372]	; (8003458 <HAL_GPIO_Init+0x30c>)
 80032e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032ee:	4a5b      	ldr	r2, [pc, #364]	; (800345c <HAL_GPIO_Init+0x310>)
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	089b      	lsrs	r3, r3, #2
 80032f4:	3302      	adds	r3, #2
 80032f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f003 0303 	and.w	r3, r3, #3
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	220f      	movs	r2, #15
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	43db      	mvns	r3, r3
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	4013      	ands	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a52      	ldr	r2, [pc, #328]	; (8003460 <HAL_GPIO_Init+0x314>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d02b      	beq.n	8003372 <HAL_GPIO_Init+0x226>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a51      	ldr	r2, [pc, #324]	; (8003464 <HAL_GPIO_Init+0x318>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d025      	beq.n	800336e <HAL_GPIO_Init+0x222>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a50      	ldr	r2, [pc, #320]	; (8003468 <HAL_GPIO_Init+0x31c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d01f      	beq.n	800336a <HAL_GPIO_Init+0x21e>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a4f      	ldr	r2, [pc, #316]	; (800346c <HAL_GPIO_Init+0x320>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d019      	beq.n	8003366 <HAL_GPIO_Init+0x21a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a4e      	ldr	r2, [pc, #312]	; (8003470 <HAL_GPIO_Init+0x324>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d013      	beq.n	8003362 <HAL_GPIO_Init+0x216>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a4d      	ldr	r2, [pc, #308]	; (8003474 <HAL_GPIO_Init+0x328>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d00d      	beq.n	800335e <HAL_GPIO_Init+0x212>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a4c      	ldr	r2, [pc, #304]	; (8003478 <HAL_GPIO_Init+0x32c>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d007      	beq.n	800335a <HAL_GPIO_Init+0x20e>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a4b      	ldr	r2, [pc, #300]	; (800347c <HAL_GPIO_Init+0x330>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d101      	bne.n	8003356 <HAL_GPIO_Init+0x20a>
 8003352:	2307      	movs	r3, #7
 8003354:	e00e      	b.n	8003374 <HAL_GPIO_Init+0x228>
 8003356:	2308      	movs	r3, #8
 8003358:	e00c      	b.n	8003374 <HAL_GPIO_Init+0x228>
 800335a:	2306      	movs	r3, #6
 800335c:	e00a      	b.n	8003374 <HAL_GPIO_Init+0x228>
 800335e:	2305      	movs	r3, #5
 8003360:	e008      	b.n	8003374 <HAL_GPIO_Init+0x228>
 8003362:	2304      	movs	r3, #4
 8003364:	e006      	b.n	8003374 <HAL_GPIO_Init+0x228>
 8003366:	2303      	movs	r3, #3
 8003368:	e004      	b.n	8003374 <HAL_GPIO_Init+0x228>
 800336a:	2302      	movs	r3, #2
 800336c:	e002      	b.n	8003374 <HAL_GPIO_Init+0x228>
 800336e:	2301      	movs	r3, #1
 8003370:	e000      	b.n	8003374 <HAL_GPIO_Init+0x228>
 8003372:	2300      	movs	r3, #0
 8003374:	69fa      	ldr	r2, [r7, #28]
 8003376:	f002 0203 	and.w	r2, r2, #3
 800337a:	0092      	lsls	r2, r2, #2
 800337c:	4093      	lsls	r3, r2
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4313      	orrs	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003384:	4935      	ldr	r1, [pc, #212]	; (800345c <HAL_GPIO_Init+0x310>)
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	089b      	lsrs	r3, r3, #2
 800338a:	3302      	adds	r3, #2
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003392:	4b3b      	ldr	r3, [pc, #236]	; (8003480 <HAL_GPIO_Init+0x334>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	43db      	mvns	r3, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4013      	ands	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033b6:	4a32      	ldr	r2, [pc, #200]	; (8003480 <HAL_GPIO_Init+0x334>)
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033bc:	4b30      	ldr	r3, [pc, #192]	; (8003480 <HAL_GPIO_Init+0x334>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	43db      	mvns	r3, r3
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4013      	ands	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033e0:	4a27      	ldr	r2, [pc, #156]	; (8003480 <HAL_GPIO_Init+0x334>)
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033e6:	4b26      	ldr	r3, [pc, #152]	; (8003480 <HAL_GPIO_Init+0x334>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	43db      	mvns	r3, r3
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4013      	ands	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	4313      	orrs	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800340a:	4a1d      	ldr	r2, [pc, #116]	; (8003480 <HAL_GPIO_Init+0x334>)
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003410:	4b1b      	ldr	r3, [pc, #108]	; (8003480 <HAL_GPIO_Init+0x334>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	43db      	mvns	r3, r3
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4013      	ands	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003434:	4a12      	ldr	r2, [pc, #72]	; (8003480 <HAL_GPIO_Init+0x334>)
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	3301      	adds	r3, #1
 800343e:	61fb      	str	r3, [r7, #28]
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	2b0f      	cmp	r3, #15
 8003444:	f67f ae90 	bls.w	8003168 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003448:	bf00      	nop
 800344a:	bf00      	nop
 800344c:	3724      	adds	r7, #36	; 0x24
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	40023800 	.word	0x40023800
 800345c:	40013800 	.word	0x40013800
 8003460:	40020000 	.word	0x40020000
 8003464:	40020400 	.word	0x40020400
 8003468:	40020800 	.word	0x40020800
 800346c:	40020c00 	.word	0x40020c00
 8003470:	40021000 	.word	0x40021000
 8003474:	40021400 	.word	0x40021400
 8003478:	40021800 	.word	0x40021800
 800347c:	40021c00 	.word	0x40021c00
 8003480:	40013c00 	.word	0x40013c00

08003484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	460b      	mov	r3, r1
 800348e:	807b      	strh	r3, [r7, #2]
 8003490:	4613      	mov	r3, r2
 8003492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003494:	787b      	ldrb	r3, [r7, #1]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800349a:	887a      	ldrh	r2, [r7, #2]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034a0:	e003      	b.n	80034aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034a2:	887b      	ldrh	r3, [r7, #2]
 80034a4:	041a      	lsls	r2, r3, #16
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	619a      	str	r2, [r3, #24]
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
	...

080034b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	4603      	mov	r3, r0
 80034c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80034c2:	4b08      	ldr	r3, [pc, #32]	; (80034e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034c4:	695a      	ldr	r2, [r3, #20]
 80034c6:	88fb      	ldrh	r3, [r7, #6]
 80034c8:	4013      	ands	r3, r2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d006      	beq.n	80034dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034ce:	4a05      	ldr	r2, [pc, #20]	; (80034e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034d0:	88fb      	ldrh	r3, [r7, #6]
 80034d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034d4:	88fb      	ldrh	r3, [r7, #6]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 f806 	bl	80034e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80034dc:	bf00      	nop
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40013c00 	.word	0x40013c00

080034e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	4603      	mov	r3, r0
 80034f0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80034f2:	bf00      	nop
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
	...

08003500 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e12b      	b.n	800376a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d106      	bne.n	800352c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7fe fec6 	bl	80022b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2224      	movs	r2, #36	; 0x24
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 0201 	bic.w	r2, r2, #1
 8003542:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003552:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003562:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003564:	f001 fe80 	bl	8005268 <HAL_RCC_GetPCLK1Freq>
 8003568:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	4a81      	ldr	r2, [pc, #516]	; (8003774 <HAL_I2C_Init+0x274>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d807      	bhi.n	8003584 <HAL_I2C_Init+0x84>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4a80      	ldr	r2, [pc, #512]	; (8003778 <HAL_I2C_Init+0x278>)
 8003578:	4293      	cmp	r3, r2
 800357a:	bf94      	ite	ls
 800357c:	2301      	movls	r3, #1
 800357e:	2300      	movhi	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	e006      	b.n	8003592 <HAL_I2C_Init+0x92>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4a7d      	ldr	r2, [pc, #500]	; (800377c <HAL_I2C_Init+0x27c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	bf94      	ite	ls
 800358c:	2301      	movls	r3, #1
 800358e:	2300      	movhi	r3, #0
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e0e7      	b.n	800376a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	4a78      	ldr	r2, [pc, #480]	; (8003780 <HAL_I2C_Init+0x280>)
 800359e:	fba2 2303 	umull	r2, r3, r2, r3
 80035a2:	0c9b      	lsrs	r3, r3, #18
 80035a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	4a6a      	ldr	r2, [pc, #424]	; (8003774 <HAL_I2C_Init+0x274>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d802      	bhi.n	80035d4 <HAL_I2C_Init+0xd4>
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	3301      	adds	r3, #1
 80035d2:	e009      	b.n	80035e8 <HAL_I2C_Init+0xe8>
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80035da:	fb02 f303 	mul.w	r3, r2, r3
 80035de:	4a69      	ldr	r2, [pc, #420]	; (8003784 <HAL_I2C_Init+0x284>)
 80035e0:	fba2 2303 	umull	r2, r3, r2, r3
 80035e4:	099b      	lsrs	r3, r3, #6
 80035e6:	3301      	adds	r3, #1
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6812      	ldr	r2, [r2, #0]
 80035ec:	430b      	orrs	r3, r1
 80035ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80035fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	495c      	ldr	r1, [pc, #368]	; (8003774 <HAL_I2C_Init+0x274>)
 8003604:	428b      	cmp	r3, r1
 8003606:	d819      	bhi.n	800363c <HAL_I2C_Init+0x13c>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	1e59      	subs	r1, r3, #1
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	fbb1 f3f3 	udiv	r3, r1, r3
 8003616:	1c59      	adds	r1, r3, #1
 8003618:	f640 73fc 	movw	r3, #4092	; 0xffc
 800361c:	400b      	ands	r3, r1
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00a      	beq.n	8003638 <HAL_I2C_Init+0x138>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	1e59      	subs	r1, r3, #1
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003630:	3301      	adds	r3, #1
 8003632:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003636:	e051      	b.n	80036dc <HAL_I2C_Init+0x1dc>
 8003638:	2304      	movs	r3, #4
 800363a:	e04f      	b.n	80036dc <HAL_I2C_Init+0x1dc>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d111      	bne.n	8003668 <HAL_I2C_Init+0x168>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	1e58      	subs	r0, r3, #1
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6859      	ldr	r1, [r3, #4]
 800364c:	460b      	mov	r3, r1
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	440b      	add	r3, r1
 8003652:	fbb0 f3f3 	udiv	r3, r0, r3
 8003656:	3301      	adds	r3, #1
 8003658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800365c:	2b00      	cmp	r3, #0
 800365e:	bf0c      	ite	eq
 8003660:	2301      	moveq	r3, #1
 8003662:	2300      	movne	r3, #0
 8003664:	b2db      	uxtb	r3, r3
 8003666:	e012      	b.n	800368e <HAL_I2C_Init+0x18e>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	1e58      	subs	r0, r3, #1
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6859      	ldr	r1, [r3, #4]
 8003670:	460b      	mov	r3, r1
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	0099      	lsls	r1, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	fbb0 f3f3 	udiv	r3, r0, r3
 800367e:	3301      	adds	r3, #1
 8003680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003684:	2b00      	cmp	r3, #0
 8003686:	bf0c      	ite	eq
 8003688:	2301      	moveq	r3, #1
 800368a:	2300      	movne	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <HAL_I2C_Init+0x196>
 8003692:	2301      	movs	r3, #1
 8003694:	e022      	b.n	80036dc <HAL_I2C_Init+0x1dc>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10e      	bne.n	80036bc <HAL_I2C_Init+0x1bc>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	1e58      	subs	r0, r3, #1
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6859      	ldr	r1, [r3, #4]
 80036a6:	460b      	mov	r3, r1
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	440b      	add	r3, r1
 80036ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80036b0:	3301      	adds	r3, #1
 80036b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036ba:	e00f      	b.n	80036dc <HAL_I2C_Init+0x1dc>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	1e58      	subs	r0, r3, #1
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6859      	ldr	r1, [r3, #4]
 80036c4:	460b      	mov	r3, r1
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	440b      	add	r3, r1
 80036ca:	0099      	lsls	r1, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80036d2:	3301      	adds	r3, #1
 80036d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	6809      	ldr	r1, [r1, #0]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69da      	ldr	r2, [r3, #28]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800370a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6911      	ldr	r1, [r2, #16]
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	68d2      	ldr	r2, [r2, #12]
 8003716:	4311      	orrs	r1, r2
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6812      	ldr	r2, [r2, #0]
 800371c:	430b      	orrs	r3, r1
 800371e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	695a      	ldr	r2, [r3, #20]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	430a      	orrs	r2, r1
 800373a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f042 0201 	orr.w	r2, r2, #1
 800374a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2220      	movs	r2, #32
 8003756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	000186a0 	.word	0x000186a0
 8003778:	001e847f 	.word	0x001e847f
 800377c:	003d08ff 	.word	0x003d08ff
 8003780:	431bde83 	.word	0x431bde83
 8003784:	10624dd3 	.word	0x10624dd3

08003788 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b088      	sub	sp, #32
 800378c:	af02      	add	r7, sp, #8
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	607a      	str	r2, [r7, #4]
 8003792:	461a      	mov	r2, r3
 8003794:	460b      	mov	r3, r1
 8003796:	817b      	strh	r3, [r7, #10]
 8003798:	4613      	mov	r3, r2
 800379a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800379c:	f7ff f824 	bl	80027e8 <HAL_GetTick>
 80037a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b20      	cmp	r3, #32
 80037ac:	f040 80e0 	bne.w	8003970 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	2319      	movs	r3, #25
 80037b6:	2201      	movs	r2, #1
 80037b8:	4970      	ldr	r1, [pc, #448]	; (800397c <HAL_I2C_Master_Transmit+0x1f4>)
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 f964 	bl	8003a88 <I2C_WaitOnFlagUntilTimeout>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80037c6:	2302      	movs	r3, #2
 80037c8:	e0d3      	b.n	8003972 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d101      	bne.n	80037d8 <HAL_I2C_Master_Transmit+0x50>
 80037d4:	2302      	movs	r3, #2
 80037d6:	e0cc      	b.n	8003972 <HAL_I2C_Master_Transmit+0x1ea>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d007      	beq.n	80037fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f042 0201 	orr.w	r2, r2, #1
 80037fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800380c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2221      	movs	r2, #33	; 0x21
 8003812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2210      	movs	r2, #16
 800381a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	893a      	ldrh	r2, [r7, #8]
 800382e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003834:	b29a      	uxth	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	4a50      	ldr	r2, [pc, #320]	; (8003980 <HAL_I2C_Master_Transmit+0x1f8>)
 800383e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003840:	8979      	ldrh	r1, [r7, #10]
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	6a3a      	ldr	r2, [r7, #32]
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f000 f89c 	bl	8003984 <I2C_MasterRequestWrite>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e08d      	b.n	8003972 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003856:	2300      	movs	r3, #0
 8003858:	613b      	str	r3, [r7, #16]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	613b      	str	r3, [r7, #16]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	613b      	str	r3, [r7, #16]
 800386a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800386c:	e066      	b.n	800393c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	6a39      	ldr	r1, [r7, #32]
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f000 fa22 	bl	8003cbc <I2C_WaitOnTXEFlagUntilTimeout>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00d      	beq.n	800389a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	2b04      	cmp	r3, #4
 8003884:	d107      	bne.n	8003896 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003894:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e06b      	b.n	8003972 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389e:	781a      	ldrb	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	1c5a      	adds	r2, r3, #1
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c2:	3b01      	subs	r3, #1
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b04      	cmp	r3, #4
 80038d6:	d11b      	bne.n	8003910 <HAL_I2C_Master_Transmit+0x188>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d017      	beq.n	8003910 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	781a      	ldrb	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	1c5a      	adds	r2, r3, #1
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	3b01      	subs	r3, #1
 80038fe:	b29a      	uxth	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003908:	3b01      	subs	r3, #1
 800390a:	b29a      	uxth	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	6a39      	ldr	r1, [r7, #32]
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 fa19 	bl	8003d4c <I2C_WaitOnBTFFlagUntilTimeout>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00d      	beq.n	800393c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	2b04      	cmp	r3, #4
 8003926:	d107      	bne.n	8003938 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003936:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e01a      	b.n	8003972 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003940:	2b00      	cmp	r3, #0
 8003942:	d194      	bne.n	800386e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003952:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2220      	movs	r2, #32
 8003958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800396c:	2300      	movs	r3, #0
 800396e:	e000      	b.n	8003972 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003970:	2302      	movs	r3, #2
  }
}
 8003972:	4618      	mov	r0, r3
 8003974:	3718      	adds	r7, #24
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	00100002 	.word	0x00100002
 8003980:	ffff0000 	.word	0xffff0000

08003984 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b088      	sub	sp, #32
 8003988:	af02      	add	r7, sp, #8
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	607a      	str	r2, [r7, #4]
 800398e:	603b      	str	r3, [r7, #0]
 8003990:	460b      	mov	r3, r1
 8003992:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	2b08      	cmp	r3, #8
 800399e:	d006      	beq.n	80039ae <I2C_MasterRequestWrite+0x2a>
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d003      	beq.n	80039ae <I2C_MasterRequestWrite+0x2a>
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039ac:	d108      	bne.n	80039c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	e00b      	b.n	80039d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c4:	2b12      	cmp	r3, #18
 80039c6:	d107      	bne.n	80039d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 f84f 	bl	8003a88 <I2C_WaitOnFlagUntilTimeout>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00d      	beq.n	8003a0c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039fe:	d103      	bne.n	8003a08 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e035      	b.n	8003a78 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a14:	d108      	bne.n	8003a28 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a16:	897b      	ldrh	r3, [r7, #10]
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a24:	611a      	str	r2, [r3, #16]
 8003a26:	e01b      	b.n	8003a60 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a28:	897b      	ldrh	r3, [r7, #10]
 8003a2a:	11db      	asrs	r3, r3, #7
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	f003 0306 	and.w	r3, r3, #6
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	f063 030f 	orn	r3, r3, #15
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	490e      	ldr	r1, [pc, #56]	; (8003a80 <I2C_MasterRequestWrite+0xfc>)
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 f898 	bl	8003b7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e010      	b.n	8003a78 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a56:	897b      	ldrh	r3, [r7, #10]
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	4907      	ldr	r1, [pc, #28]	; (8003a84 <I2C_MasterRequestWrite+0x100>)
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 f888 	bl	8003b7c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3718      	adds	r7, #24
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	00010008 	.word	0x00010008
 8003a84:	00010002 	.word	0x00010002

08003a88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	4613      	mov	r3, r2
 8003a96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a98:	e048      	b.n	8003b2c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003aa0:	d044      	beq.n	8003b2c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa2:	f7fe fea1 	bl	80027e8 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d302      	bcc.n	8003ab8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d139      	bne.n	8003b2c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	0c1b      	lsrs	r3, r3, #16
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d10d      	bne.n	8003ade <I2C_WaitOnFlagUntilTimeout+0x56>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	43da      	mvns	r2, r3
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	4013      	ands	r3, r2
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	bf0c      	ite	eq
 8003ad4:	2301      	moveq	r3, #1
 8003ad6:	2300      	movne	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	461a      	mov	r2, r3
 8003adc:	e00c      	b.n	8003af8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	43da      	mvns	r2, r3
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	bf0c      	ite	eq
 8003af0:	2301      	moveq	r3, #1
 8003af2:	2300      	movne	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	461a      	mov	r2, r3
 8003af8:	79fb      	ldrb	r3, [r7, #7]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d116      	bne.n	8003b2c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2220      	movs	r2, #32
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	f043 0220 	orr.w	r2, r3, #32
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e023      	b.n	8003b74 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	0c1b      	lsrs	r3, r3, #16
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d10d      	bne.n	8003b52 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	43da      	mvns	r2, r3
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	4013      	ands	r3, r2
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	bf0c      	ite	eq
 8003b48:	2301      	moveq	r3, #1
 8003b4a:	2300      	movne	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	461a      	mov	r2, r3
 8003b50:	e00c      	b.n	8003b6c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	43da      	mvns	r2, r3
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	bf0c      	ite	eq
 8003b64:	2301      	moveq	r3, #1
 8003b66:	2300      	movne	r3, #0
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	79fb      	ldrb	r3, [r7, #7]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d093      	beq.n	8003a9a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
 8003b88:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b8a:	e071      	b.n	8003c70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b9a:	d123      	bne.n	8003be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003baa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bb4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	f043 0204 	orr.w	r2, r3, #4
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e067      	b.n	8003cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bea:	d041      	beq.n	8003c70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bec:	f7fe fdfc 	bl	80027e8 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d302      	bcc.n	8003c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d136      	bne.n	8003c70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	0c1b      	lsrs	r3, r3, #16
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d10c      	bne.n	8003c26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	43da      	mvns	r2, r3
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	4013      	ands	r3, r2
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	bf14      	ite	ne
 8003c1e:	2301      	movne	r3, #1
 8003c20:	2300      	moveq	r3, #0
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	e00b      	b.n	8003c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	43da      	mvns	r2, r3
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	4013      	ands	r3, r2
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	bf14      	ite	ne
 8003c38:	2301      	movne	r3, #1
 8003c3a:	2300      	moveq	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d016      	beq.n	8003c70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5c:	f043 0220 	orr.w	r2, r3, #32
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e021      	b.n	8003cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	0c1b      	lsrs	r3, r3, #16
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d10c      	bne.n	8003c94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	43da      	mvns	r2, r3
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	4013      	ands	r3, r2
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	bf14      	ite	ne
 8003c8c:	2301      	movne	r3, #1
 8003c8e:	2300      	moveq	r3, #0
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	e00b      	b.n	8003cac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	43da      	mvns	r2, r3
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	bf14      	ite	ne
 8003ca6:	2301      	movne	r3, #1
 8003ca8:	2300      	moveq	r3, #0
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f47f af6d 	bne.w	8003b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cc8:	e034      	b.n	8003d34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 f886 	bl	8003ddc <I2C_IsAcknowledgeFailed>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e034      	b.n	8003d44 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ce0:	d028      	beq.n	8003d34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce2:	f7fe fd81 	bl	80027e8 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d302      	bcc.n	8003cf8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d11d      	bne.n	8003d34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d02:	2b80      	cmp	r3, #128	; 0x80
 8003d04:	d016      	beq.n	8003d34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d20:	f043 0220 	orr.w	r2, r3, #32
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e007      	b.n	8003d44 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3e:	2b80      	cmp	r3, #128	; 0x80
 8003d40:	d1c3      	bne.n	8003cca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d58:	e034      	b.n	8003dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f000 f83e 	bl	8003ddc <I2C_IsAcknowledgeFailed>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e034      	b.n	8003dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d70:	d028      	beq.n	8003dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d72:	f7fe fd39 	bl	80027e8 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d302      	bcc.n	8003d88 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d11d      	bne.n	8003dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	f003 0304 	and.w	r3, r3, #4
 8003d92:	2b04      	cmp	r3, #4
 8003d94:	d016      	beq.n	8003dc4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db0:	f043 0220 	orr.w	r2, r3, #32
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e007      	b.n	8003dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	f003 0304 	and.w	r3, r3, #4
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d1c3      	bne.n	8003d5a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df2:	d11b      	bne.n	8003e2c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003dfc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e18:	f043 0204 	orr.w	r2, r3, #4
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e000      	b.n	8003e2e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
	...

08003e3c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b088      	sub	sp, #32
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e128      	b.n	80040a0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d109      	bne.n	8003e6e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a90      	ldr	r2, [pc, #576]	; (80040a8 <HAL_I2S_Init+0x26c>)
 8003e66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f7fe fa6d 	bl	8002348 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2202      	movs	r2, #2
 8003e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6812      	ldr	r2, [r2, #0]
 8003e80:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003e84:	f023 030f 	bic.w	r3, r3, #15
 8003e88:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2202      	movs	r2, #2
 8003e90:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d060      	beq.n	8003f5c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d102      	bne.n	8003ea8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003ea2:	2310      	movs	r3, #16
 8003ea4:	617b      	str	r3, [r7, #20]
 8003ea6:	e001      	b.n	8003eac <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003ea8:	2320      	movs	r3, #32
 8003eaa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	2b20      	cmp	r3, #32
 8003eb2:	d802      	bhi.n	8003eba <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003eba:	2001      	movs	r0, #1
 8003ebc:	f001 faca 	bl	8005454 <HAL_RCCEx_GetPeriphCLKFreq>
 8003ec0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eca:	d125      	bne.n	8003f18 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d010      	beq.n	8003ef6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ede:	4613      	mov	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	4413      	add	r3, r2
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef0:	3305      	adds	r3, #5
 8003ef2:	613b      	str	r3, [r7, #16]
 8003ef4:	e01f      	b.n	8003f36 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f00:	4613      	mov	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4413      	add	r3, r2
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	461a      	mov	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f12:	3305      	adds	r3, #5
 8003f14:	613b      	str	r3, [r7, #16]
 8003f16:	e00e      	b.n	8003f36 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f20:	4613      	mov	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	461a      	mov	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f32:	3305      	adds	r3, #5
 8003f34:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	4a5c      	ldr	r2, [pc, #368]	; (80040ac <HAL_I2S_Init+0x270>)
 8003f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3e:	08db      	lsrs	r3, r3, #3
 8003f40:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	085b      	lsrs	r3, r3, #1
 8003f52:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	021b      	lsls	r3, r3, #8
 8003f58:	61bb      	str	r3, [r7, #24]
 8003f5a:	e003      	b.n	8003f64 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003f60:	2300      	movs	r3, #0
 8003f62:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d902      	bls.n	8003f70 <HAL_I2S_Init+0x134>
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	2bff      	cmp	r3, #255	; 0xff
 8003f6e:	d907      	bls.n	8003f80 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f74:	f043 0210 	orr.w	r2, r3, #16
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e08f      	b.n	80040a0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	ea42 0103 	orr.w	r1, r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	69fa      	ldr	r2, [r7, #28]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003f9e:	f023 030f 	bic.w	r3, r3, #15
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	6851      	ldr	r1, [r2, #4]
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	6892      	ldr	r2, [r2, #8]
 8003faa:	4311      	orrs	r1, r2
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	68d2      	ldr	r2, [r2, #12]
 8003fb0:	4311      	orrs	r1, r2
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	6992      	ldr	r2, [r2, #24]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fc2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d161      	bne.n	8004090 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a38      	ldr	r2, [pc, #224]	; (80040b0 <HAL_I2S_Init+0x274>)
 8003fd0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a37      	ldr	r2, [pc, #220]	; (80040b4 <HAL_I2S_Init+0x278>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d101      	bne.n	8003fe0 <HAL_I2S_Init+0x1a4>
 8003fdc:	4b36      	ldr	r3, [pc, #216]	; (80040b8 <HAL_I2S_Init+0x27c>)
 8003fde:	e001      	b.n	8003fe4 <HAL_I2S_Init+0x1a8>
 8003fe0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	6812      	ldr	r2, [r2, #0]
 8003fea:	4932      	ldr	r1, [pc, #200]	; (80040b4 <HAL_I2S_Init+0x278>)
 8003fec:	428a      	cmp	r2, r1
 8003fee:	d101      	bne.n	8003ff4 <HAL_I2S_Init+0x1b8>
 8003ff0:	4a31      	ldr	r2, [pc, #196]	; (80040b8 <HAL_I2S_Init+0x27c>)
 8003ff2:	e001      	b.n	8003ff8 <HAL_I2S_Init+0x1bc>
 8003ff4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003ff8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003ffc:	f023 030f 	bic.w	r3, r3, #15
 8004000:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a2b      	ldr	r2, [pc, #172]	; (80040b4 <HAL_I2S_Init+0x278>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d101      	bne.n	8004010 <HAL_I2S_Init+0x1d4>
 800400c:	4b2a      	ldr	r3, [pc, #168]	; (80040b8 <HAL_I2S_Init+0x27c>)
 800400e:	e001      	b.n	8004014 <HAL_I2S_Init+0x1d8>
 8004010:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004014:	2202      	movs	r2, #2
 8004016:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a25      	ldr	r2, [pc, #148]	; (80040b4 <HAL_I2S_Init+0x278>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d101      	bne.n	8004026 <HAL_I2S_Init+0x1ea>
 8004022:	4b25      	ldr	r3, [pc, #148]	; (80040b8 <HAL_I2S_Init+0x27c>)
 8004024:	e001      	b.n	800402a <HAL_I2S_Init+0x1ee>
 8004026:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800402a:	69db      	ldr	r3, [r3, #28]
 800402c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004036:	d003      	beq.n	8004040 <HAL_I2S_Init+0x204>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d103      	bne.n	8004048 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004040:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004044:	613b      	str	r3, [r7, #16]
 8004046:	e001      	b.n	800404c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004048:	2300      	movs	r3, #0
 800404a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004056:	4313      	orrs	r3, r2
 8004058:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004060:	4313      	orrs	r3, r2
 8004062:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800406a:	4313      	orrs	r3, r2
 800406c:	b29a      	uxth	r2, r3
 800406e:	897b      	ldrh	r3, [r7, #10]
 8004070:	4313      	orrs	r3, r2
 8004072:	b29b      	uxth	r3, r3
 8004074:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004078:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a0d      	ldr	r2, [pc, #52]	; (80040b4 <HAL_I2S_Init+0x278>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d101      	bne.n	8004088 <HAL_I2S_Init+0x24c>
 8004084:	4b0c      	ldr	r3, [pc, #48]	; (80040b8 <HAL_I2S_Init+0x27c>)
 8004086:	e001      	b.n	800408c <HAL_I2S_Init+0x250>
 8004088:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800408c:	897a      	ldrh	r2, [r7, #10]
 800408e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3720      	adds	r7, #32
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	080043c1 	.word	0x080043c1
 80040ac:	cccccccd 	.word	0xcccccccd
 80040b0:	080044d5 	.word	0x080044d5
 80040b4:	40003800 	.word	0x40003800
 80040b8:	40003400 	.word	0x40003400

080040bc <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	4613      	mov	r3, r2
 80040c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d002      	beq.n	80040d6 <HAL_I2S_Transmit_DMA+0x1a>
 80040d0:	88fb      	ldrh	r3, [r7, #6]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e08e      	b.n	80041f8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d101      	bne.n	80040ea <HAL_I2S_Transmit_DMA+0x2e>
 80040e6:	2302      	movs	r3, #2
 80040e8:	e086      	b.n	80041f8 <HAL_I2S_Transmit_DMA+0x13c>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d005      	beq.n	800410a <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8004106:	2302      	movs	r3, #2
 8004108:	e076      	b.n	80041f8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2203      	movs	r2, #3
 800410e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	f003 0307 	and.w	r3, r3, #7
 8004128:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	2b03      	cmp	r3, #3
 800412e:	d002      	beq.n	8004136 <HAL_I2S_Transmit_DMA+0x7a>
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	2b05      	cmp	r3, #5
 8004134:	d10a      	bne.n	800414c <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8004136:	88fb      	ldrh	r3, [r7, #6]
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	b29a      	uxth	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8004140:	88fb      	ldrh	r3, [r7, #6]
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	b29a      	uxth	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	855a      	strh	r2, [r3, #42]	; 0x2a
 800414a:	e005      	b.n	8004158 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	88fa      	ldrh	r2, [r7, #6]
 8004150:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	88fa      	ldrh	r2, [r7, #6]
 8004156:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415c:	4a28      	ldr	r2, [pc, #160]	; (8004200 <HAL_I2S_Transmit_DMA+0x144>)
 800415e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004164:	4a27      	ldr	r2, [pc, #156]	; (8004204 <HAL_I2S_Transmit_DMA+0x148>)
 8004166:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416c:	4a26      	ldr	r2, [pc, #152]	; (8004208 <HAL_I2S_Transmit_DMA+0x14c>)
 800416e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004178:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004180:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004186:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004188:	f7fe fd1e 	bl	8002bc8 <HAL_DMA_Start_IT>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00f      	beq.n	80041b2 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004196:	f043 0208 	orr.w	r2, r3, #8
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e022      	b.n	80041f8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d107      	bne.n	80041d0 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	69da      	ldr	r2, [r3, #28]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041ce:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d107      	bne.n	80041ee <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f042 0202 	orr.w	r2, r2, #2
 80041ec:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3718      	adds	r7, #24
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	0800429f 	.word	0x0800429f
 8004204:	0800425d 	.word	0x0800425d
 8004208:	080042bb 	.word	0x080042bb

0800420c <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004268:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10e      	bne.n	8004290 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0202 	bic.w	r2, r2, #2
 8004280:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f7ff ffc5 	bl	8004220 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004296:	bf00      	nop
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b084      	sub	sp, #16
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f7ff ffad 	bl	800420c <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80042b2:	bf00      	nop
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b084      	sub	sp, #16
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 0203 	bic.w	r2, r2, #3
 80042d6:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f0:	f043 0208 	orr.w	r2, r3, #8
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f7ff ffa5 	bl	8004248 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80042fe:	bf00      	nop
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b082      	sub	sp, #8
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004312:	881a      	ldrh	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431e:	1c9a      	adds	r2, r3, #2
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004328:	b29b      	uxth	r3, r3
 800432a:	3b01      	subs	r3, #1
 800432c:	b29a      	uxth	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004336:	b29b      	uxth	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10e      	bne.n	800435a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800434a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f7ff ff63 	bl	8004220 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800435a:	bf00      	nop
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b082      	sub	sp, #8
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68da      	ldr	r2, [r3, #12]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004374:	b292      	uxth	r2, r2
 8004376:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437c:	1c9a      	adds	r2, r3, #2
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004386:	b29b      	uxth	r3, r3
 8004388:	3b01      	subs	r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004394:	b29b      	uxth	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10e      	bne.n	80043b8 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80043a8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7ff ff3e 	bl	8004234 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80043b8:	bf00      	nop
 80043ba:	3708      	adds	r7, #8
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b04      	cmp	r3, #4
 80043da:	d13a      	bne.n	8004452 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d109      	bne.n	80043fa <I2S_IRQHandler+0x3a>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f0:	2b40      	cmp	r3, #64	; 0x40
 80043f2:	d102      	bne.n	80043fa <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f7ff ffb4 	bl	8004362 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004400:	2b40      	cmp	r3, #64	; 0x40
 8004402:	d126      	bne.n	8004452 <I2S_IRQHandler+0x92>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f003 0320 	and.w	r3, r3, #32
 800440e:	2b20      	cmp	r3, #32
 8004410:	d11f      	bne.n	8004452 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004420:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004422:	2300      	movs	r3, #0
 8004424:	613b      	str	r3, [r7, #16]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	613b      	str	r3, [r7, #16]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	613b      	str	r3, [r7, #16]
 8004436:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004444:	f043 0202 	orr.w	r2, r3, #2
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7ff fefb 	bl	8004248 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b03      	cmp	r3, #3
 800445c:	d136      	bne.n	80044cc <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b02      	cmp	r3, #2
 8004466:	d109      	bne.n	800447c <I2S_IRQHandler+0xbc>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004472:	2b80      	cmp	r3, #128	; 0x80
 8004474:	d102      	bne.n	800447c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f7ff ff45 	bl	8004306 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f003 0308 	and.w	r3, r3, #8
 8004482:	2b08      	cmp	r3, #8
 8004484:	d122      	bne.n	80044cc <I2S_IRQHandler+0x10c>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f003 0320 	and.w	r3, r3, #32
 8004490:	2b20      	cmp	r3, #32
 8004492:	d11b      	bne.n	80044cc <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044a2:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80044a4:	2300      	movs	r3, #0
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044be:	f043 0204 	orr.w	r2, r3, #4
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7ff febe 	bl	8004248 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044cc:	bf00      	nop
 80044ce:	3718      	adds	r7, #24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b088      	sub	sp, #32
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a92      	ldr	r2, [pc, #584]	; (8004734 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d101      	bne.n	80044f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80044ee:	4b92      	ldr	r3, [pc, #584]	; (8004738 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044f0:	e001      	b.n	80044f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80044f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a8b      	ldr	r2, [pc, #556]	; (8004734 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d101      	bne.n	8004510 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800450c:	4b8a      	ldr	r3, [pc, #552]	; (8004738 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800450e:	e001      	b.n	8004514 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004510:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004520:	d004      	beq.n	800452c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	f040 8099 	bne.w	800465e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b02      	cmp	r3, #2
 8004534:	d107      	bne.n	8004546 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800453c:	2b00      	cmp	r3, #0
 800453e:	d002      	beq.n	8004546 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f925 	bl	8004790 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b01      	cmp	r3, #1
 800454e:	d107      	bne.n	8004560 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004556:	2b00      	cmp	r3, #0
 8004558:	d002      	beq.n	8004560 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f9c8 	bl	80048f0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004566:	2b40      	cmp	r3, #64	; 0x40
 8004568:	d13a      	bne.n	80045e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	f003 0320 	and.w	r3, r3, #32
 8004570:	2b00      	cmp	r3, #0
 8004572:	d035      	beq.n	80045e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a6e      	ldr	r2, [pc, #440]	; (8004734 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d101      	bne.n	8004582 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800457e:	4b6e      	ldr	r3, [pc, #440]	; (8004738 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004580:	e001      	b.n	8004586 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004582:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4969      	ldr	r1, [pc, #420]	; (8004734 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800458e:	428b      	cmp	r3, r1
 8004590:	d101      	bne.n	8004596 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004592:	4b69      	ldr	r3, [pc, #420]	; (8004738 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004594:	e001      	b.n	800459a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004596:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800459a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800459e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045ae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80045b0:	2300      	movs	r3, #0
 80045b2:	60fb      	str	r3, [r7, #12]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d2:	f043 0202 	orr.w	r2, r3, #2
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7ff fe34 	bl	8004248 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	f003 0308 	and.w	r3, r3, #8
 80045e6:	2b08      	cmp	r3, #8
 80045e8:	f040 80c3 	bne.w	8004772 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	f003 0320 	and.w	r3, r3, #32
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 80bd 	beq.w	8004772 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004606:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a49      	ldr	r2, [pc, #292]	; (8004734 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d101      	bne.n	8004616 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004612:	4b49      	ldr	r3, [pc, #292]	; (8004738 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004614:	e001      	b.n	800461a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004616:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4944      	ldr	r1, [pc, #272]	; (8004734 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004622:	428b      	cmp	r3, r1
 8004624:	d101      	bne.n	800462a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004626:	4b44      	ldr	r3, [pc, #272]	; (8004738 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004628:	e001      	b.n	800462e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800462a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800462e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004632:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004634:	2300      	movs	r3, #0
 8004636:	60bb      	str	r3, [r7, #8]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	60bb      	str	r3, [r7, #8]
 8004640:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464e:	f043 0204 	orr.w	r2, r3, #4
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7ff fdf6 	bl	8004248 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800465c:	e089      	b.n	8004772 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b02      	cmp	r3, #2
 8004666:	d107      	bne.n	8004678 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800466e:	2b00      	cmp	r3, #0
 8004670:	d002      	beq.n	8004678 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f8be 	bl	80047f4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b01      	cmp	r3, #1
 8004680:	d107      	bne.n	8004692 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f8fd 	bl	800488c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004698:	2b40      	cmp	r3, #64	; 0x40
 800469a:	d12f      	bne.n	80046fc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f003 0320 	and.w	r3, r3, #32
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d02a      	beq.n	80046fc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80046b4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a1e      	ldr	r2, [pc, #120]	; (8004734 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d101      	bne.n	80046c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80046c0:	4b1d      	ldr	r3, [pc, #116]	; (8004738 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046c2:	e001      	b.n	80046c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80046c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4919      	ldr	r1, [pc, #100]	; (8004734 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046d0:	428b      	cmp	r3, r1
 80046d2:	d101      	bne.n	80046d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80046d4:	4b18      	ldr	r3, [pc, #96]	; (8004738 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046d6:	e001      	b.n	80046dc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80046d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046e0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ee:	f043 0202 	orr.w	r2, r3, #2
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7ff fda6 	bl	8004248 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	f003 0308 	and.w	r3, r3, #8
 8004702:	2b08      	cmp	r3, #8
 8004704:	d136      	bne.n	8004774 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	f003 0320 	and.w	r3, r3, #32
 800470c:	2b00      	cmp	r3, #0
 800470e:	d031      	beq.n	8004774 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a07      	ldr	r2, [pc, #28]	; (8004734 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d101      	bne.n	800471e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800471a:	4b07      	ldr	r3, [pc, #28]	; (8004738 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800471c:	e001      	b.n	8004722 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800471e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4902      	ldr	r1, [pc, #8]	; (8004734 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800472a:	428b      	cmp	r3, r1
 800472c:	d106      	bne.n	800473c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800472e:	4b02      	ldr	r3, [pc, #8]	; (8004738 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004730:	e006      	b.n	8004740 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004732:	bf00      	nop
 8004734:	40003800 	.word	0x40003800
 8004738:	40003400 	.word	0x40003400
 800473c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004740:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004744:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004754:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004762:	f043 0204 	orr.w	r2, r3, #4
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7ff fd6c 	bl	8004248 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004770:	e000      	b.n	8004774 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004772:	bf00      	nop
}
 8004774:	bf00      	nop
 8004776:	3720      	adds	r7, #32
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479c:	1c99      	adds	r1, r3, #2
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	6251      	str	r1, [r2, #36]	; 0x24
 80047a2:	881a      	ldrh	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	3b01      	subs	r3, #1
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047bc:	b29b      	uxth	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d113      	bne.n	80047ea <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80047d0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d106      	bne.n	80047ea <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7ff ffc9 	bl	800477c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80047ea:	bf00      	nop
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
	...

080047f4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	1c99      	adds	r1, r3, #2
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	6251      	str	r1, [r2, #36]	; 0x24
 8004806:	8819      	ldrh	r1, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a1d      	ldr	r2, [pc, #116]	; (8004884 <I2SEx_TxISR_I2SExt+0x90>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d101      	bne.n	8004816 <I2SEx_TxISR_I2SExt+0x22>
 8004812:	4b1d      	ldr	r3, [pc, #116]	; (8004888 <I2SEx_TxISR_I2SExt+0x94>)
 8004814:	e001      	b.n	800481a <I2SEx_TxISR_I2SExt+0x26>
 8004816:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800481a:	460a      	mov	r2, r1
 800481c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004822:	b29b      	uxth	r3, r3
 8004824:	3b01      	subs	r3, #1
 8004826:	b29a      	uxth	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004830:	b29b      	uxth	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d121      	bne.n	800487a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a12      	ldr	r2, [pc, #72]	; (8004884 <I2SEx_TxISR_I2SExt+0x90>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d101      	bne.n	8004844 <I2SEx_TxISR_I2SExt+0x50>
 8004840:	4b11      	ldr	r3, [pc, #68]	; (8004888 <I2SEx_TxISR_I2SExt+0x94>)
 8004842:	e001      	b.n	8004848 <I2SEx_TxISR_I2SExt+0x54>
 8004844:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	490d      	ldr	r1, [pc, #52]	; (8004884 <I2SEx_TxISR_I2SExt+0x90>)
 8004850:	428b      	cmp	r3, r1
 8004852:	d101      	bne.n	8004858 <I2SEx_TxISR_I2SExt+0x64>
 8004854:	4b0c      	ldr	r3, [pc, #48]	; (8004888 <I2SEx_TxISR_I2SExt+0x94>)
 8004856:	e001      	b.n	800485c <I2SEx_TxISR_I2SExt+0x68>
 8004858:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800485c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004860:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004866:	b29b      	uxth	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	d106      	bne.n	800487a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f7ff ff81 	bl	800477c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800487a:	bf00      	nop
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	40003800 	.word	0x40003800
 8004888:	40003400 	.word	0x40003400

0800488c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68d8      	ldr	r0, [r3, #12]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489e:	1c99      	adds	r1, r3, #2
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80048a4:	b282      	uxth	r2, r0
 80048a6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	3b01      	subs	r3, #1
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d113      	bne.n	80048e8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80048ce:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d106      	bne.n	80048e8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7ff ff4a 	bl	800477c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80048e8:	bf00      	nop
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a20      	ldr	r2, [pc, #128]	; (8004980 <I2SEx_RxISR_I2SExt+0x90>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d101      	bne.n	8004906 <I2SEx_RxISR_I2SExt+0x16>
 8004902:	4b20      	ldr	r3, [pc, #128]	; (8004984 <I2SEx_RxISR_I2SExt+0x94>)
 8004904:	e001      	b.n	800490a <I2SEx_RxISR_I2SExt+0x1a>
 8004906:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800490a:	68d8      	ldr	r0, [r3, #12]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004910:	1c99      	adds	r1, r3, #2
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004916:	b282      	uxth	r2, r0
 8004918:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800491e:	b29b      	uxth	r3, r3
 8004920:	3b01      	subs	r3, #1
 8004922:	b29a      	uxth	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800492c:	b29b      	uxth	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d121      	bne.n	8004976 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a12      	ldr	r2, [pc, #72]	; (8004980 <I2SEx_RxISR_I2SExt+0x90>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d101      	bne.n	8004940 <I2SEx_RxISR_I2SExt+0x50>
 800493c:	4b11      	ldr	r3, [pc, #68]	; (8004984 <I2SEx_RxISR_I2SExt+0x94>)
 800493e:	e001      	b.n	8004944 <I2SEx_RxISR_I2SExt+0x54>
 8004940:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004944:	685a      	ldr	r2, [r3, #4]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	490d      	ldr	r1, [pc, #52]	; (8004980 <I2SEx_RxISR_I2SExt+0x90>)
 800494c:	428b      	cmp	r3, r1
 800494e:	d101      	bne.n	8004954 <I2SEx_RxISR_I2SExt+0x64>
 8004950:	4b0c      	ldr	r3, [pc, #48]	; (8004984 <I2SEx_RxISR_I2SExt+0x94>)
 8004952:	e001      	b.n	8004958 <I2SEx_RxISR_I2SExt+0x68>
 8004954:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004958:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800495c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004962:	b29b      	uxth	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	d106      	bne.n	8004976 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f7ff ff03 	bl	800477c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004976:	bf00      	nop
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	40003800 	.word	0x40003800
 8004984:	40003400 	.word	0x40003400

08004988 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e267      	b.n	8004e6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d075      	beq.n	8004a92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049a6:	4b88      	ldr	r3, [pc, #544]	; (8004bc8 <HAL_RCC_OscConfig+0x240>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f003 030c 	and.w	r3, r3, #12
 80049ae:	2b04      	cmp	r3, #4
 80049b0:	d00c      	beq.n	80049cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049b2:	4b85      	ldr	r3, [pc, #532]	; (8004bc8 <HAL_RCC_OscConfig+0x240>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049ba:	2b08      	cmp	r3, #8
 80049bc:	d112      	bne.n	80049e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049be:	4b82      	ldr	r3, [pc, #520]	; (8004bc8 <HAL_RCC_OscConfig+0x240>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049ca:	d10b      	bne.n	80049e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049cc:	4b7e      	ldr	r3, [pc, #504]	; (8004bc8 <HAL_RCC_OscConfig+0x240>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d05b      	beq.n	8004a90 <HAL_RCC_OscConfig+0x108>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d157      	bne.n	8004a90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e242      	b.n	8004e6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ec:	d106      	bne.n	80049fc <HAL_RCC_OscConfig+0x74>
 80049ee:	4b76      	ldr	r3, [pc, #472]	; (8004bc8 <HAL_RCC_OscConfig+0x240>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a75      	ldr	r2, [pc, #468]	; (8004bc8 <HAL_RCC_OscConfig+0x240>)
 80049f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049f8:	6013      	str	r3, [r2, #0]
 80049fa:	e01d      	b.n	8004a38 <HAL_RCC_OscConfig+0xb0>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a04:	d10c      	bne.n	8004a20 <HAL_RCC_OscConfig+0x98>
 8004a06:	4b70      	ldr	r3, [pc, #448]	; (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a6f      	ldr	r2, [pc, #444]	; (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a10:	6013      	str	r3, [r2, #0]
 8004a12:	4b6d      	ldr	r3, [pc, #436]	; (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a6c      	ldr	r2, [pc, #432]	; (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	e00b      	b.n	8004a38 <HAL_RCC_OscConfig+0xb0>
 8004a20:	4b69      	ldr	r3, [pc, #420]	; (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a68      	ldr	r2, [pc, #416]	; (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a2a:	6013      	str	r3, [r2, #0]
 8004a2c:	4b66      	ldr	r3, [pc, #408]	; (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a65      	ldr	r2, [pc, #404]	; (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d013      	beq.n	8004a68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a40:	f7fd fed2 	bl	80027e8 <HAL_GetTick>
 8004a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a46:	e008      	b.n	8004a5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a48:	f7fd fece 	bl	80027e8 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b64      	cmp	r3, #100	; 0x64
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e207      	b.n	8004e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a5a:	4b5b      	ldr	r3, [pc, #364]	; (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d0f0      	beq.n	8004a48 <HAL_RCC_OscConfig+0xc0>
 8004a66:	e014      	b.n	8004a92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a68:	f7fd febe 	bl	80027e8 <HAL_GetTick>
 8004a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a6e:	e008      	b.n	8004a82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a70:	f7fd feba 	bl	80027e8 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b64      	cmp	r3, #100	; 0x64
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e1f3      	b.n	8004e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a82:	4b51      	ldr	r3, [pc, #324]	; (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1f0      	bne.n	8004a70 <HAL_RCC_OscConfig+0xe8>
 8004a8e:	e000      	b.n	8004a92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d063      	beq.n	8004b66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a9e:	4b4a      	ldr	r3, [pc, #296]	; (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f003 030c 	and.w	r3, r3, #12
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00b      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004aaa:	4b47      	ldr	r3, [pc, #284]	; (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ab2:	2b08      	cmp	r3, #8
 8004ab4:	d11c      	bne.n	8004af0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ab6:	4b44      	ldr	r3, [pc, #272]	; (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d116      	bne.n	8004af0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ac2:	4b41      	ldr	r3, [pc, #260]	; (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d005      	beq.n	8004ada <HAL_RCC_OscConfig+0x152>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d001      	beq.n	8004ada <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e1c7      	b.n	8004e6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ada:	4b3b      	ldr	r3, [pc, #236]	; (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	00db      	lsls	r3, r3, #3
 8004ae8:	4937      	ldr	r1, [pc, #220]	; (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aee:	e03a      	b.n	8004b66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d020      	beq.n	8004b3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004af8:	4b34      	ldr	r3, [pc, #208]	; (8004bcc <HAL_RCC_OscConfig+0x244>)
 8004afa:	2201      	movs	r2, #1
 8004afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afe:	f7fd fe73 	bl	80027e8 <HAL_GetTick>
 8004b02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b04:	e008      	b.n	8004b18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b06:	f7fd fe6f 	bl	80027e8 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d901      	bls.n	8004b18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e1a8      	b.n	8004e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b18:	4b2b      	ldr	r3, [pc, #172]	; (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d0f0      	beq.n	8004b06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b24:	4b28      	ldr	r3, [pc, #160]	; (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	4925      	ldr	r1, [pc, #148]	; (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	600b      	str	r3, [r1, #0]
 8004b38:	e015      	b.n	8004b66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b3a:	4b24      	ldr	r3, [pc, #144]	; (8004bcc <HAL_RCC_OscConfig+0x244>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b40:	f7fd fe52 	bl	80027e8 <HAL_GetTick>
 8004b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b48:	f7fd fe4e 	bl	80027e8 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e187      	b.n	8004e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b5a:	4b1b      	ldr	r3, [pc, #108]	; (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1f0      	bne.n	8004b48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0308 	and.w	r3, r3, #8
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d036      	beq.n	8004be0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d016      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b7a:	4b15      	ldr	r3, [pc, #84]	; (8004bd0 <HAL_RCC_OscConfig+0x248>)
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b80:	f7fd fe32 	bl	80027e8 <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b86:	e008      	b.n	8004b9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b88:	f7fd fe2e 	bl	80027e8 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e167      	b.n	8004e6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b9a:	4b0b      	ldr	r3, [pc, #44]	; (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d0f0      	beq.n	8004b88 <HAL_RCC_OscConfig+0x200>
 8004ba6:	e01b      	b.n	8004be0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ba8:	4b09      	ldr	r3, [pc, #36]	; (8004bd0 <HAL_RCC_OscConfig+0x248>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bae:	f7fd fe1b 	bl	80027e8 <HAL_GetTick>
 8004bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bb4:	e00e      	b.n	8004bd4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bb6:	f7fd fe17 	bl	80027e8 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d907      	bls.n	8004bd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e150      	b.n	8004e6a <HAL_RCC_OscConfig+0x4e2>
 8004bc8:	40023800 	.word	0x40023800
 8004bcc:	42470000 	.word	0x42470000
 8004bd0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bd4:	4b88      	ldr	r3, [pc, #544]	; (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1ea      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0304 	and.w	r3, r3, #4
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 8097 	beq.w	8004d1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bf2:	4b81      	ldr	r3, [pc, #516]	; (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10f      	bne.n	8004c1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bfe:	2300      	movs	r3, #0
 8004c00:	60bb      	str	r3, [r7, #8]
 8004c02:	4b7d      	ldr	r3, [pc, #500]	; (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	4a7c      	ldr	r2, [pc, #496]	; (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8004c0e:	4b7a      	ldr	r3, [pc, #488]	; (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c16:	60bb      	str	r3, [r7, #8]
 8004c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c1e:	4b77      	ldr	r3, [pc, #476]	; (8004dfc <HAL_RCC_OscConfig+0x474>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d118      	bne.n	8004c5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c2a:	4b74      	ldr	r3, [pc, #464]	; (8004dfc <HAL_RCC_OscConfig+0x474>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a73      	ldr	r2, [pc, #460]	; (8004dfc <HAL_RCC_OscConfig+0x474>)
 8004c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c36:	f7fd fdd7 	bl	80027e8 <HAL_GetTick>
 8004c3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c3c:	e008      	b.n	8004c50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c3e:	f7fd fdd3 	bl	80027e8 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e10c      	b.n	8004e6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c50:	4b6a      	ldr	r3, [pc, #424]	; (8004dfc <HAL_RCC_OscConfig+0x474>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d0f0      	beq.n	8004c3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d106      	bne.n	8004c72 <HAL_RCC_OscConfig+0x2ea>
 8004c64:	4b64      	ldr	r3, [pc, #400]	; (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c68:	4a63      	ldr	r2, [pc, #396]	; (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004c6a:	f043 0301 	orr.w	r3, r3, #1
 8004c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c70:	e01c      	b.n	8004cac <HAL_RCC_OscConfig+0x324>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	2b05      	cmp	r3, #5
 8004c78:	d10c      	bne.n	8004c94 <HAL_RCC_OscConfig+0x30c>
 8004c7a:	4b5f      	ldr	r3, [pc, #380]	; (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7e:	4a5e      	ldr	r2, [pc, #376]	; (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004c80:	f043 0304 	orr.w	r3, r3, #4
 8004c84:	6713      	str	r3, [r2, #112]	; 0x70
 8004c86:	4b5c      	ldr	r3, [pc, #368]	; (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8a:	4a5b      	ldr	r2, [pc, #364]	; (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004c8c:	f043 0301 	orr.w	r3, r3, #1
 8004c90:	6713      	str	r3, [r2, #112]	; 0x70
 8004c92:	e00b      	b.n	8004cac <HAL_RCC_OscConfig+0x324>
 8004c94:	4b58      	ldr	r3, [pc, #352]	; (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c98:	4a57      	ldr	r2, [pc, #348]	; (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004c9a:	f023 0301 	bic.w	r3, r3, #1
 8004c9e:	6713      	str	r3, [r2, #112]	; 0x70
 8004ca0:	4b55      	ldr	r3, [pc, #340]	; (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca4:	4a54      	ldr	r2, [pc, #336]	; (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004ca6:	f023 0304 	bic.w	r3, r3, #4
 8004caa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d015      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb4:	f7fd fd98 	bl	80027e8 <HAL_GetTick>
 8004cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cba:	e00a      	b.n	8004cd2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cbc:	f7fd fd94 	bl	80027e8 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e0cb      	b.n	8004e6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cd2:	4b49      	ldr	r3, [pc, #292]	; (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d0ee      	beq.n	8004cbc <HAL_RCC_OscConfig+0x334>
 8004cde:	e014      	b.n	8004d0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ce0:	f7fd fd82 	bl	80027e8 <HAL_GetTick>
 8004ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ce6:	e00a      	b.n	8004cfe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ce8:	f7fd fd7e 	bl	80027e8 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e0b5      	b.n	8004e6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cfe:	4b3e      	ldr	r3, [pc, #248]	; (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1ee      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d0a:	7dfb      	ldrb	r3, [r7, #23]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d105      	bne.n	8004d1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d10:	4b39      	ldr	r3, [pc, #228]	; (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d14:	4a38      	ldr	r2, [pc, #224]	; (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004d16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 80a1 	beq.w	8004e68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d26:	4b34      	ldr	r3, [pc, #208]	; (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 030c 	and.w	r3, r3, #12
 8004d2e:	2b08      	cmp	r3, #8
 8004d30:	d05c      	beq.n	8004dec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d141      	bne.n	8004dbe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d3a:	4b31      	ldr	r3, [pc, #196]	; (8004e00 <HAL_RCC_OscConfig+0x478>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d40:	f7fd fd52 	bl	80027e8 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d48:	f7fd fd4e 	bl	80027e8 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e087      	b.n	8004e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d5a:	4b27      	ldr	r3, [pc, #156]	; (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1f0      	bne.n	8004d48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	69da      	ldr	r2, [r3, #28]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d74:	019b      	lsls	r3, r3, #6
 8004d76:	431a      	orrs	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7c:	085b      	lsrs	r3, r3, #1
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	041b      	lsls	r3, r3, #16
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d88:	061b      	lsls	r3, r3, #24
 8004d8a:	491b      	ldr	r1, [pc, #108]	; (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d90:	4b1b      	ldr	r3, [pc, #108]	; (8004e00 <HAL_RCC_OscConfig+0x478>)
 8004d92:	2201      	movs	r2, #1
 8004d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d96:	f7fd fd27 	bl	80027e8 <HAL_GetTick>
 8004d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d9c:	e008      	b.n	8004db0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d9e:	f7fd fd23 	bl	80027e8 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d901      	bls.n	8004db0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e05c      	b.n	8004e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004db0:	4b11      	ldr	r3, [pc, #68]	; (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d0f0      	beq.n	8004d9e <HAL_RCC_OscConfig+0x416>
 8004dbc:	e054      	b.n	8004e68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dbe:	4b10      	ldr	r3, [pc, #64]	; (8004e00 <HAL_RCC_OscConfig+0x478>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc4:	f7fd fd10 	bl	80027e8 <HAL_GetTick>
 8004dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dca:	e008      	b.n	8004dde <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dcc:	f7fd fd0c 	bl	80027e8 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e045      	b.n	8004e6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dde:	4b06      	ldr	r3, [pc, #24]	; (8004df8 <HAL_RCC_OscConfig+0x470>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1f0      	bne.n	8004dcc <HAL_RCC_OscConfig+0x444>
 8004dea:	e03d      	b.n	8004e68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d107      	bne.n	8004e04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e038      	b.n	8004e6a <HAL_RCC_OscConfig+0x4e2>
 8004df8:	40023800 	.word	0x40023800
 8004dfc:	40007000 	.word	0x40007000
 8004e00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e04:	4b1b      	ldr	r3, [pc, #108]	; (8004e74 <HAL_RCC_OscConfig+0x4ec>)
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d028      	beq.n	8004e64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d121      	bne.n	8004e64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d11a      	bne.n	8004e64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e34:	4013      	ands	r3, r2
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d111      	bne.n	8004e64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4a:	085b      	lsrs	r3, r3, #1
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d107      	bne.n	8004e64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d001      	beq.n	8004e68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e000      	b.n	8004e6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3718      	adds	r7, #24
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	40023800 	.word	0x40023800

08004e78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d101      	bne.n	8004e8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e0cc      	b.n	8005026 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e8c:	4b68      	ldr	r3, [pc, #416]	; (8005030 <HAL_RCC_ClockConfig+0x1b8>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0307 	and.w	r3, r3, #7
 8004e94:	683a      	ldr	r2, [r7, #0]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d90c      	bls.n	8004eb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e9a:	4b65      	ldr	r3, [pc, #404]	; (8005030 <HAL_RCC_ClockConfig+0x1b8>)
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	b2d2      	uxtb	r2, r2
 8004ea0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ea2:	4b63      	ldr	r3, [pc, #396]	; (8005030 <HAL_RCC_ClockConfig+0x1b8>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d001      	beq.n	8004eb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e0b8      	b.n	8005026 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d020      	beq.n	8004f02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0304 	and.w	r3, r3, #4
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d005      	beq.n	8004ed8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ecc:	4b59      	ldr	r3, [pc, #356]	; (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	4a58      	ldr	r2, [pc, #352]	; (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ed6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0308 	and.w	r3, r3, #8
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d005      	beq.n	8004ef0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ee4:	4b53      	ldr	r3, [pc, #332]	; (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	4a52      	ldr	r2, [pc, #328]	; (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004eea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004eee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ef0:	4b50      	ldr	r3, [pc, #320]	; (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	494d      	ldr	r1, [pc, #308]	; (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d044      	beq.n	8004f98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d107      	bne.n	8004f26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f16:	4b47      	ldr	r3, [pc, #284]	; (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d119      	bne.n	8004f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e07f      	b.n	8005026 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d003      	beq.n	8004f36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f32:	2b03      	cmp	r3, #3
 8004f34:	d107      	bne.n	8004f46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f36:	4b3f      	ldr	r3, [pc, #252]	; (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d109      	bne.n	8004f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e06f      	b.n	8005026 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f46:	4b3b      	ldr	r3, [pc, #236]	; (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e067      	b.n	8005026 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f56:	4b37      	ldr	r3, [pc, #220]	; (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f023 0203 	bic.w	r2, r3, #3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	4934      	ldr	r1, [pc, #208]	; (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f68:	f7fd fc3e 	bl	80027e8 <HAL_GetTick>
 8004f6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f6e:	e00a      	b.n	8004f86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f70:	f7fd fc3a 	bl	80027e8 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e04f      	b.n	8005026 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f86:	4b2b      	ldr	r3, [pc, #172]	; (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f003 020c 	and.w	r2, r3, #12
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d1eb      	bne.n	8004f70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f98:	4b25      	ldr	r3, [pc, #148]	; (8005030 <HAL_RCC_ClockConfig+0x1b8>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0307 	and.w	r3, r3, #7
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d20c      	bcs.n	8004fc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fa6:	4b22      	ldr	r3, [pc, #136]	; (8005030 <HAL_RCC_ClockConfig+0x1b8>)
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	b2d2      	uxtb	r2, r2
 8004fac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fae:	4b20      	ldr	r3, [pc, #128]	; (8005030 <HAL_RCC_ClockConfig+0x1b8>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0307 	and.w	r3, r3, #7
 8004fb6:	683a      	ldr	r2, [r7, #0]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d001      	beq.n	8004fc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e032      	b.n	8005026 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0304 	and.w	r3, r3, #4
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d008      	beq.n	8004fde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fcc:	4b19      	ldr	r3, [pc, #100]	; (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	4916      	ldr	r1, [pc, #88]	; (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0308 	and.w	r3, r3, #8
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d009      	beq.n	8004ffe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fea:	4b12      	ldr	r3, [pc, #72]	; (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	490e      	ldr	r1, [pc, #56]	; (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ffe:	f000 f821 	bl	8005044 <HAL_RCC_GetSysClockFreq>
 8005002:	4602      	mov	r2, r0
 8005004:	4b0b      	ldr	r3, [pc, #44]	; (8005034 <HAL_RCC_ClockConfig+0x1bc>)
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	091b      	lsrs	r3, r3, #4
 800500a:	f003 030f 	and.w	r3, r3, #15
 800500e:	490a      	ldr	r1, [pc, #40]	; (8005038 <HAL_RCC_ClockConfig+0x1c0>)
 8005010:	5ccb      	ldrb	r3, [r1, r3]
 8005012:	fa22 f303 	lsr.w	r3, r2, r3
 8005016:	4a09      	ldr	r2, [pc, #36]	; (800503c <HAL_RCC_ClockConfig+0x1c4>)
 8005018:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800501a:	4b09      	ldr	r3, [pc, #36]	; (8005040 <HAL_RCC_ClockConfig+0x1c8>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4618      	mov	r0, r3
 8005020:	f7fd fb9e 	bl	8002760 <HAL_InitTick>

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	40023c00 	.word	0x40023c00
 8005034:	40023800 	.word	0x40023800
 8005038:	08007a20 	.word	0x08007a20
 800503c:	20000014 	.word	0x20000014
 8005040:	20000018 	.word	0x20000018

08005044 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005048:	b094      	sub	sp, #80	; 0x50
 800504a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800504c:	2300      	movs	r3, #0
 800504e:	647b      	str	r3, [r7, #68]	; 0x44
 8005050:	2300      	movs	r3, #0
 8005052:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005054:	2300      	movs	r3, #0
 8005056:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005058:	2300      	movs	r3, #0
 800505a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800505c:	4b79      	ldr	r3, [pc, #484]	; (8005244 <HAL_RCC_GetSysClockFreq+0x200>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f003 030c 	and.w	r3, r3, #12
 8005064:	2b08      	cmp	r3, #8
 8005066:	d00d      	beq.n	8005084 <HAL_RCC_GetSysClockFreq+0x40>
 8005068:	2b08      	cmp	r3, #8
 800506a:	f200 80e1 	bhi.w	8005230 <HAL_RCC_GetSysClockFreq+0x1ec>
 800506e:	2b00      	cmp	r3, #0
 8005070:	d002      	beq.n	8005078 <HAL_RCC_GetSysClockFreq+0x34>
 8005072:	2b04      	cmp	r3, #4
 8005074:	d003      	beq.n	800507e <HAL_RCC_GetSysClockFreq+0x3a>
 8005076:	e0db      	b.n	8005230 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005078:	4b73      	ldr	r3, [pc, #460]	; (8005248 <HAL_RCC_GetSysClockFreq+0x204>)
 800507a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800507c:	e0db      	b.n	8005236 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800507e:	4b73      	ldr	r3, [pc, #460]	; (800524c <HAL_RCC_GetSysClockFreq+0x208>)
 8005080:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005082:	e0d8      	b.n	8005236 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005084:	4b6f      	ldr	r3, [pc, #444]	; (8005244 <HAL_RCC_GetSysClockFreq+0x200>)
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800508c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800508e:	4b6d      	ldr	r3, [pc, #436]	; (8005244 <HAL_RCC_GetSysClockFreq+0x200>)
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d063      	beq.n	8005162 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800509a:	4b6a      	ldr	r3, [pc, #424]	; (8005244 <HAL_RCC_GetSysClockFreq+0x200>)
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	099b      	lsrs	r3, r3, #6
 80050a0:	2200      	movs	r2, #0
 80050a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80050a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80050a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ac:	633b      	str	r3, [r7, #48]	; 0x30
 80050ae:	2300      	movs	r3, #0
 80050b0:	637b      	str	r3, [r7, #52]	; 0x34
 80050b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80050b6:	4622      	mov	r2, r4
 80050b8:	462b      	mov	r3, r5
 80050ba:	f04f 0000 	mov.w	r0, #0
 80050be:	f04f 0100 	mov.w	r1, #0
 80050c2:	0159      	lsls	r1, r3, #5
 80050c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050c8:	0150      	lsls	r0, r2, #5
 80050ca:	4602      	mov	r2, r0
 80050cc:	460b      	mov	r3, r1
 80050ce:	4621      	mov	r1, r4
 80050d0:	1a51      	subs	r1, r2, r1
 80050d2:	6139      	str	r1, [r7, #16]
 80050d4:	4629      	mov	r1, r5
 80050d6:	eb63 0301 	sbc.w	r3, r3, r1
 80050da:	617b      	str	r3, [r7, #20]
 80050dc:	f04f 0200 	mov.w	r2, #0
 80050e0:	f04f 0300 	mov.w	r3, #0
 80050e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050e8:	4659      	mov	r1, fp
 80050ea:	018b      	lsls	r3, r1, #6
 80050ec:	4651      	mov	r1, sl
 80050ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050f2:	4651      	mov	r1, sl
 80050f4:	018a      	lsls	r2, r1, #6
 80050f6:	4651      	mov	r1, sl
 80050f8:	ebb2 0801 	subs.w	r8, r2, r1
 80050fc:	4659      	mov	r1, fp
 80050fe:	eb63 0901 	sbc.w	r9, r3, r1
 8005102:	f04f 0200 	mov.w	r2, #0
 8005106:	f04f 0300 	mov.w	r3, #0
 800510a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800510e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005112:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005116:	4690      	mov	r8, r2
 8005118:	4699      	mov	r9, r3
 800511a:	4623      	mov	r3, r4
 800511c:	eb18 0303 	adds.w	r3, r8, r3
 8005120:	60bb      	str	r3, [r7, #8]
 8005122:	462b      	mov	r3, r5
 8005124:	eb49 0303 	adc.w	r3, r9, r3
 8005128:	60fb      	str	r3, [r7, #12]
 800512a:	f04f 0200 	mov.w	r2, #0
 800512e:	f04f 0300 	mov.w	r3, #0
 8005132:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005136:	4629      	mov	r1, r5
 8005138:	024b      	lsls	r3, r1, #9
 800513a:	4621      	mov	r1, r4
 800513c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005140:	4621      	mov	r1, r4
 8005142:	024a      	lsls	r2, r1, #9
 8005144:	4610      	mov	r0, r2
 8005146:	4619      	mov	r1, r3
 8005148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800514a:	2200      	movs	r2, #0
 800514c:	62bb      	str	r3, [r7, #40]	; 0x28
 800514e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005150:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005154:	f7fb fd14 	bl	8000b80 <__aeabi_uldivmod>
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	4613      	mov	r3, r2
 800515e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005160:	e058      	b.n	8005214 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005162:	4b38      	ldr	r3, [pc, #224]	; (8005244 <HAL_RCC_GetSysClockFreq+0x200>)
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	099b      	lsrs	r3, r3, #6
 8005168:	2200      	movs	r2, #0
 800516a:	4618      	mov	r0, r3
 800516c:	4611      	mov	r1, r2
 800516e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005172:	623b      	str	r3, [r7, #32]
 8005174:	2300      	movs	r3, #0
 8005176:	627b      	str	r3, [r7, #36]	; 0x24
 8005178:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800517c:	4642      	mov	r2, r8
 800517e:	464b      	mov	r3, r9
 8005180:	f04f 0000 	mov.w	r0, #0
 8005184:	f04f 0100 	mov.w	r1, #0
 8005188:	0159      	lsls	r1, r3, #5
 800518a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800518e:	0150      	lsls	r0, r2, #5
 8005190:	4602      	mov	r2, r0
 8005192:	460b      	mov	r3, r1
 8005194:	4641      	mov	r1, r8
 8005196:	ebb2 0a01 	subs.w	sl, r2, r1
 800519a:	4649      	mov	r1, r9
 800519c:	eb63 0b01 	sbc.w	fp, r3, r1
 80051a0:	f04f 0200 	mov.w	r2, #0
 80051a4:	f04f 0300 	mov.w	r3, #0
 80051a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80051ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80051b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80051b4:	ebb2 040a 	subs.w	r4, r2, sl
 80051b8:	eb63 050b 	sbc.w	r5, r3, fp
 80051bc:	f04f 0200 	mov.w	r2, #0
 80051c0:	f04f 0300 	mov.w	r3, #0
 80051c4:	00eb      	lsls	r3, r5, #3
 80051c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051ca:	00e2      	lsls	r2, r4, #3
 80051cc:	4614      	mov	r4, r2
 80051ce:	461d      	mov	r5, r3
 80051d0:	4643      	mov	r3, r8
 80051d2:	18e3      	adds	r3, r4, r3
 80051d4:	603b      	str	r3, [r7, #0]
 80051d6:	464b      	mov	r3, r9
 80051d8:	eb45 0303 	adc.w	r3, r5, r3
 80051dc:	607b      	str	r3, [r7, #4]
 80051de:	f04f 0200 	mov.w	r2, #0
 80051e2:	f04f 0300 	mov.w	r3, #0
 80051e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051ea:	4629      	mov	r1, r5
 80051ec:	028b      	lsls	r3, r1, #10
 80051ee:	4621      	mov	r1, r4
 80051f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051f4:	4621      	mov	r1, r4
 80051f6:	028a      	lsls	r2, r1, #10
 80051f8:	4610      	mov	r0, r2
 80051fa:	4619      	mov	r1, r3
 80051fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051fe:	2200      	movs	r2, #0
 8005200:	61bb      	str	r3, [r7, #24]
 8005202:	61fa      	str	r2, [r7, #28]
 8005204:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005208:	f7fb fcba 	bl	8000b80 <__aeabi_uldivmod>
 800520c:	4602      	mov	r2, r0
 800520e:	460b      	mov	r3, r1
 8005210:	4613      	mov	r3, r2
 8005212:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005214:	4b0b      	ldr	r3, [pc, #44]	; (8005244 <HAL_RCC_GetSysClockFreq+0x200>)
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	0c1b      	lsrs	r3, r3, #16
 800521a:	f003 0303 	and.w	r3, r3, #3
 800521e:	3301      	adds	r3, #1
 8005220:	005b      	lsls	r3, r3, #1
 8005222:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005224:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005228:	fbb2 f3f3 	udiv	r3, r2, r3
 800522c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800522e:	e002      	b.n	8005236 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005230:	4b05      	ldr	r3, [pc, #20]	; (8005248 <HAL_RCC_GetSysClockFreq+0x204>)
 8005232:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005234:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005236:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005238:	4618      	mov	r0, r3
 800523a:	3750      	adds	r7, #80	; 0x50
 800523c:	46bd      	mov	sp, r7
 800523e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005242:	bf00      	nop
 8005244:	40023800 	.word	0x40023800
 8005248:	00f42400 	.word	0x00f42400
 800524c:	007a1200 	.word	0x007a1200

08005250 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005250:	b480      	push	{r7}
 8005252:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005254:	4b03      	ldr	r3, [pc, #12]	; (8005264 <HAL_RCC_GetHCLKFreq+0x14>)
 8005256:	681b      	ldr	r3, [r3, #0]
}
 8005258:	4618      	mov	r0, r3
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	20000014 	.word	0x20000014

08005268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800526c:	f7ff fff0 	bl	8005250 <HAL_RCC_GetHCLKFreq>
 8005270:	4602      	mov	r2, r0
 8005272:	4b05      	ldr	r3, [pc, #20]	; (8005288 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	0a9b      	lsrs	r3, r3, #10
 8005278:	f003 0307 	and.w	r3, r3, #7
 800527c:	4903      	ldr	r1, [pc, #12]	; (800528c <HAL_RCC_GetPCLK1Freq+0x24>)
 800527e:	5ccb      	ldrb	r3, [r1, r3]
 8005280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005284:	4618      	mov	r0, r3
 8005286:	bd80      	pop	{r7, pc}
 8005288:	40023800 	.word	0x40023800
 800528c:	08007a30 	.word	0x08007a30

08005290 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005298:	2300      	movs	r3, #0
 800529a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800529c:	2300      	movs	r3, #0
 800529e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d105      	bne.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d035      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80052b8:	4b62      	ldr	r3, [pc, #392]	; (8005444 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052be:	f7fd fa93 	bl	80027e8 <HAL_GetTick>
 80052c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052c4:	e008      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80052c6:	f7fd fa8f 	bl	80027e8 <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d901      	bls.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e0b0      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052d8:	4b5b      	ldr	r3, [pc, #364]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1f0      	bne.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	019a      	lsls	r2, r3, #6
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	071b      	lsls	r3, r3, #28
 80052f0:	4955      	ldr	r1, [pc, #340]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80052f8:	4b52      	ldr	r3, [pc, #328]	; (8005444 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80052fa:	2201      	movs	r2, #1
 80052fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052fe:	f7fd fa73 	bl	80027e8 <HAL_GetTick>
 8005302:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005304:	e008      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005306:	f7fd fa6f 	bl	80027e8 <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	2b02      	cmp	r3, #2
 8005312:	d901      	bls.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e090      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005318:	4b4b      	ldr	r3, [pc, #300]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d0f0      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0302 	and.w	r3, r3, #2
 800532c:	2b00      	cmp	r3, #0
 800532e:	f000 8083 	beq.w	8005438 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005332:	2300      	movs	r3, #0
 8005334:	60fb      	str	r3, [r7, #12]
 8005336:	4b44      	ldr	r3, [pc, #272]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	4a43      	ldr	r2, [pc, #268]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800533c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005340:	6413      	str	r3, [r2, #64]	; 0x40
 8005342:	4b41      	ldr	r3, [pc, #260]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800534a:	60fb      	str	r3, [r7, #12]
 800534c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800534e:	4b3f      	ldr	r3, [pc, #252]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a3e      	ldr	r2, [pc, #248]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005358:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800535a:	f7fd fa45 	bl	80027e8 <HAL_GetTick>
 800535e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005360:	e008      	b.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005362:	f7fd fa41 	bl	80027e8 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	2b02      	cmp	r3, #2
 800536e:	d901      	bls.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e062      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005374:	4b35      	ldr	r3, [pc, #212]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800537c:	2b00      	cmp	r3, #0
 800537e:	d0f0      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005380:	4b31      	ldr	r3, [pc, #196]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005384:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005388:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d02f      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	429a      	cmp	r2, r3
 800539c:	d028      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800539e:	4b2a      	ldr	r3, [pc, #168]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053a6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053a8:	4b29      	ldr	r3, [pc, #164]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80053aa:	2201      	movs	r2, #1
 80053ac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053ae:	4b28      	ldr	r3, [pc, #160]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80053b4:	4a24      	ldr	r2, [pc, #144]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80053ba:	4b23      	ldr	r3, [pc, #140]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d114      	bne.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80053c6:	f7fd fa0f 	bl	80027e8 <HAL_GetTick>
 80053ca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053cc:	e00a      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053ce:	f7fd fa0b 	bl	80027e8 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80053dc:	4293      	cmp	r3, r2
 80053de:	d901      	bls.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e02a      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053e4:	4b18      	ldr	r3, [pc, #96]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e8:	f003 0302 	and.w	r3, r3, #2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d0ee      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053fc:	d10d      	bne.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80053fe:	4b12      	ldr	r3, [pc, #72]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800540e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005412:	490d      	ldr	r1, [pc, #52]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005414:	4313      	orrs	r3, r2
 8005416:	608b      	str	r3, [r1, #8]
 8005418:	e005      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800541a:	4b0b      	ldr	r3, [pc, #44]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	4a0a      	ldr	r2, [pc, #40]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005420:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005424:	6093      	str	r3, [r2, #8]
 8005426:	4b08      	ldr	r3, [pc, #32]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005428:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005432:	4905      	ldr	r1, [pc, #20]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005434:	4313      	orrs	r3, r2
 8005436:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3718      	adds	r7, #24
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	42470068 	.word	0x42470068
 8005448:	40023800 	.word	0x40023800
 800544c:	40007000 	.word	0x40007000
 8005450:	42470e40 	.word	0x42470e40

08005454 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005454:	b480      	push	{r7}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800545c:	2300      	movs	r3, #0
 800545e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005460:	2300      	movs	r3, #0
 8005462:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005464:	2300      	movs	r3, #0
 8005466:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d13f      	bne.n	80054f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005472:	4b24      	ldr	r3, [pc, #144]	; (8005504 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d006      	beq.n	8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005488:	d12f      	bne.n	80054ea <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800548a:	4b1f      	ldr	r3, [pc, #124]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800548c:	617b      	str	r3, [r7, #20]
          break;
 800548e:	e02f      	b.n	80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005490:	4b1c      	ldr	r3, [pc, #112]	; (8005504 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005498:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800549c:	d108      	bne.n	80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800549e:	4b19      	ldr	r3, [pc, #100]	; (8005504 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054a6:	4a19      	ldr	r2, [pc, #100]	; (800550c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80054a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ac:	613b      	str	r3, [r7, #16]
 80054ae:	e007      	b.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80054b0:	4b14      	ldr	r3, [pc, #80]	; (8005504 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054b8:	4a15      	ldr	r2, [pc, #84]	; (8005510 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80054ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80054be:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80054c0:	4b10      	ldr	r3, [pc, #64]	; (8005504 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80054c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054c6:	099b      	lsrs	r3, r3, #6
 80054c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	fb02 f303 	mul.w	r3, r2, r3
 80054d2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80054d4:	4b0b      	ldr	r3, [pc, #44]	; (8005504 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80054d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054da:	0f1b      	lsrs	r3, r3, #28
 80054dc:	f003 0307 	and.w	r3, r3, #7
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e6:	617b      	str	r3, [r7, #20]
          break;
 80054e8:	e002      	b.n	80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80054ea:	2300      	movs	r3, #0
 80054ec:	617b      	str	r3, [r7, #20]
          break;
 80054ee:	bf00      	nop
        }
      }
      break;
 80054f0:	e000      	b.n	80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 80054f2:	bf00      	nop
    }
  }
  return frequency;
 80054f4:	697b      	ldr	r3, [r7, #20]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	371c      	adds	r7, #28
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	40023800 	.word	0x40023800
 8005508:	00bb8000 	.word	0x00bb8000
 800550c:	007a1200 	.word	0x007a1200
 8005510:	00f42400 	.word	0x00f42400

08005514 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e07b      	b.n	800561e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552a:	2b00      	cmp	r3, #0
 800552c:	d108      	bne.n	8005540 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005536:	d009      	beq.n	800554c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	61da      	str	r2, [r3, #28]
 800553e:	e005      	b.n	800554c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d106      	bne.n	800556c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7fc ffac 	bl	80024c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2202      	movs	r2, #2
 8005570:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005582:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005594:	431a      	orrs	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800559e:	431a      	orrs	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	f003 0302 	and.w	r3, r3, #2
 80055a8:	431a      	orrs	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	431a      	orrs	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055bc:	431a      	orrs	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055c6:	431a      	orrs	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a1b      	ldr	r3, [r3, #32]
 80055cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055d0:	ea42 0103 	orr.w	r1, r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	0c1b      	lsrs	r3, r3, #16
 80055ea:	f003 0104 	and.w	r1, r3, #4
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f2:	f003 0210 	and.w	r2, r3, #16
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	430a      	orrs	r2, r1
 80055fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	69da      	ldr	r2, [r3, #28]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800560c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3708      	adds	r7, #8
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005626:	b580      	push	{r7, lr}
 8005628:	b088      	sub	sp, #32
 800562a:	af00      	add	r7, sp, #0
 800562c:	60f8      	str	r0, [r7, #12]
 800562e:	60b9      	str	r1, [r7, #8]
 8005630:	603b      	str	r3, [r7, #0]
 8005632:	4613      	mov	r3, r2
 8005634:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005636:	2300      	movs	r3, #0
 8005638:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005640:	2b01      	cmp	r3, #1
 8005642:	d101      	bne.n	8005648 <HAL_SPI_Transmit+0x22>
 8005644:	2302      	movs	r3, #2
 8005646:	e12d      	b.n	80058a4 <HAL_SPI_Transmit+0x27e>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005650:	f7fd f8ca 	bl	80027e8 <HAL_GetTick>
 8005654:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005656:	88fb      	ldrh	r3, [r7, #6]
 8005658:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b01      	cmp	r3, #1
 8005664:	d002      	beq.n	800566c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005666:	2302      	movs	r3, #2
 8005668:	77fb      	strb	r3, [r7, #31]
    goto error;
 800566a:	e116      	b.n	800589a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d002      	beq.n	8005678 <HAL_SPI_Transmit+0x52>
 8005672:	88fb      	ldrh	r3, [r7, #6]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d102      	bne.n	800567e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800567c:	e10d      	b.n	800589a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2203      	movs	r2, #3
 8005682:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	88fa      	ldrh	r2, [r7, #6]
 8005696:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	88fa      	ldrh	r2, [r7, #6]
 800569c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056c4:	d10f      	bne.n	80056e6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f0:	2b40      	cmp	r3, #64	; 0x40
 80056f2:	d007      	beq.n	8005704 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005702:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800570c:	d14f      	bne.n	80057ae <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d002      	beq.n	800571c <HAL_SPI_Transmit+0xf6>
 8005716:	8afb      	ldrh	r3, [r7, #22]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d142      	bne.n	80057a2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005720:	881a      	ldrh	r2, [r3, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572c:	1c9a      	adds	r2, r3, #2
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005736:	b29b      	uxth	r3, r3
 8005738:	3b01      	subs	r3, #1
 800573a:	b29a      	uxth	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005740:	e02f      	b.n	80057a2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f003 0302 	and.w	r3, r3, #2
 800574c:	2b02      	cmp	r3, #2
 800574e:	d112      	bne.n	8005776 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005754:	881a      	ldrh	r2, [r3, #0]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005760:	1c9a      	adds	r2, r3, #2
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800576a:	b29b      	uxth	r3, r3
 800576c:	3b01      	subs	r3, #1
 800576e:	b29a      	uxth	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	86da      	strh	r2, [r3, #54]	; 0x36
 8005774:	e015      	b.n	80057a2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005776:	f7fd f837 	bl	80027e8 <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	429a      	cmp	r2, r3
 8005784:	d803      	bhi.n	800578e <HAL_SPI_Transmit+0x168>
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800578c:	d102      	bne.n	8005794 <HAL_SPI_Transmit+0x16e>
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d106      	bne.n	80057a2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80057a0:	e07b      	b.n	800589a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1ca      	bne.n	8005742 <HAL_SPI_Transmit+0x11c>
 80057ac:	e050      	b.n	8005850 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d002      	beq.n	80057bc <HAL_SPI_Transmit+0x196>
 80057b6:	8afb      	ldrh	r3, [r7, #22]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d144      	bne.n	8005846 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	330c      	adds	r3, #12
 80057c6:	7812      	ldrb	r2, [r2, #0]
 80057c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ce:	1c5a      	adds	r2, r3, #1
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057d8:	b29b      	uxth	r3, r3
 80057da:	3b01      	subs	r3, #1
 80057dc:	b29a      	uxth	r2, r3
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80057e2:	e030      	b.n	8005846 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d113      	bne.n	800581a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	330c      	adds	r3, #12
 80057fc:	7812      	ldrb	r2, [r2, #0]
 80057fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005804:	1c5a      	adds	r2, r3, #1
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800580e:	b29b      	uxth	r3, r3
 8005810:	3b01      	subs	r3, #1
 8005812:	b29a      	uxth	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	86da      	strh	r2, [r3, #54]	; 0x36
 8005818:	e015      	b.n	8005846 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800581a:	f7fc ffe5 	bl	80027e8 <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	683a      	ldr	r2, [r7, #0]
 8005826:	429a      	cmp	r2, r3
 8005828:	d803      	bhi.n	8005832 <HAL_SPI_Transmit+0x20c>
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005830:	d102      	bne.n	8005838 <HAL_SPI_Transmit+0x212>
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d106      	bne.n	8005846 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005844:	e029      	b.n	800589a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800584a:	b29b      	uxth	r3, r3
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1c9      	bne.n	80057e4 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	6839      	ldr	r1, [r7, #0]
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f000 fbdf 	bl	8006018 <SPI_EndRxTxTransaction>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d002      	beq.n	8005866 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2220      	movs	r2, #32
 8005864:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10a      	bne.n	8005884 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800586e:	2300      	movs	r3, #0
 8005870:	613b      	str	r3, [r7, #16]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	613b      	str	r3, [r7, #16]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	613b      	str	r3, [r7, #16]
 8005882:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005888:	2b00      	cmp	r3, #0
 800588a:	d002      	beq.n	8005892 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	77fb      	strb	r3, [r7, #31]
 8005890:	e003      	b.n	800589a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80058a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3720      	adds	r7, #32
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b088      	sub	sp, #32
 80058b0:	af02      	add	r7, sp, #8
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	603b      	str	r3, [r7, #0]
 80058b8:	4613      	mov	r3, r2
 80058ba:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80058bc:	2300      	movs	r3, #0
 80058be:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d002      	beq.n	80058d2 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80058cc:	2302      	movs	r3, #2
 80058ce:	75fb      	strb	r3, [r7, #23]
    goto error;
 80058d0:	e0fb      	b.n	8005aca <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058da:	d112      	bne.n	8005902 <HAL_SPI_Receive+0x56>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d10e      	bne.n	8005902 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2204      	movs	r2, #4
 80058e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80058ec:	88fa      	ldrh	r2, [r7, #6]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	9300      	str	r3, [sp, #0]
 80058f2:	4613      	mov	r3, r2
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	68b9      	ldr	r1, [r7, #8]
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f000 f8ef 	bl	8005adc <HAL_SPI_TransmitReceive>
 80058fe:	4603      	mov	r3, r0
 8005900:	e0e8      	b.n	8005ad4 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005908:	2b01      	cmp	r3, #1
 800590a:	d101      	bne.n	8005910 <HAL_SPI_Receive+0x64>
 800590c:	2302      	movs	r3, #2
 800590e:	e0e1      	b.n	8005ad4 <HAL_SPI_Receive+0x228>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005918:	f7fc ff66 	bl	80027e8 <HAL_GetTick>
 800591c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d002      	beq.n	800592a <HAL_SPI_Receive+0x7e>
 8005924:	88fb      	ldrh	r3, [r7, #6]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d102      	bne.n	8005930 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800592e:	e0cc      	b.n	8005aca <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2204      	movs	r2, #4
 8005934:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	88fa      	ldrh	r2, [r7, #6]
 8005948:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	88fa      	ldrh	r2, [r7, #6]
 800594e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005976:	d10f      	bne.n	8005998 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005986:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005996:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a2:	2b40      	cmp	r3, #64	; 0x40
 80059a4:	d007      	beq.n	80059b6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059b4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d16a      	bne.n	8005a94 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80059be:	e032      	b.n	8005a26 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d115      	bne.n	80059fa <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f103 020c 	add.w	r2, r3, #12
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059da:	7812      	ldrb	r2, [r2, #0]
 80059dc:	b2d2      	uxtb	r2, r2
 80059de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e4:	1c5a      	adds	r2, r3, #1
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	3b01      	subs	r3, #1
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059f8:	e015      	b.n	8005a26 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059fa:	f7fc fef5 	bl	80027e8 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	683a      	ldr	r2, [r7, #0]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d803      	bhi.n	8005a12 <HAL_SPI_Receive+0x166>
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a10:	d102      	bne.n	8005a18 <HAL_SPI_Receive+0x16c>
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d106      	bne.n	8005a26 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005a24:	e051      	b.n	8005aca <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1c7      	bne.n	80059c0 <HAL_SPI_Receive+0x114>
 8005a30:	e035      	b.n	8005a9e <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f003 0301 	and.w	r3, r3, #1
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d113      	bne.n	8005a68 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68da      	ldr	r2, [r3, #12]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4a:	b292      	uxth	r2, r2
 8005a4c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a52:	1c9a      	adds	r2, r3, #2
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a66:	e015      	b.n	8005a94 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a68:	f7fc febe 	bl	80027e8 <HAL_GetTick>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	683a      	ldr	r2, [r7, #0]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d803      	bhi.n	8005a80 <HAL_SPI_Receive+0x1d4>
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a7e:	d102      	bne.n	8005a86 <HAL_SPI_Receive+0x1da>
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d106      	bne.n	8005a94 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005a92:	e01a      	b.n	8005aca <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1c9      	bne.n	8005a32 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	6839      	ldr	r1, [r7, #0]
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f000 fa52 	bl	8005f4c <SPI_EndRxTransaction>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d002      	beq.n	8005ab4 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d002      	beq.n	8005ac2 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	75fb      	strb	r3, [r7, #23]
 8005ac0:	e003      	b.n	8005aca <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3718      	adds	r7, #24
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b08c      	sub	sp, #48	; 0x30
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
 8005ae8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005aea:	2301      	movs	r3, #1
 8005aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005aee:	2300      	movs	r3, #0
 8005af0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d101      	bne.n	8005b02 <HAL_SPI_TransmitReceive+0x26>
 8005afe:	2302      	movs	r3, #2
 8005b00:	e198      	b.n	8005e34 <HAL_SPI_TransmitReceive+0x358>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2201      	movs	r2, #1
 8005b06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b0a:	f7fc fe6d 	bl	80027e8 <HAL_GetTick>
 8005b0e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005b20:	887b      	ldrh	r3, [r7, #2]
 8005b22:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005b24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d00f      	beq.n	8005b4c <HAL_SPI_TransmitReceive+0x70>
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b32:	d107      	bne.n	8005b44 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d103      	bne.n	8005b44 <HAL_SPI_TransmitReceive+0x68>
 8005b3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b40:	2b04      	cmp	r3, #4
 8005b42:	d003      	beq.n	8005b4c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005b44:	2302      	movs	r3, #2
 8005b46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005b4a:	e16d      	b.n	8005e28 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d005      	beq.n	8005b5e <HAL_SPI_TransmitReceive+0x82>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d002      	beq.n	8005b5e <HAL_SPI_TransmitReceive+0x82>
 8005b58:	887b      	ldrh	r3, [r7, #2]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d103      	bne.n	8005b66 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005b64:	e160      	b.n	8005e28 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b04      	cmp	r3, #4
 8005b70:	d003      	beq.n	8005b7a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2205      	movs	r2, #5
 8005b76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	887a      	ldrh	r2, [r7, #2]
 8005b8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	887a      	ldrh	r2, [r7, #2]
 8005b90:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	68ba      	ldr	r2, [r7, #8]
 8005b96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	887a      	ldrh	r2, [r7, #2]
 8005b9c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	887a      	ldrh	r2, [r7, #2]
 8005ba2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bba:	2b40      	cmp	r3, #64	; 0x40
 8005bbc:	d007      	beq.n	8005bce <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bcc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bd6:	d17c      	bne.n	8005cd2 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d002      	beq.n	8005be6 <HAL_SPI_TransmitReceive+0x10a>
 8005be0:	8b7b      	ldrh	r3, [r7, #26]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d16a      	bne.n	8005cbc <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bea:	881a      	ldrh	r2, [r3, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf6:	1c9a      	adds	r2, r3, #2
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	3b01      	subs	r3, #1
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c0a:	e057      	b.n	8005cbc <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f003 0302 	and.w	r3, r3, #2
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d11b      	bne.n	8005c52 <HAL_SPI_TransmitReceive+0x176>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d016      	beq.n	8005c52 <HAL_SPI_TransmitReceive+0x176>
 8005c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d113      	bne.n	8005c52 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2e:	881a      	ldrh	r2, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c3a:	1c9a      	adds	r2, r3, #2
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	3b01      	subs	r3, #1
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d119      	bne.n	8005c94 <HAL_SPI_TransmitReceive+0x1b8>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d014      	beq.n	8005c94 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68da      	ldr	r2, [r3, #12]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c74:	b292      	uxth	r2, r2
 8005c76:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7c:	1c9a      	adds	r2, r3, #2
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c90:	2301      	movs	r3, #1
 8005c92:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c94:	f7fc fda8 	bl	80027e8 <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d80b      	bhi.n	8005cbc <HAL_SPI_TransmitReceive+0x1e0>
 8005ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005caa:	d007      	beq.n	8005cbc <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005cba:	e0b5      	b.n	8005e28 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1a2      	bne.n	8005c0c <HAL_SPI_TransmitReceive+0x130>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d19d      	bne.n	8005c0c <HAL_SPI_TransmitReceive+0x130>
 8005cd0:	e080      	b.n	8005dd4 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d002      	beq.n	8005ce0 <HAL_SPI_TransmitReceive+0x204>
 8005cda:	8b7b      	ldrh	r3, [r7, #26]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d16f      	bne.n	8005dc0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	330c      	adds	r3, #12
 8005cea:	7812      	ldrb	r2, [r2, #0]
 8005cec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf2:	1c5a      	adds	r2, r3, #1
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d06:	e05b      	b.n	8005dc0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f003 0302 	and.w	r3, r3, #2
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d11c      	bne.n	8005d50 <HAL_SPI_TransmitReceive+0x274>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d017      	beq.n	8005d50 <HAL_SPI_TransmitReceive+0x274>
 8005d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d114      	bne.n	8005d50 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	330c      	adds	r3, #12
 8005d30:	7812      	ldrb	r2, [r2, #0]
 8005d32:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d38:	1c5a      	adds	r2, r3, #1
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	3b01      	subs	r3, #1
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d119      	bne.n	8005d92 <HAL_SPI_TransmitReceive+0x2b6>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d014      	beq.n	8005d92 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68da      	ldr	r2, [r3, #12]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d72:	b2d2      	uxtb	r2, r2
 8005d74:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7a:	1c5a      	adds	r2, r3, #1
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	3b01      	subs	r3, #1
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d92:	f7fc fd29 	bl	80027e8 <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d803      	bhi.n	8005daa <HAL_SPI_TransmitReceive+0x2ce>
 8005da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005da8:	d102      	bne.n	8005db0 <HAL_SPI_TransmitReceive+0x2d4>
 8005daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d107      	bne.n	8005dc0 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005dbe:	e033      	b.n	8005e28 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d19e      	bne.n	8005d08 <HAL_SPI_TransmitReceive+0x22c>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d199      	bne.n	8005d08 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dd6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f000 f91d 	bl	8006018 <SPI_EndRxTxTransaction>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d006      	beq.n	8005df2 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2220      	movs	r2, #32
 8005dee:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005df0:	e01a      	b.n	8005e28 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d10a      	bne.n	8005e10 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	617b      	str	r3, [r7, #20]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	617b      	str	r3, [r7, #20]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	617b      	str	r3, [r7, #20]
 8005e0e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d003      	beq.n	8005e20 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e1e:	e003      	b.n	8005e28 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3730      	adds	r7, #48	; 0x30
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b088      	sub	sp, #32
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	603b      	str	r3, [r7, #0]
 8005e48:	4613      	mov	r3, r2
 8005e4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e4c:	f7fc fccc 	bl	80027e8 <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e54:	1a9b      	subs	r3, r3, r2
 8005e56:	683a      	ldr	r2, [r7, #0]
 8005e58:	4413      	add	r3, r2
 8005e5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e5c:	f7fc fcc4 	bl	80027e8 <HAL_GetTick>
 8005e60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e62:	4b39      	ldr	r3, [pc, #228]	; (8005f48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	015b      	lsls	r3, r3, #5
 8005e68:	0d1b      	lsrs	r3, r3, #20
 8005e6a:	69fa      	ldr	r2, [r7, #28]
 8005e6c:	fb02 f303 	mul.w	r3, r2, r3
 8005e70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e72:	e054      	b.n	8005f1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e7a:	d050      	beq.n	8005f1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e7c:	f7fc fcb4 	bl	80027e8 <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	69fa      	ldr	r2, [r7, #28]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d902      	bls.n	8005e92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d13d      	bne.n	8005f0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	685a      	ldr	r2, [r3, #4]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ea0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005eaa:	d111      	bne.n	8005ed0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eb4:	d004      	beq.n	8005ec0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ebe:	d107      	bne.n	8005ed0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ece:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ed8:	d10f      	bne.n	8005efa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ee8:	601a      	str	r2, [r3, #0]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ef8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e017      	b.n	8005f3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d101      	bne.n	8005f18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f14:	2300      	movs	r3, #0
 8005f16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	689a      	ldr	r2, [r3, #8]
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	4013      	ands	r3, r2
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	bf0c      	ite	eq
 8005f2e:	2301      	moveq	r3, #1
 8005f30:	2300      	movne	r3, #0
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	461a      	mov	r2, r3
 8005f36:	79fb      	ldrb	r3, [r7, #7]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d19b      	bne.n	8005e74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3720      	adds	r7, #32
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	20000014 	.word	0x20000014

08005f4c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b086      	sub	sp, #24
 8005f50:	af02      	add	r7, sp, #8
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f60:	d111      	bne.n	8005f86 <SPI_EndRxTransaction+0x3a>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f6a:	d004      	beq.n	8005f76 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f74:	d107      	bne.n	8005f86 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f84:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f8e:	d12a      	bne.n	8005fe6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f98:	d012      	beq.n	8005fc0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	2180      	movs	r1, #128	; 0x80
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f7ff ff49 	bl	8005e3c <SPI_WaitFlagStateUntilTimeout>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d02d      	beq.n	800600c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb4:	f043 0220 	orr.w	r2, r3, #32
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e026      	b.n	800600e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	9300      	str	r3, [sp, #0]
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	2101      	movs	r1, #1
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f7ff ff36 	bl	8005e3c <SPI_WaitFlagStateUntilTimeout>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d01a      	beq.n	800600c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fda:	f043 0220 	orr.w	r2, r3, #32
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e013      	b.n	800600e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	9300      	str	r3, [sp, #0]
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	2200      	movs	r2, #0
 8005fee:	2101      	movs	r1, #1
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f7ff ff23 	bl	8005e3c <SPI_WaitFlagStateUntilTimeout>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d007      	beq.n	800600c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006000:	f043 0220 	orr.w	r2, r3, #32
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	e000      	b.n	800600e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3710      	adds	r7, #16
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
	...

08006018 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b088      	sub	sp, #32
 800601c:	af02      	add	r7, sp, #8
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	9300      	str	r3, [sp, #0]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	2201      	movs	r2, #1
 800602c:	2102      	movs	r1, #2
 800602e:	68f8      	ldr	r0, [r7, #12]
 8006030:	f7ff ff04 	bl	8005e3c <SPI_WaitFlagStateUntilTimeout>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d007      	beq.n	800604a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800603e:	f043 0220 	orr.w	r2, r3, #32
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e032      	b.n	80060b0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800604a:	4b1b      	ldr	r3, [pc, #108]	; (80060b8 <SPI_EndRxTxTransaction+0xa0>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a1b      	ldr	r2, [pc, #108]	; (80060bc <SPI_EndRxTxTransaction+0xa4>)
 8006050:	fba2 2303 	umull	r2, r3, r2, r3
 8006054:	0d5b      	lsrs	r3, r3, #21
 8006056:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800605a:	fb02 f303 	mul.w	r3, r2, r3
 800605e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006068:	d112      	bne.n	8006090 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	9300      	str	r3, [sp, #0]
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	2200      	movs	r2, #0
 8006072:	2180      	movs	r1, #128	; 0x80
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f7ff fee1 	bl	8005e3c <SPI_WaitFlagStateUntilTimeout>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d016      	beq.n	80060ae <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006084:	f043 0220 	orr.w	r2, r3, #32
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e00f      	b.n	80060b0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00a      	beq.n	80060ac <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	3b01      	subs	r3, #1
 800609a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060a6:	2b80      	cmp	r3, #128	; 0x80
 80060a8:	d0f2      	beq.n	8006090 <SPI_EndRxTxTransaction+0x78>
 80060aa:	e000      	b.n	80060ae <SPI_EndRxTxTransaction+0x96>
        break;
 80060ac:	bf00      	nop
  }

  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3718      	adds	r7, #24
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	20000014 	.word	0x20000014
 80060bc:	165e9f81 	.word	0x165e9f81

080060c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e041      	b.n	8006156 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d106      	bne.n	80060ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f7fc fa34 	bl	8002554 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2202      	movs	r2, #2
 80060f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	3304      	adds	r3, #4
 80060fc:	4619      	mov	r1, r3
 80060fe:	4610      	mov	r0, r2
 8006100:	f000 fcdc 	bl	8006abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3708      	adds	r7, #8
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
	...

08006160 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800616e:	b2db      	uxtb	r3, r3
 8006170:	2b01      	cmp	r3, #1
 8006172:	d001      	beq.n	8006178 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e04e      	b.n	8006216 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2202      	movs	r2, #2
 800617c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68da      	ldr	r2, [r3, #12]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f042 0201 	orr.w	r2, r2, #1
 800618e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a23      	ldr	r2, [pc, #140]	; (8006224 <HAL_TIM_Base_Start_IT+0xc4>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d022      	beq.n	80061e0 <HAL_TIM_Base_Start_IT+0x80>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061a2:	d01d      	beq.n	80061e0 <HAL_TIM_Base_Start_IT+0x80>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a1f      	ldr	r2, [pc, #124]	; (8006228 <HAL_TIM_Base_Start_IT+0xc8>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d018      	beq.n	80061e0 <HAL_TIM_Base_Start_IT+0x80>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a1e      	ldr	r2, [pc, #120]	; (800622c <HAL_TIM_Base_Start_IT+0xcc>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d013      	beq.n	80061e0 <HAL_TIM_Base_Start_IT+0x80>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a1c      	ldr	r2, [pc, #112]	; (8006230 <HAL_TIM_Base_Start_IT+0xd0>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d00e      	beq.n	80061e0 <HAL_TIM_Base_Start_IT+0x80>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a1b      	ldr	r2, [pc, #108]	; (8006234 <HAL_TIM_Base_Start_IT+0xd4>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d009      	beq.n	80061e0 <HAL_TIM_Base_Start_IT+0x80>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a19      	ldr	r2, [pc, #100]	; (8006238 <HAL_TIM_Base_Start_IT+0xd8>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d004      	beq.n	80061e0 <HAL_TIM_Base_Start_IT+0x80>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a18      	ldr	r2, [pc, #96]	; (800623c <HAL_TIM_Base_Start_IT+0xdc>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d111      	bne.n	8006204 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f003 0307 	and.w	r3, r3, #7
 80061ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2b06      	cmp	r3, #6
 80061f0:	d010      	beq.n	8006214 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f042 0201 	orr.w	r2, r2, #1
 8006200:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006202:	e007      	b.n	8006214 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f042 0201 	orr.w	r2, r2, #1
 8006212:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	40010000 	.word	0x40010000
 8006228:	40000400 	.word	0x40000400
 800622c:	40000800 	.word	0x40000800
 8006230:	40000c00 	.word	0x40000c00
 8006234:	40010400 	.word	0x40010400
 8006238:	40014000 	.word	0x40014000
 800623c:	40001800 	.word	0x40001800

08006240 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d101      	bne.n	8006252 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e041      	b.n	80062d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d106      	bne.n	800626c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f839 	bl	80062de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2202      	movs	r2, #2
 8006270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	3304      	adds	r3, #4
 800627c:	4619      	mov	r1, r3
 800627e:	4610      	mov	r0, r2
 8006280:	f000 fc1c 	bl	8006abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3708      	adds	r7, #8
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80062de:	b480      	push	{r7}
 80062e0:	b083      	sub	sp, #12
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80062e6:	bf00      	nop
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
	...

080062f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d109      	bne.n	8006318 <HAL_TIM_PWM_Start+0x24>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800630a:	b2db      	uxtb	r3, r3
 800630c:	2b01      	cmp	r3, #1
 800630e:	bf14      	ite	ne
 8006310:	2301      	movne	r3, #1
 8006312:	2300      	moveq	r3, #0
 8006314:	b2db      	uxtb	r3, r3
 8006316:	e022      	b.n	800635e <HAL_TIM_PWM_Start+0x6a>
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	2b04      	cmp	r3, #4
 800631c:	d109      	bne.n	8006332 <HAL_TIM_PWM_Start+0x3e>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b01      	cmp	r3, #1
 8006328:	bf14      	ite	ne
 800632a:	2301      	movne	r3, #1
 800632c:	2300      	moveq	r3, #0
 800632e:	b2db      	uxtb	r3, r3
 8006330:	e015      	b.n	800635e <HAL_TIM_PWM_Start+0x6a>
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2b08      	cmp	r3, #8
 8006336:	d109      	bne.n	800634c <HAL_TIM_PWM_Start+0x58>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b01      	cmp	r3, #1
 8006342:	bf14      	ite	ne
 8006344:	2301      	movne	r3, #1
 8006346:	2300      	moveq	r3, #0
 8006348:	b2db      	uxtb	r3, r3
 800634a:	e008      	b.n	800635e <HAL_TIM_PWM_Start+0x6a>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b01      	cmp	r3, #1
 8006356:	bf14      	ite	ne
 8006358:	2301      	movne	r3, #1
 800635a:	2300      	moveq	r3, #0
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b00      	cmp	r3, #0
 8006360:	d001      	beq.n	8006366 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e07c      	b.n	8006460 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d104      	bne.n	8006376 <HAL_TIM_PWM_Start+0x82>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2202      	movs	r2, #2
 8006370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006374:	e013      	b.n	800639e <HAL_TIM_PWM_Start+0xaa>
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	2b04      	cmp	r3, #4
 800637a:	d104      	bne.n	8006386 <HAL_TIM_PWM_Start+0x92>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2202      	movs	r2, #2
 8006380:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006384:	e00b      	b.n	800639e <HAL_TIM_PWM_Start+0xaa>
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	2b08      	cmp	r3, #8
 800638a:	d104      	bne.n	8006396 <HAL_TIM_PWM_Start+0xa2>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2202      	movs	r2, #2
 8006390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006394:	e003      	b.n	800639e <HAL_TIM_PWM_Start+0xaa>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2202      	movs	r2, #2
 800639a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2201      	movs	r2, #1
 80063a4:	6839      	ldr	r1, [r7, #0]
 80063a6:	4618      	mov	r0, r3
 80063a8:	f000 fe7e 	bl	80070a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a2d      	ldr	r2, [pc, #180]	; (8006468 <HAL_TIM_PWM_Start+0x174>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d004      	beq.n	80063c0 <HAL_TIM_PWM_Start+0xcc>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a2c      	ldr	r2, [pc, #176]	; (800646c <HAL_TIM_PWM_Start+0x178>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d101      	bne.n	80063c4 <HAL_TIM_PWM_Start+0xd0>
 80063c0:	2301      	movs	r3, #1
 80063c2:	e000      	b.n	80063c6 <HAL_TIM_PWM_Start+0xd2>
 80063c4:	2300      	movs	r3, #0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d007      	beq.n	80063da <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a22      	ldr	r2, [pc, #136]	; (8006468 <HAL_TIM_PWM_Start+0x174>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d022      	beq.n	800642a <HAL_TIM_PWM_Start+0x136>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ec:	d01d      	beq.n	800642a <HAL_TIM_PWM_Start+0x136>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a1f      	ldr	r2, [pc, #124]	; (8006470 <HAL_TIM_PWM_Start+0x17c>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d018      	beq.n	800642a <HAL_TIM_PWM_Start+0x136>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a1d      	ldr	r2, [pc, #116]	; (8006474 <HAL_TIM_PWM_Start+0x180>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d013      	beq.n	800642a <HAL_TIM_PWM_Start+0x136>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a1c      	ldr	r2, [pc, #112]	; (8006478 <HAL_TIM_PWM_Start+0x184>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d00e      	beq.n	800642a <HAL_TIM_PWM_Start+0x136>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a16      	ldr	r2, [pc, #88]	; (800646c <HAL_TIM_PWM_Start+0x178>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d009      	beq.n	800642a <HAL_TIM_PWM_Start+0x136>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a18      	ldr	r2, [pc, #96]	; (800647c <HAL_TIM_PWM_Start+0x188>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d004      	beq.n	800642a <HAL_TIM_PWM_Start+0x136>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a16      	ldr	r2, [pc, #88]	; (8006480 <HAL_TIM_PWM_Start+0x18c>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d111      	bne.n	800644e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f003 0307 	and.w	r3, r3, #7
 8006434:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2b06      	cmp	r3, #6
 800643a:	d010      	beq.n	800645e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f042 0201 	orr.w	r2, r2, #1
 800644a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800644c:	e007      	b.n	800645e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f042 0201 	orr.w	r2, r2, #1
 800645c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	40010000 	.word	0x40010000
 800646c:	40010400 	.word	0x40010400
 8006470:	40000400 	.word	0x40000400
 8006474:	40000800 	.word	0x40000800
 8006478:	40000c00 	.word	0x40000c00
 800647c:	40014000 	.word	0x40014000
 8006480:	40001800 	.word	0x40001800

08006484 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2200      	movs	r2, #0
 8006494:	6839      	ldr	r1, [r7, #0]
 8006496:	4618      	mov	r0, r3
 8006498:	f000 fe06 	bl	80070a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a2e      	ldr	r2, [pc, #184]	; (800655c <HAL_TIM_PWM_Stop+0xd8>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d004      	beq.n	80064b0 <HAL_TIM_PWM_Stop+0x2c>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a2d      	ldr	r2, [pc, #180]	; (8006560 <HAL_TIM_PWM_Stop+0xdc>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d101      	bne.n	80064b4 <HAL_TIM_PWM_Stop+0x30>
 80064b0:	2301      	movs	r3, #1
 80064b2:	e000      	b.n	80064b6 <HAL_TIM_PWM_Stop+0x32>
 80064b4:	2300      	movs	r3, #0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d017      	beq.n	80064ea <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	6a1a      	ldr	r2, [r3, #32]
 80064c0:	f241 1311 	movw	r3, #4369	; 0x1111
 80064c4:	4013      	ands	r3, r2
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10f      	bne.n	80064ea <HAL_TIM_PWM_Stop+0x66>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	6a1a      	ldr	r2, [r3, #32]
 80064d0:	f240 4344 	movw	r3, #1092	; 0x444
 80064d4:	4013      	ands	r3, r2
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d107      	bne.n	80064ea <HAL_TIM_PWM_Stop+0x66>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	6a1a      	ldr	r2, [r3, #32]
 80064f0:	f241 1311 	movw	r3, #4369	; 0x1111
 80064f4:	4013      	ands	r3, r2
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10f      	bne.n	800651a <HAL_TIM_PWM_Stop+0x96>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	6a1a      	ldr	r2, [r3, #32]
 8006500:	f240 4344 	movw	r3, #1092	; 0x444
 8006504:	4013      	ands	r3, r2
 8006506:	2b00      	cmp	r3, #0
 8006508:	d107      	bne.n	800651a <HAL_TIM_PWM_Stop+0x96>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f022 0201 	bic.w	r2, r2, #1
 8006518:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d104      	bne.n	800652a <HAL_TIM_PWM_Stop+0xa6>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006528:	e013      	b.n	8006552 <HAL_TIM_PWM_Stop+0xce>
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	2b04      	cmp	r3, #4
 800652e:	d104      	bne.n	800653a <HAL_TIM_PWM_Stop+0xb6>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006538:	e00b      	b.n	8006552 <HAL_TIM_PWM_Stop+0xce>
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	2b08      	cmp	r3, #8
 800653e:	d104      	bne.n	800654a <HAL_TIM_PWM_Stop+0xc6>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006548:	e003      	b.n	8006552 <HAL_TIM_PWM_Stop+0xce>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3708      	adds	r7, #8
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}
 800655c:	40010000 	.word	0x40010000
 8006560:	40010400 	.word	0x40010400

08006564 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	f003 0302 	and.w	r3, r3, #2
 8006582:	2b00      	cmp	r3, #0
 8006584:	d020      	beq.n	80065c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f003 0302 	and.w	r3, r3, #2
 800658c:	2b00      	cmp	r3, #0
 800658e:	d01b      	beq.n	80065c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f06f 0202 	mvn.w	r2, #2
 8006598:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2201      	movs	r2, #1
 800659e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	f003 0303 	and.w	r3, r3, #3
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 fa65 	bl	8006a7e <HAL_TIM_IC_CaptureCallback>
 80065b4:	e005      	b.n	80065c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 fa57 	bl	8006a6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 fa68 	bl	8006a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	f003 0304 	and.w	r3, r3, #4
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d020      	beq.n	8006614 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f003 0304 	and.w	r3, r3, #4
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d01b      	beq.n	8006614 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f06f 0204 	mvn.w	r2, #4
 80065e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2202      	movs	r2, #2
 80065ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d003      	beq.n	8006602 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 fa3f 	bl	8006a7e <HAL_TIM_IC_CaptureCallback>
 8006600:	e005      	b.n	800660e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 fa31 	bl	8006a6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 fa42 	bl	8006a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	f003 0308 	and.w	r3, r3, #8
 800661a:	2b00      	cmp	r3, #0
 800661c:	d020      	beq.n	8006660 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f003 0308 	and.w	r3, r3, #8
 8006624:	2b00      	cmp	r3, #0
 8006626:	d01b      	beq.n	8006660 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f06f 0208 	mvn.w	r2, #8
 8006630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2204      	movs	r2, #4
 8006636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	69db      	ldr	r3, [r3, #28]
 800663e:	f003 0303 	and.w	r3, r3, #3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d003      	beq.n	800664e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 fa19 	bl	8006a7e <HAL_TIM_IC_CaptureCallback>
 800664c:	e005      	b.n	800665a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 fa0b 	bl	8006a6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 fa1c 	bl	8006a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	f003 0310 	and.w	r3, r3, #16
 8006666:	2b00      	cmp	r3, #0
 8006668:	d020      	beq.n	80066ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f003 0310 	and.w	r3, r3, #16
 8006670:	2b00      	cmp	r3, #0
 8006672:	d01b      	beq.n	80066ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f06f 0210 	mvn.w	r2, #16
 800667c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2208      	movs	r2, #8
 8006682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	69db      	ldr	r3, [r3, #28]
 800668a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800668e:	2b00      	cmp	r3, #0
 8006690:	d003      	beq.n	800669a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f9f3 	bl	8006a7e <HAL_TIM_IC_CaptureCallback>
 8006698:	e005      	b.n	80066a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 f9e5 	bl	8006a6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 f9f6 	bl	8006a92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	f003 0301 	and.w	r3, r3, #1
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00c      	beq.n	80066d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f003 0301 	and.w	r3, r3, #1
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d007      	beq.n	80066d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f06f 0201 	mvn.w	r2, #1
 80066c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 f9c3 	bl	8006a56 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00c      	beq.n	80066f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d007      	beq.n	80066f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 fd86 	bl	8007200 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00c      	beq.n	8006718 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006704:	2b00      	cmp	r3, #0
 8006706:	d007      	beq.n	8006718 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f9c7 	bl	8006aa6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	f003 0320 	and.w	r3, r3, #32
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00c      	beq.n	800673c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f003 0320 	and.w	r3, r3, #32
 8006728:	2b00      	cmp	r3, #0
 800672a:	d007      	beq.n	800673c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f06f 0220 	mvn.w	r2, #32
 8006734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 fd58 	bl	80071ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800673c:	bf00      	nop
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006750:	2300      	movs	r3, #0
 8006752:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800675a:	2b01      	cmp	r3, #1
 800675c:	d101      	bne.n	8006762 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800675e:	2302      	movs	r3, #2
 8006760:	e0ae      	b.n	80068c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2201      	movs	r2, #1
 8006766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2b0c      	cmp	r3, #12
 800676e:	f200 809f 	bhi.w	80068b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006772:	a201      	add	r2, pc, #4	; (adr r2, 8006778 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006778:	080067ad 	.word	0x080067ad
 800677c:	080068b1 	.word	0x080068b1
 8006780:	080068b1 	.word	0x080068b1
 8006784:	080068b1 	.word	0x080068b1
 8006788:	080067ed 	.word	0x080067ed
 800678c:	080068b1 	.word	0x080068b1
 8006790:	080068b1 	.word	0x080068b1
 8006794:	080068b1 	.word	0x080068b1
 8006798:	0800682f 	.word	0x0800682f
 800679c:	080068b1 	.word	0x080068b1
 80067a0:	080068b1 	.word	0x080068b1
 80067a4:	080068b1 	.word	0x080068b1
 80067a8:	0800686f 	.word	0x0800686f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68b9      	ldr	r1, [r7, #8]
 80067b2:	4618      	mov	r0, r3
 80067b4:	f000 fa2e 	bl	8006c14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	699a      	ldr	r2, [r3, #24]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f042 0208 	orr.w	r2, r2, #8
 80067c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	699a      	ldr	r2, [r3, #24]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f022 0204 	bic.w	r2, r2, #4
 80067d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6999      	ldr	r1, [r3, #24]
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	691a      	ldr	r2, [r3, #16]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	430a      	orrs	r2, r1
 80067e8:	619a      	str	r2, [r3, #24]
      break;
 80067ea:	e064      	b.n	80068b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68b9      	ldr	r1, [r7, #8]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 fa7e 	bl	8006cf4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	699a      	ldr	r2, [r3, #24]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006806:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	699a      	ldr	r2, [r3, #24]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006816:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	6999      	ldr	r1, [r3, #24]
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	021a      	lsls	r2, r3, #8
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	430a      	orrs	r2, r1
 800682a:	619a      	str	r2, [r3, #24]
      break;
 800682c:	e043      	b.n	80068b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68b9      	ldr	r1, [r7, #8]
 8006834:	4618      	mov	r0, r3
 8006836:	f000 fad3 	bl	8006de0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	69da      	ldr	r2, [r3, #28]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f042 0208 	orr.w	r2, r2, #8
 8006848:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	69da      	ldr	r2, [r3, #28]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f022 0204 	bic.w	r2, r2, #4
 8006858:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	69d9      	ldr	r1, [r3, #28]
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	691a      	ldr	r2, [r3, #16]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	430a      	orrs	r2, r1
 800686a:	61da      	str	r2, [r3, #28]
      break;
 800686c:	e023      	b.n	80068b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68b9      	ldr	r1, [r7, #8]
 8006874:	4618      	mov	r0, r3
 8006876:	f000 fb27 	bl	8006ec8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	69da      	ldr	r2, [r3, #28]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006888:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	69da      	ldr	r2, [r3, #28]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006898:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	69d9      	ldr	r1, [r3, #28]
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	021a      	lsls	r2, r3, #8
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	430a      	orrs	r2, r1
 80068ac:	61da      	str	r2, [r3, #28]
      break;
 80068ae:	e002      	b.n	80068b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	75fb      	strb	r3, [r7, #23]
      break;
 80068b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068be:	7dfb      	ldrb	r3, [r7, #23]
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3718      	adds	r7, #24
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068d2:	2300      	movs	r3, #0
 80068d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d101      	bne.n	80068e4 <HAL_TIM_ConfigClockSource+0x1c>
 80068e0:	2302      	movs	r3, #2
 80068e2:	e0b4      	b.n	8006a4e <HAL_TIM_ConfigClockSource+0x186>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2202      	movs	r2, #2
 80068f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006902:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800690a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68ba      	ldr	r2, [r7, #8]
 8006912:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800691c:	d03e      	beq.n	800699c <HAL_TIM_ConfigClockSource+0xd4>
 800691e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006922:	f200 8087 	bhi.w	8006a34 <HAL_TIM_ConfigClockSource+0x16c>
 8006926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800692a:	f000 8086 	beq.w	8006a3a <HAL_TIM_ConfigClockSource+0x172>
 800692e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006932:	d87f      	bhi.n	8006a34 <HAL_TIM_ConfigClockSource+0x16c>
 8006934:	2b70      	cmp	r3, #112	; 0x70
 8006936:	d01a      	beq.n	800696e <HAL_TIM_ConfigClockSource+0xa6>
 8006938:	2b70      	cmp	r3, #112	; 0x70
 800693a:	d87b      	bhi.n	8006a34 <HAL_TIM_ConfigClockSource+0x16c>
 800693c:	2b60      	cmp	r3, #96	; 0x60
 800693e:	d050      	beq.n	80069e2 <HAL_TIM_ConfigClockSource+0x11a>
 8006940:	2b60      	cmp	r3, #96	; 0x60
 8006942:	d877      	bhi.n	8006a34 <HAL_TIM_ConfigClockSource+0x16c>
 8006944:	2b50      	cmp	r3, #80	; 0x50
 8006946:	d03c      	beq.n	80069c2 <HAL_TIM_ConfigClockSource+0xfa>
 8006948:	2b50      	cmp	r3, #80	; 0x50
 800694a:	d873      	bhi.n	8006a34 <HAL_TIM_ConfigClockSource+0x16c>
 800694c:	2b40      	cmp	r3, #64	; 0x40
 800694e:	d058      	beq.n	8006a02 <HAL_TIM_ConfigClockSource+0x13a>
 8006950:	2b40      	cmp	r3, #64	; 0x40
 8006952:	d86f      	bhi.n	8006a34 <HAL_TIM_ConfigClockSource+0x16c>
 8006954:	2b30      	cmp	r3, #48	; 0x30
 8006956:	d064      	beq.n	8006a22 <HAL_TIM_ConfigClockSource+0x15a>
 8006958:	2b30      	cmp	r3, #48	; 0x30
 800695a:	d86b      	bhi.n	8006a34 <HAL_TIM_ConfigClockSource+0x16c>
 800695c:	2b20      	cmp	r3, #32
 800695e:	d060      	beq.n	8006a22 <HAL_TIM_ConfigClockSource+0x15a>
 8006960:	2b20      	cmp	r3, #32
 8006962:	d867      	bhi.n	8006a34 <HAL_TIM_ConfigClockSource+0x16c>
 8006964:	2b00      	cmp	r3, #0
 8006966:	d05c      	beq.n	8006a22 <HAL_TIM_ConfigClockSource+0x15a>
 8006968:	2b10      	cmp	r3, #16
 800696a:	d05a      	beq.n	8006a22 <HAL_TIM_ConfigClockSource+0x15a>
 800696c:	e062      	b.n	8006a34 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800697e:	f000 fb73 	bl	8007068 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006990:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	609a      	str	r2, [r3, #8]
      break;
 800699a:	e04f      	b.n	8006a3c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80069ac:	f000 fb5c 	bl	8007068 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	689a      	ldr	r2, [r3, #8]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069be:	609a      	str	r2, [r3, #8]
      break;
 80069c0:	e03c      	b.n	8006a3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069ce:	461a      	mov	r2, r3
 80069d0:	f000 fad0 	bl	8006f74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2150      	movs	r1, #80	; 0x50
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 fb29 	bl	8007032 <TIM_ITRx_SetConfig>
      break;
 80069e0:	e02c      	b.n	8006a3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069ee:	461a      	mov	r2, r3
 80069f0:	f000 faef 	bl	8006fd2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2160      	movs	r1, #96	; 0x60
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 fb19 	bl	8007032 <TIM_ITRx_SetConfig>
      break;
 8006a00:	e01c      	b.n	8006a3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a0e:	461a      	mov	r2, r3
 8006a10:	f000 fab0 	bl	8006f74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2140      	movs	r1, #64	; 0x40
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f000 fb09 	bl	8007032 <TIM_ITRx_SetConfig>
      break;
 8006a20:	e00c      	b.n	8006a3c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	4610      	mov	r0, r2
 8006a2e:	f000 fb00 	bl	8007032 <TIM_ITRx_SetConfig>
      break;
 8006a32:	e003      	b.n	8006a3c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	73fb      	strb	r3, [r7, #15]
      break;
 8006a38:	e000      	b.n	8006a3c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006a3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b083      	sub	sp, #12
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006a5e:	bf00      	nop
 8006a60:	370c      	adds	r7, #12
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b083      	sub	sp, #12
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a72:	bf00      	nop
 8006a74:	370c      	adds	r7, #12
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr

08006a7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b083      	sub	sp, #12
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a86:	bf00      	nop
 8006a88:	370c      	adds	r7, #12
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr

08006a92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a92:	b480      	push	{r7}
 8006a94:	b083      	sub	sp, #12
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a9a:	bf00      	nop
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr

08006aa6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b083      	sub	sp, #12
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006aae:	bf00      	nop
 8006ab0:	370c      	adds	r7, #12
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
	...

08006abc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a46      	ldr	r2, [pc, #280]	; (8006be8 <TIM_Base_SetConfig+0x12c>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d013      	beq.n	8006afc <TIM_Base_SetConfig+0x40>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ada:	d00f      	beq.n	8006afc <TIM_Base_SetConfig+0x40>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a43      	ldr	r2, [pc, #268]	; (8006bec <TIM_Base_SetConfig+0x130>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d00b      	beq.n	8006afc <TIM_Base_SetConfig+0x40>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a42      	ldr	r2, [pc, #264]	; (8006bf0 <TIM_Base_SetConfig+0x134>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d007      	beq.n	8006afc <TIM_Base_SetConfig+0x40>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a41      	ldr	r2, [pc, #260]	; (8006bf4 <TIM_Base_SetConfig+0x138>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d003      	beq.n	8006afc <TIM_Base_SetConfig+0x40>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a40      	ldr	r2, [pc, #256]	; (8006bf8 <TIM_Base_SetConfig+0x13c>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d108      	bne.n	8006b0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a35      	ldr	r2, [pc, #212]	; (8006be8 <TIM_Base_SetConfig+0x12c>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d02b      	beq.n	8006b6e <TIM_Base_SetConfig+0xb2>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b1c:	d027      	beq.n	8006b6e <TIM_Base_SetConfig+0xb2>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a32      	ldr	r2, [pc, #200]	; (8006bec <TIM_Base_SetConfig+0x130>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d023      	beq.n	8006b6e <TIM_Base_SetConfig+0xb2>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a31      	ldr	r2, [pc, #196]	; (8006bf0 <TIM_Base_SetConfig+0x134>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d01f      	beq.n	8006b6e <TIM_Base_SetConfig+0xb2>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a30      	ldr	r2, [pc, #192]	; (8006bf4 <TIM_Base_SetConfig+0x138>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d01b      	beq.n	8006b6e <TIM_Base_SetConfig+0xb2>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a2f      	ldr	r2, [pc, #188]	; (8006bf8 <TIM_Base_SetConfig+0x13c>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d017      	beq.n	8006b6e <TIM_Base_SetConfig+0xb2>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a2e      	ldr	r2, [pc, #184]	; (8006bfc <TIM_Base_SetConfig+0x140>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d013      	beq.n	8006b6e <TIM_Base_SetConfig+0xb2>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a2d      	ldr	r2, [pc, #180]	; (8006c00 <TIM_Base_SetConfig+0x144>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d00f      	beq.n	8006b6e <TIM_Base_SetConfig+0xb2>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a2c      	ldr	r2, [pc, #176]	; (8006c04 <TIM_Base_SetConfig+0x148>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d00b      	beq.n	8006b6e <TIM_Base_SetConfig+0xb2>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a2b      	ldr	r2, [pc, #172]	; (8006c08 <TIM_Base_SetConfig+0x14c>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d007      	beq.n	8006b6e <TIM_Base_SetConfig+0xb2>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a2a      	ldr	r2, [pc, #168]	; (8006c0c <TIM_Base_SetConfig+0x150>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d003      	beq.n	8006b6e <TIM_Base_SetConfig+0xb2>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a29      	ldr	r2, [pc, #164]	; (8006c10 <TIM_Base_SetConfig+0x154>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d108      	bne.n	8006b80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	689a      	ldr	r2, [r3, #8]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a10      	ldr	r2, [pc, #64]	; (8006be8 <TIM_Base_SetConfig+0x12c>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d003      	beq.n	8006bb4 <TIM_Base_SetConfig+0xf8>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a12      	ldr	r2, [pc, #72]	; (8006bf8 <TIM_Base_SetConfig+0x13c>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d103      	bne.n	8006bbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	691a      	ldr	r2, [r3, #16]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d105      	bne.n	8006bda <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	f023 0201 	bic.w	r2, r3, #1
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	611a      	str	r2, [r3, #16]
  }
}
 8006bda:	bf00      	nop
 8006bdc:	3714      	adds	r7, #20
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	40010000 	.word	0x40010000
 8006bec:	40000400 	.word	0x40000400
 8006bf0:	40000800 	.word	0x40000800
 8006bf4:	40000c00 	.word	0x40000c00
 8006bf8:	40010400 	.word	0x40010400
 8006bfc:	40014000 	.word	0x40014000
 8006c00:	40014400 	.word	0x40014400
 8006c04:	40014800 	.word	0x40014800
 8006c08:	40001800 	.word	0x40001800
 8006c0c:	40001c00 	.word	0x40001c00
 8006c10:	40002000 	.word	0x40002000

08006c14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b087      	sub	sp, #28
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a1b      	ldr	r3, [r3, #32]
 8006c22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	f023 0201 	bic.w	r2, r3, #1
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f023 0303 	bic.w	r3, r3, #3
 8006c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	f023 0302 	bic.w	r3, r3, #2
 8006c5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	697a      	ldr	r2, [r7, #20]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a20      	ldr	r2, [pc, #128]	; (8006cec <TIM_OC1_SetConfig+0xd8>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d003      	beq.n	8006c78 <TIM_OC1_SetConfig+0x64>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a1f      	ldr	r2, [pc, #124]	; (8006cf0 <TIM_OC1_SetConfig+0xdc>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d10c      	bne.n	8006c92 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	f023 0308 	bic.w	r3, r3, #8
 8006c7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	f023 0304 	bic.w	r3, r3, #4
 8006c90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a15      	ldr	r2, [pc, #84]	; (8006cec <TIM_OC1_SetConfig+0xd8>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d003      	beq.n	8006ca2 <TIM_OC1_SetConfig+0x8e>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a14      	ldr	r2, [pc, #80]	; (8006cf0 <TIM_OC1_SetConfig+0xdc>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d111      	bne.n	8006cc6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ca8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	693a      	ldr	r2, [r7, #16]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	685a      	ldr	r2, [r3, #4]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	697a      	ldr	r2, [r7, #20]
 8006cde:	621a      	str	r2, [r3, #32]
}
 8006ce0:	bf00      	nop
 8006ce2:	371c      	adds	r7, #28
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr
 8006cec:	40010000 	.word	0x40010000
 8006cf0:	40010400 	.word	0x40010400

08006cf4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b087      	sub	sp, #28
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a1b      	ldr	r3, [r3, #32]
 8006d02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a1b      	ldr	r3, [r3, #32]
 8006d08:	f023 0210 	bic.w	r2, r3, #16
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	021b      	lsls	r3, r3, #8
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	f023 0320 	bic.w	r3, r3, #32
 8006d3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	011b      	lsls	r3, r3, #4
 8006d46:	697a      	ldr	r2, [r7, #20]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a22      	ldr	r2, [pc, #136]	; (8006dd8 <TIM_OC2_SetConfig+0xe4>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d003      	beq.n	8006d5c <TIM_OC2_SetConfig+0x68>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a21      	ldr	r2, [pc, #132]	; (8006ddc <TIM_OC2_SetConfig+0xe8>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d10d      	bne.n	8006d78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	011b      	lsls	r3, r3, #4
 8006d6a:	697a      	ldr	r2, [r7, #20]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a17      	ldr	r2, [pc, #92]	; (8006dd8 <TIM_OC2_SetConfig+0xe4>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d003      	beq.n	8006d88 <TIM_OC2_SetConfig+0x94>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a16      	ldr	r2, [pc, #88]	; (8006ddc <TIM_OC2_SetConfig+0xe8>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d113      	bne.n	8006db0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	699b      	ldr	r3, [r3, #24]
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	693a      	ldr	r2, [r7, #16]
 8006db4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	685a      	ldr	r2, [r3, #4]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	621a      	str	r2, [r3, #32]
}
 8006dca:	bf00      	nop
 8006dcc:	371c      	adds	r7, #28
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	40010000 	.word	0x40010000
 8006ddc:	40010400 	.word	0x40010400

08006de0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b087      	sub	sp, #28
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a1b      	ldr	r3, [r3, #32]
 8006dee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a1b      	ldr	r3, [r3, #32]
 8006df4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	69db      	ldr	r3, [r3, #28]
 8006e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f023 0303 	bic.w	r3, r3, #3
 8006e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	021b      	lsls	r3, r3, #8
 8006e30:	697a      	ldr	r2, [r7, #20]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a21      	ldr	r2, [pc, #132]	; (8006ec0 <TIM_OC3_SetConfig+0xe0>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d003      	beq.n	8006e46 <TIM_OC3_SetConfig+0x66>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a20      	ldr	r2, [pc, #128]	; (8006ec4 <TIM_OC3_SetConfig+0xe4>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d10d      	bne.n	8006e62 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	021b      	lsls	r3, r3, #8
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a16      	ldr	r2, [pc, #88]	; (8006ec0 <TIM_OC3_SetConfig+0xe0>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d003      	beq.n	8006e72 <TIM_OC3_SetConfig+0x92>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a15      	ldr	r2, [pc, #84]	; (8006ec4 <TIM_OC3_SetConfig+0xe4>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d113      	bne.n	8006e9a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	695b      	ldr	r3, [r3, #20]
 8006e86:	011b      	lsls	r3, r3, #4
 8006e88:	693a      	ldr	r2, [r7, #16]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	011b      	lsls	r3, r3, #4
 8006e94:	693a      	ldr	r2, [r7, #16]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	693a      	ldr	r2, [r7, #16]
 8006e9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	685a      	ldr	r2, [r3, #4]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	697a      	ldr	r2, [r7, #20]
 8006eb2:	621a      	str	r2, [r3, #32]
}
 8006eb4:	bf00      	nop
 8006eb6:	371c      	adds	r7, #28
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr
 8006ec0:	40010000 	.word	0x40010000
 8006ec4:	40010400 	.word	0x40010400

08006ec8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b087      	sub	sp, #28
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6a1b      	ldr	r3, [r3, #32]
 8006edc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	69db      	ldr	r3, [r3, #28]
 8006eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006efe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	021b      	lsls	r3, r3, #8
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	031b      	lsls	r3, r3, #12
 8006f1a:	693a      	ldr	r2, [r7, #16]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a12      	ldr	r2, [pc, #72]	; (8006f6c <TIM_OC4_SetConfig+0xa4>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d003      	beq.n	8006f30 <TIM_OC4_SetConfig+0x68>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4a11      	ldr	r2, [pc, #68]	; (8006f70 <TIM_OC4_SetConfig+0xa8>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d109      	bne.n	8006f44 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	695b      	ldr	r3, [r3, #20]
 8006f3c:	019b      	lsls	r3, r3, #6
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	685a      	ldr	r2, [r3, #4]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	693a      	ldr	r2, [r7, #16]
 8006f5c:	621a      	str	r2, [r3, #32]
}
 8006f5e:	bf00      	nop
 8006f60:	371c      	adds	r7, #28
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	40010000 	.word	0x40010000
 8006f70:	40010400 	.word	0x40010400

08006f74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b087      	sub	sp, #28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6a1b      	ldr	r3, [r3, #32]
 8006f84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	f023 0201 	bic.w	r2, r3, #1
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	011b      	lsls	r3, r3, #4
 8006fa4:	693a      	ldr	r2, [r7, #16]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	f023 030a 	bic.w	r3, r3, #10
 8006fb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006fb2:	697a      	ldr	r2, [r7, #20]
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	621a      	str	r2, [r3, #32]
}
 8006fc6:	bf00      	nop
 8006fc8:	371c      	adds	r7, #28
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr

08006fd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fd2:	b480      	push	{r7}
 8006fd4:	b087      	sub	sp, #28
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	60f8      	str	r0, [r7, #12]
 8006fda:	60b9      	str	r1, [r7, #8]
 8006fdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6a1b      	ldr	r3, [r3, #32]
 8006fe8:	f023 0210 	bic.w	r2, r3, #16
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	699b      	ldr	r3, [r3, #24]
 8006ff4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ffc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	031b      	lsls	r3, r3, #12
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	4313      	orrs	r3, r2
 8007006:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800700e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	011b      	lsls	r3, r3, #4
 8007014:	697a      	ldr	r2, [r7, #20]
 8007016:	4313      	orrs	r3, r2
 8007018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	697a      	ldr	r2, [r7, #20]
 8007024:	621a      	str	r2, [r3, #32]
}
 8007026:	bf00      	nop
 8007028:	371c      	adds	r7, #28
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr

08007032 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007032:	b480      	push	{r7}
 8007034:	b085      	sub	sp, #20
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
 800703a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007048:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	4313      	orrs	r3, r2
 8007050:	f043 0307 	orr.w	r3, r3, #7
 8007054:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	609a      	str	r2, [r3, #8]
}
 800705c:	bf00      	nop
 800705e:	3714      	adds	r7, #20
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007068:	b480      	push	{r7}
 800706a:	b087      	sub	sp, #28
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	607a      	str	r2, [r7, #4]
 8007074:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007082:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	021a      	lsls	r2, r3, #8
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	431a      	orrs	r2, r3
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	4313      	orrs	r3, r2
 8007090:	697a      	ldr	r2, [r7, #20]
 8007092:	4313      	orrs	r3, r2
 8007094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	697a      	ldr	r2, [r7, #20]
 800709a:	609a      	str	r2, [r3, #8]
}
 800709c:	bf00      	nop
 800709e:	371c      	adds	r7, #28
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b087      	sub	sp, #28
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	f003 031f 	and.w	r3, r3, #31
 80070ba:	2201      	movs	r2, #1
 80070bc:	fa02 f303 	lsl.w	r3, r2, r3
 80070c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6a1a      	ldr	r2, [r3, #32]
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	43db      	mvns	r3, r3
 80070ca:	401a      	ands	r2, r3
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6a1a      	ldr	r2, [r3, #32]
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	f003 031f 	and.w	r3, r3, #31
 80070da:	6879      	ldr	r1, [r7, #4]
 80070dc:	fa01 f303 	lsl.w	r3, r1, r3
 80070e0:	431a      	orrs	r2, r3
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	621a      	str	r2, [r3, #32]
}
 80070e6:	bf00      	nop
 80070e8:	371c      	adds	r7, #28
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr
	...

080070f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007104:	2b01      	cmp	r3, #1
 8007106:	d101      	bne.n	800710c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007108:	2302      	movs	r3, #2
 800710a:	e05a      	b.n	80071c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2202      	movs	r2, #2
 8007118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007132:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	4313      	orrs	r3, r2
 800713c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a21      	ldr	r2, [pc, #132]	; (80071d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d022      	beq.n	8007196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007158:	d01d      	beq.n	8007196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a1d      	ldr	r2, [pc, #116]	; (80071d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d018      	beq.n	8007196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a1b      	ldr	r2, [pc, #108]	; (80071d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d013      	beq.n	8007196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a1a      	ldr	r2, [pc, #104]	; (80071dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d00e      	beq.n	8007196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a18      	ldr	r2, [pc, #96]	; (80071e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d009      	beq.n	8007196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a17      	ldr	r2, [pc, #92]	; (80071e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d004      	beq.n	8007196 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a15      	ldr	r2, [pc, #84]	; (80071e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d10c      	bne.n	80071b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800719c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	68ba      	ldr	r2, [r7, #8]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68ba      	ldr	r2, [r7, #8]
 80071ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	40010000 	.word	0x40010000
 80071d4:	40000400 	.word	0x40000400
 80071d8:	40000800 	.word	0x40000800
 80071dc:	40000c00 	.word	0x40000c00
 80071e0:	40010400 	.word	0x40010400
 80071e4:	40014000 	.word	0x40014000
 80071e8:	40001800 	.word	0x40001800

080071ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071f4:	bf00      	nop
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007208:	bf00      	nop
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <memset>:
 8007214:	4402      	add	r2, r0
 8007216:	4603      	mov	r3, r0
 8007218:	4293      	cmp	r3, r2
 800721a:	d100      	bne.n	800721e <memset+0xa>
 800721c:	4770      	bx	lr
 800721e:	f803 1b01 	strb.w	r1, [r3], #1
 8007222:	e7f9      	b.n	8007218 <memset+0x4>

08007224 <__errno>:
 8007224:	4b01      	ldr	r3, [pc, #4]	; (800722c <__errno+0x8>)
 8007226:	6818      	ldr	r0, [r3, #0]
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	2000006c 	.word	0x2000006c

08007230 <__libc_init_array>:
 8007230:	b570      	push	{r4, r5, r6, lr}
 8007232:	4d0d      	ldr	r5, [pc, #52]	; (8007268 <__libc_init_array+0x38>)
 8007234:	4c0d      	ldr	r4, [pc, #52]	; (800726c <__libc_init_array+0x3c>)
 8007236:	1b64      	subs	r4, r4, r5
 8007238:	10a4      	asrs	r4, r4, #2
 800723a:	2600      	movs	r6, #0
 800723c:	42a6      	cmp	r6, r4
 800723e:	d109      	bne.n	8007254 <__libc_init_array+0x24>
 8007240:	4d0b      	ldr	r5, [pc, #44]	; (8007270 <__libc_init_array+0x40>)
 8007242:	4c0c      	ldr	r4, [pc, #48]	; (8007274 <__libc_init_array+0x44>)
 8007244:	f000 fbd6 	bl	80079f4 <_init>
 8007248:	1b64      	subs	r4, r4, r5
 800724a:	10a4      	asrs	r4, r4, #2
 800724c:	2600      	movs	r6, #0
 800724e:	42a6      	cmp	r6, r4
 8007250:	d105      	bne.n	800725e <__libc_init_array+0x2e>
 8007252:	bd70      	pop	{r4, r5, r6, pc}
 8007254:	f855 3b04 	ldr.w	r3, [r5], #4
 8007258:	4798      	blx	r3
 800725a:	3601      	adds	r6, #1
 800725c:	e7ee      	b.n	800723c <__libc_init_array+0xc>
 800725e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007262:	4798      	blx	r3
 8007264:	3601      	adds	r6, #1
 8007266:	e7f2      	b.n	800724e <__libc_init_array+0x1e>
 8007268:	08007ac8 	.word	0x08007ac8
 800726c:	08007ac8 	.word	0x08007ac8
 8007270:	08007ac8 	.word	0x08007ac8
 8007274:	08007acc 	.word	0x08007acc

08007278 <memcpy>:
 8007278:	440a      	add	r2, r1
 800727a:	4291      	cmp	r1, r2
 800727c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007280:	d100      	bne.n	8007284 <memcpy+0xc>
 8007282:	4770      	bx	lr
 8007284:	b510      	push	{r4, lr}
 8007286:	f811 4b01 	ldrb.w	r4, [r1], #1
 800728a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800728e:	4291      	cmp	r1, r2
 8007290:	d1f9      	bne.n	8007286 <memcpy+0xe>
 8007292:	bd10      	pop	{r4, pc}

08007294 <atan2>:
 8007294:	f000 b830 	b.w	80072f8 <__ieee754_atan2>

08007298 <fmod>:
 8007298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800729a:	ed2d 8b02 	vpush	{d8}
 800729e:	ec57 6b10 	vmov	r6, r7, d0
 80072a2:	ec55 4b11 	vmov	r4, r5, d1
 80072a6:	f000 f8ed 	bl	8007484 <__ieee754_fmod>
 80072aa:	4622      	mov	r2, r4
 80072ac:	462b      	mov	r3, r5
 80072ae:	4630      	mov	r0, r6
 80072b0:	4639      	mov	r1, r7
 80072b2:	eeb0 8a40 	vmov.f32	s16, s0
 80072b6:	eef0 8a60 	vmov.f32	s17, s1
 80072ba:	f7f9 fbdb 	bl	8000a74 <__aeabi_dcmpun>
 80072be:	b990      	cbnz	r0, 80072e6 <fmod+0x4e>
 80072c0:	2200      	movs	r2, #0
 80072c2:	2300      	movs	r3, #0
 80072c4:	4620      	mov	r0, r4
 80072c6:	4629      	mov	r1, r5
 80072c8:	f7f9 fba2 	bl	8000a10 <__aeabi_dcmpeq>
 80072cc:	b158      	cbz	r0, 80072e6 <fmod+0x4e>
 80072ce:	f7ff ffa9 	bl	8007224 <__errno>
 80072d2:	2321      	movs	r3, #33	; 0x21
 80072d4:	6003      	str	r3, [r0, #0]
 80072d6:	2200      	movs	r2, #0
 80072d8:	2300      	movs	r3, #0
 80072da:	4610      	mov	r0, r2
 80072dc:	4619      	mov	r1, r3
 80072de:	f7f9 fa59 	bl	8000794 <__aeabi_ddiv>
 80072e2:	ec41 0b18 	vmov	d8, r0, r1
 80072e6:	eeb0 0a48 	vmov.f32	s0, s16
 80072ea:	eef0 0a68 	vmov.f32	s1, s17
 80072ee:	ecbd 8b02 	vpop	{d8}
 80072f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072f4:	0000      	movs	r0, r0
	...

080072f8 <__ieee754_atan2>:
 80072f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072fc:	ec57 6b11 	vmov	r6, r7, d1
 8007300:	4273      	negs	r3, r6
 8007302:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8007480 <__ieee754_atan2+0x188>
 8007306:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800730a:	4333      	orrs	r3, r6
 800730c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007310:	4543      	cmp	r3, r8
 8007312:	ec51 0b10 	vmov	r0, r1, d0
 8007316:	ee11 5a10 	vmov	r5, s2
 800731a:	d80a      	bhi.n	8007332 <__ieee754_atan2+0x3a>
 800731c:	4244      	negs	r4, r0
 800731e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007322:	4304      	orrs	r4, r0
 8007324:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8007328:	4544      	cmp	r4, r8
 800732a:	ee10 9a10 	vmov	r9, s0
 800732e:	468e      	mov	lr, r1
 8007330:	d907      	bls.n	8007342 <__ieee754_atan2+0x4a>
 8007332:	4632      	mov	r2, r6
 8007334:	463b      	mov	r3, r7
 8007336:	f7f8 ff4d 	bl	80001d4 <__adddf3>
 800733a:	ec41 0b10 	vmov	d0, r0, r1
 800733e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007342:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8007346:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800734a:	4334      	orrs	r4, r6
 800734c:	d103      	bne.n	8007356 <__ieee754_atan2+0x5e>
 800734e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007352:	f000 b9a5 	b.w	80076a0 <atan>
 8007356:	17bc      	asrs	r4, r7, #30
 8007358:	f004 0402 	and.w	r4, r4, #2
 800735c:	ea53 0909 	orrs.w	r9, r3, r9
 8007360:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8007364:	d107      	bne.n	8007376 <__ieee754_atan2+0x7e>
 8007366:	2c02      	cmp	r4, #2
 8007368:	d05f      	beq.n	800742a <__ieee754_atan2+0x132>
 800736a:	2c03      	cmp	r4, #3
 800736c:	d1e5      	bne.n	800733a <__ieee754_atan2+0x42>
 800736e:	a140      	add	r1, pc, #256	; (adr r1, 8007470 <__ieee754_atan2+0x178>)
 8007370:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007374:	e7e1      	b.n	800733a <__ieee754_atan2+0x42>
 8007376:	4315      	orrs	r5, r2
 8007378:	d106      	bne.n	8007388 <__ieee754_atan2+0x90>
 800737a:	f1be 0f00 	cmp.w	lr, #0
 800737e:	da5f      	bge.n	8007440 <__ieee754_atan2+0x148>
 8007380:	a13d      	add	r1, pc, #244	; (adr r1, 8007478 <__ieee754_atan2+0x180>)
 8007382:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007386:	e7d8      	b.n	800733a <__ieee754_atan2+0x42>
 8007388:	4542      	cmp	r2, r8
 800738a:	d10f      	bne.n	80073ac <__ieee754_atan2+0xb4>
 800738c:	4293      	cmp	r3, r2
 800738e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007392:	d107      	bne.n	80073a4 <__ieee754_atan2+0xac>
 8007394:	2c02      	cmp	r4, #2
 8007396:	d84c      	bhi.n	8007432 <__ieee754_atan2+0x13a>
 8007398:	4b33      	ldr	r3, [pc, #204]	; (8007468 <__ieee754_atan2+0x170>)
 800739a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800739e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80073a2:	e7ca      	b.n	800733a <__ieee754_atan2+0x42>
 80073a4:	2c02      	cmp	r4, #2
 80073a6:	d848      	bhi.n	800743a <__ieee754_atan2+0x142>
 80073a8:	4b30      	ldr	r3, [pc, #192]	; (800746c <__ieee754_atan2+0x174>)
 80073aa:	e7f6      	b.n	800739a <__ieee754_atan2+0xa2>
 80073ac:	4543      	cmp	r3, r8
 80073ae:	d0e4      	beq.n	800737a <__ieee754_atan2+0x82>
 80073b0:	1a9b      	subs	r3, r3, r2
 80073b2:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80073b6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80073ba:	da1e      	bge.n	80073fa <__ieee754_atan2+0x102>
 80073bc:	2f00      	cmp	r7, #0
 80073be:	da01      	bge.n	80073c4 <__ieee754_atan2+0xcc>
 80073c0:	323c      	adds	r2, #60	; 0x3c
 80073c2:	db1e      	blt.n	8007402 <__ieee754_atan2+0x10a>
 80073c4:	4632      	mov	r2, r6
 80073c6:	463b      	mov	r3, r7
 80073c8:	f7f9 f9e4 	bl	8000794 <__aeabi_ddiv>
 80073cc:	ec41 0b10 	vmov	d0, r0, r1
 80073d0:	f000 fb06 	bl	80079e0 <fabs>
 80073d4:	f000 f964 	bl	80076a0 <atan>
 80073d8:	ec51 0b10 	vmov	r0, r1, d0
 80073dc:	2c01      	cmp	r4, #1
 80073de:	d013      	beq.n	8007408 <__ieee754_atan2+0x110>
 80073e0:	2c02      	cmp	r4, #2
 80073e2:	d015      	beq.n	8007410 <__ieee754_atan2+0x118>
 80073e4:	2c00      	cmp	r4, #0
 80073e6:	d0a8      	beq.n	800733a <__ieee754_atan2+0x42>
 80073e8:	a317      	add	r3, pc, #92	; (adr r3, 8007448 <__ieee754_atan2+0x150>)
 80073ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ee:	f7f8 feef 	bl	80001d0 <__aeabi_dsub>
 80073f2:	a317      	add	r3, pc, #92	; (adr r3, 8007450 <__ieee754_atan2+0x158>)
 80073f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f8:	e014      	b.n	8007424 <__ieee754_atan2+0x12c>
 80073fa:	a117      	add	r1, pc, #92	; (adr r1, 8007458 <__ieee754_atan2+0x160>)
 80073fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007400:	e7ec      	b.n	80073dc <__ieee754_atan2+0xe4>
 8007402:	2000      	movs	r0, #0
 8007404:	2100      	movs	r1, #0
 8007406:	e7e9      	b.n	80073dc <__ieee754_atan2+0xe4>
 8007408:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800740c:	4619      	mov	r1, r3
 800740e:	e794      	b.n	800733a <__ieee754_atan2+0x42>
 8007410:	a30d      	add	r3, pc, #52	; (adr r3, 8007448 <__ieee754_atan2+0x150>)
 8007412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007416:	f7f8 fedb 	bl	80001d0 <__aeabi_dsub>
 800741a:	4602      	mov	r2, r0
 800741c:	460b      	mov	r3, r1
 800741e:	a10c      	add	r1, pc, #48	; (adr r1, 8007450 <__ieee754_atan2+0x158>)
 8007420:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007424:	f7f8 fed4 	bl	80001d0 <__aeabi_dsub>
 8007428:	e787      	b.n	800733a <__ieee754_atan2+0x42>
 800742a:	a109      	add	r1, pc, #36	; (adr r1, 8007450 <__ieee754_atan2+0x158>)
 800742c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007430:	e783      	b.n	800733a <__ieee754_atan2+0x42>
 8007432:	a10b      	add	r1, pc, #44	; (adr r1, 8007460 <__ieee754_atan2+0x168>)
 8007434:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007438:	e77f      	b.n	800733a <__ieee754_atan2+0x42>
 800743a:	2000      	movs	r0, #0
 800743c:	2100      	movs	r1, #0
 800743e:	e77c      	b.n	800733a <__ieee754_atan2+0x42>
 8007440:	a105      	add	r1, pc, #20	; (adr r1, 8007458 <__ieee754_atan2+0x160>)
 8007442:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007446:	e778      	b.n	800733a <__ieee754_atan2+0x42>
 8007448:	33145c07 	.word	0x33145c07
 800744c:	3ca1a626 	.word	0x3ca1a626
 8007450:	54442d18 	.word	0x54442d18
 8007454:	400921fb 	.word	0x400921fb
 8007458:	54442d18 	.word	0x54442d18
 800745c:	3ff921fb 	.word	0x3ff921fb
 8007460:	54442d18 	.word	0x54442d18
 8007464:	3fe921fb 	.word	0x3fe921fb
 8007468:	08007a40 	.word	0x08007a40
 800746c:	08007a58 	.word	0x08007a58
 8007470:	54442d18 	.word	0x54442d18
 8007474:	c00921fb 	.word	0xc00921fb
 8007478:	54442d18 	.word	0x54442d18
 800747c:	bff921fb 	.word	0xbff921fb
 8007480:	7ff00000 	.word	0x7ff00000

08007484 <__ieee754_fmod>:
 8007484:	ec53 2b11 	vmov	r2, r3, d1
 8007488:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 800748c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007490:	ea5c 0402 	orrs.w	r4, ip, r2
 8007494:	ec51 0b10 	vmov	r0, r1, d0
 8007498:	ee11 7a10 	vmov	r7, s2
 800749c:	ee11 ea10 	vmov	lr, s2
 80074a0:	461e      	mov	r6, r3
 80074a2:	d00c      	beq.n	80074be <__ieee754_fmod+0x3a>
 80074a4:	4c78      	ldr	r4, [pc, #480]	; (8007688 <__ieee754_fmod+0x204>)
 80074a6:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 80074aa:	45a0      	cmp	r8, r4
 80074ac:	4689      	mov	r9, r1
 80074ae:	dc06      	bgt.n	80074be <__ieee754_fmod+0x3a>
 80074b0:	4254      	negs	r4, r2
 80074b2:	4d76      	ldr	r5, [pc, #472]	; (800768c <__ieee754_fmod+0x208>)
 80074b4:	4314      	orrs	r4, r2
 80074b6:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 80074ba:	42ac      	cmp	r4, r5
 80074bc:	d909      	bls.n	80074d2 <__ieee754_fmod+0x4e>
 80074be:	f7f9 f83f 	bl	8000540 <__aeabi_dmul>
 80074c2:	4602      	mov	r2, r0
 80074c4:	460b      	mov	r3, r1
 80074c6:	f7f9 f965 	bl	8000794 <__aeabi_ddiv>
 80074ca:	ec41 0b10 	vmov	d0, r0, r1
 80074ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074d2:	45e0      	cmp	r8, ip
 80074d4:	ee10 aa10 	vmov	sl, s0
 80074d8:	ee10 4a10 	vmov	r4, s0
 80074dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80074e0:	dc09      	bgt.n	80074f6 <__ieee754_fmod+0x72>
 80074e2:	dbf2      	blt.n	80074ca <__ieee754_fmod+0x46>
 80074e4:	4290      	cmp	r0, r2
 80074e6:	d3f0      	bcc.n	80074ca <__ieee754_fmod+0x46>
 80074e8:	d105      	bne.n	80074f6 <__ieee754_fmod+0x72>
 80074ea:	4b69      	ldr	r3, [pc, #420]	; (8007690 <__ieee754_fmod+0x20c>)
 80074ec:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 80074f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80074f4:	e7e9      	b.n	80074ca <__ieee754_fmod+0x46>
 80074f6:	4a65      	ldr	r2, [pc, #404]	; (800768c <__ieee754_fmod+0x208>)
 80074f8:	ea19 0f02 	tst.w	r9, r2
 80074fc:	d148      	bne.n	8007590 <__ieee754_fmod+0x10c>
 80074fe:	f1b8 0f00 	cmp.w	r8, #0
 8007502:	d13d      	bne.n	8007580 <__ieee754_fmod+0xfc>
 8007504:	4963      	ldr	r1, [pc, #396]	; (8007694 <__ieee754_fmod+0x210>)
 8007506:	4653      	mov	r3, sl
 8007508:	2b00      	cmp	r3, #0
 800750a:	dc36      	bgt.n	800757a <__ieee754_fmod+0xf6>
 800750c:	4216      	tst	r6, r2
 800750e:	d14f      	bne.n	80075b0 <__ieee754_fmod+0x12c>
 8007510:	f1bc 0f00 	cmp.w	ip, #0
 8007514:	d144      	bne.n	80075a0 <__ieee754_fmod+0x11c>
 8007516:	4a5f      	ldr	r2, [pc, #380]	; (8007694 <__ieee754_fmod+0x210>)
 8007518:	463b      	mov	r3, r7
 800751a:	2b00      	cmp	r3, #0
 800751c:	dc3d      	bgt.n	800759a <__ieee754_fmod+0x116>
 800751e:	485e      	ldr	r0, [pc, #376]	; (8007698 <__ieee754_fmod+0x214>)
 8007520:	4281      	cmp	r1, r0
 8007522:	db4a      	blt.n	80075ba <__ieee754_fmod+0x136>
 8007524:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800752c:	485a      	ldr	r0, [pc, #360]	; (8007698 <__ieee754_fmod+0x214>)
 800752e:	4282      	cmp	r2, r0
 8007530:	db57      	blt.n	80075e2 <__ieee754_fmod+0x15e>
 8007532:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8007536:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800753a:	1a89      	subs	r1, r1, r2
 800753c:	1b98      	subs	r0, r3, r6
 800753e:	eba4 070e 	sub.w	r7, r4, lr
 8007542:	2900      	cmp	r1, #0
 8007544:	d162      	bne.n	800760c <__ieee754_fmod+0x188>
 8007546:	4574      	cmp	r4, lr
 8007548:	bf38      	it	cc
 800754a:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 800754e:	2800      	cmp	r0, #0
 8007550:	bfa4      	itt	ge
 8007552:	463c      	movge	r4, r7
 8007554:	4603      	movge	r3, r0
 8007556:	ea53 0104 	orrs.w	r1, r3, r4
 800755a:	d0c6      	beq.n	80074ea <__ieee754_fmod+0x66>
 800755c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007560:	db69      	blt.n	8007636 <__ieee754_fmod+0x1b2>
 8007562:	494d      	ldr	r1, [pc, #308]	; (8007698 <__ieee754_fmod+0x214>)
 8007564:	428a      	cmp	r2, r1
 8007566:	db6c      	blt.n	8007642 <__ieee754_fmod+0x1be>
 8007568:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800756c:	432b      	orrs	r3, r5
 800756e:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8007572:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007576:	4620      	mov	r0, r4
 8007578:	e7a7      	b.n	80074ca <__ieee754_fmod+0x46>
 800757a:	3901      	subs	r1, #1
 800757c:	005b      	lsls	r3, r3, #1
 800757e:	e7c3      	b.n	8007508 <__ieee754_fmod+0x84>
 8007580:	4945      	ldr	r1, [pc, #276]	; (8007698 <__ieee754_fmod+0x214>)
 8007582:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8007586:	2b00      	cmp	r3, #0
 8007588:	ddc0      	ble.n	800750c <__ieee754_fmod+0x88>
 800758a:	3901      	subs	r1, #1
 800758c:	005b      	lsls	r3, r3, #1
 800758e:	e7fa      	b.n	8007586 <__ieee754_fmod+0x102>
 8007590:	ea4f 5128 	mov.w	r1, r8, asr #20
 8007594:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007598:	e7b8      	b.n	800750c <__ieee754_fmod+0x88>
 800759a:	3a01      	subs	r2, #1
 800759c:	005b      	lsls	r3, r3, #1
 800759e:	e7bc      	b.n	800751a <__ieee754_fmod+0x96>
 80075a0:	4a3d      	ldr	r2, [pc, #244]	; (8007698 <__ieee754_fmod+0x214>)
 80075a2:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	ddb9      	ble.n	800751e <__ieee754_fmod+0x9a>
 80075aa:	3a01      	subs	r2, #1
 80075ac:	005b      	lsls	r3, r3, #1
 80075ae:	e7fa      	b.n	80075a6 <__ieee754_fmod+0x122>
 80075b0:	ea4f 522c 	mov.w	r2, ip, asr #20
 80075b4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80075b8:	e7b1      	b.n	800751e <__ieee754_fmod+0x9a>
 80075ba:	1a40      	subs	r0, r0, r1
 80075bc:	281f      	cmp	r0, #31
 80075be:	dc0a      	bgt.n	80075d6 <__ieee754_fmod+0x152>
 80075c0:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 80075c4:	fa08 f800 	lsl.w	r8, r8, r0
 80075c8:	fa2a f303 	lsr.w	r3, sl, r3
 80075cc:	ea43 0308 	orr.w	r3, r3, r8
 80075d0:	fa0a f400 	lsl.w	r4, sl, r0
 80075d4:	e7aa      	b.n	800752c <__ieee754_fmod+0xa8>
 80075d6:	4b31      	ldr	r3, [pc, #196]	; (800769c <__ieee754_fmod+0x218>)
 80075d8:	1a5b      	subs	r3, r3, r1
 80075da:	fa0a f303 	lsl.w	r3, sl, r3
 80075de:	2400      	movs	r4, #0
 80075e0:	e7a4      	b.n	800752c <__ieee754_fmod+0xa8>
 80075e2:	1a80      	subs	r0, r0, r2
 80075e4:	281f      	cmp	r0, #31
 80075e6:	dc0a      	bgt.n	80075fe <__ieee754_fmod+0x17a>
 80075e8:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 80075ec:	fa0c fc00 	lsl.w	ip, ip, r0
 80075f0:	fa27 f606 	lsr.w	r6, r7, r6
 80075f4:	ea46 060c 	orr.w	r6, r6, ip
 80075f8:	fa07 fe00 	lsl.w	lr, r7, r0
 80075fc:	e79d      	b.n	800753a <__ieee754_fmod+0xb6>
 80075fe:	4e27      	ldr	r6, [pc, #156]	; (800769c <__ieee754_fmod+0x218>)
 8007600:	1ab6      	subs	r6, r6, r2
 8007602:	fa07 f606 	lsl.w	r6, r7, r6
 8007606:	f04f 0e00 	mov.w	lr, #0
 800760a:	e796      	b.n	800753a <__ieee754_fmod+0xb6>
 800760c:	4574      	cmp	r4, lr
 800760e:	bf38      	it	cc
 8007610:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 8007614:	2800      	cmp	r0, #0
 8007616:	da05      	bge.n	8007624 <__ieee754_fmod+0x1a0>
 8007618:	0fe0      	lsrs	r0, r4, #31
 800761a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800761e:	0064      	lsls	r4, r4, #1
 8007620:	3901      	subs	r1, #1
 8007622:	e78b      	b.n	800753c <__ieee754_fmod+0xb8>
 8007624:	ea50 0307 	orrs.w	r3, r0, r7
 8007628:	f43f af5f 	beq.w	80074ea <__ieee754_fmod+0x66>
 800762c:	0ffb      	lsrs	r3, r7, #31
 800762e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8007632:	007c      	lsls	r4, r7, #1
 8007634:	e7f4      	b.n	8007620 <__ieee754_fmod+0x19c>
 8007636:	0fe1      	lsrs	r1, r4, #31
 8007638:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800763c:	0064      	lsls	r4, r4, #1
 800763e:	3a01      	subs	r2, #1
 8007640:	e78c      	b.n	800755c <__ieee754_fmod+0xd8>
 8007642:	1a89      	subs	r1, r1, r2
 8007644:	2914      	cmp	r1, #20
 8007646:	dc0a      	bgt.n	800765e <__ieee754_fmod+0x1da>
 8007648:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800764c:	fa03 f202 	lsl.w	r2, r3, r2
 8007650:	40cc      	lsrs	r4, r1
 8007652:	4322      	orrs	r2, r4
 8007654:	410b      	asrs	r3, r1
 8007656:	ea43 0105 	orr.w	r1, r3, r5
 800765a:	4610      	mov	r0, r2
 800765c:	e735      	b.n	80074ca <__ieee754_fmod+0x46>
 800765e:	291f      	cmp	r1, #31
 8007660:	dc07      	bgt.n	8007672 <__ieee754_fmod+0x1ee>
 8007662:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8007666:	40cc      	lsrs	r4, r1
 8007668:	fa03 f202 	lsl.w	r2, r3, r2
 800766c:	4322      	orrs	r2, r4
 800766e:	462b      	mov	r3, r5
 8007670:	e7f1      	b.n	8007656 <__ieee754_fmod+0x1d2>
 8007672:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8007676:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800767a:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800767e:	32e2      	adds	r2, #226	; 0xe2
 8007680:	fa43 f202 	asr.w	r2, r3, r2
 8007684:	e7f3      	b.n	800766e <__ieee754_fmod+0x1ea>
 8007686:	bf00      	nop
 8007688:	7fefffff 	.word	0x7fefffff
 800768c:	7ff00000 	.word	0x7ff00000
 8007690:	08007a70 	.word	0x08007a70
 8007694:	fffffbed 	.word	0xfffffbed
 8007698:	fffffc02 	.word	0xfffffc02
 800769c:	fffffbe2 	.word	0xfffffbe2

080076a0 <atan>:
 80076a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a4:	ec55 4b10 	vmov	r4, r5, d0
 80076a8:	4bc3      	ldr	r3, [pc, #780]	; (80079b8 <atan+0x318>)
 80076aa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80076ae:	429e      	cmp	r6, r3
 80076b0:	46ab      	mov	fp, r5
 80076b2:	dd18      	ble.n	80076e6 <atan+0x46>
 80076b4:	4bc1      	ldr	r3, [pc, #772]	; (80079bc <atan+0x31c>)
 80076b6:	429e      	cmp	r6, r3
 80076b8:	dc01      	bgt.n	80076be <atan+0x1e>
 80076ba:	d109      	bne.n	80076d0 <atan+0x30>
 80076bc:	b144      	cbz	r4, 80076d0 <atan+0x30>
 80076be:	4622      	mov	r2, r4
 80076c0:	462b      	mov	r3, r5
 80076c2:	4620      	mov	r0, r4
 80076c4:	4629      	mov	r1, r5
 80076c6:	f7f8 fd85 	bl	80001d4 <__adddf3>
 80076ca:	4604      	mov	r4, r0
 80076cc:	460d      	mov	r5, r1
 80076ce:	e006      	b.n	80076de <atan+0x3e>
 80076d0:	f1bb 0f00 	cmp.w	fp, #0
 80076d4:	f300 8131 	bgt.w	800793a <atan+0x29a>
 80076d8:	a59b      	add	r5, pc, #620	; (adr r5, 8007948 <atan+0x2a8>)
 80076da:	e9d5 4500 	ldrd	r4, r5, [r5]
 80076de:	ec45 4b10 	vmov	d0, r4, r5
 80076e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076e6:	4bb6      	ldr	r3, [pc, #728]	; (80079c0 <atan+0x320>)
 80076e8:	429e      	cmp	r6, r3
 80076ea:	dc14      	bgt.n	8007716 <atan+0x76>
 80076ec:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80076f0:	429e      	cmp	r6, r3
 80076f2:	dc0d      	bgt.n	8007710 <atan+0x70>
 80076f4:	a396      	add	r3, pc, #600	; (adr r3, 8007950 <atan+0x2b0>)
 80076f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fa:	ee10 0a10 	vmov	r0, s0
 80076fe:	4629      	mov	r1, r5
 8007700:	f7f8 fd68 	bl	80001d4 <__adddf3>
 8007704:	4baf      	ldr	r3, [pc, #700]	; (80079c4 <atan+0x324>)
 8007706:	2200      	movs	r2, #0
 8007708:	f7f9 f9aa 	bl	8000a60 <__aeabi_dcmpgt>
 800770c:	2800      	cmp	r0, #0
 800770e:	d1e6      	bne.n	80076de <atan+0x3e>
 8007710:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007714:	e02b      	b.n	800776e <atan+0xce>
 8007716:	f000 f963 	bl	80079e0 <fabs>
 800771a:	4bab      	ldr	r3, [pc, #684]	; (80079c8 <atan+0x328>)
 800771c:	429e      	cmp	r6, r3
 800771e:	ec55 4b10 	vmov	r4, r5, d0
 8007722:	f300 80bf 	bgt.w	80078a4 <atan+0x204>
 8007726:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800772a:	429e      	cmp	r6, r3
 800772c:	f300 80a0 	bgt.w	8007870 <atan+0x1d0>
 8007730:	ee10 2a10 	vmov	r2, s0
 8007734:	ee10 0a10 	vmov	r0, s0
 8007738:	462b      	mov	r3, r5
 800773a:	4629      	mov	r1, r5
 800773c:	f7f8 fd4a 	bl	80001d4 <__adddf3>
 8007740:	4ba0      	ldr	r3, [pc, #640]	; (80079c4 <atan+0x324>)
 8007742:	2200      	movs	r2, #0
 8007744:	f7f8 fd44 	bl	80001d0 <__aeabi_dsub>
 8007748:	2200      	movs	r2, #0
 800774a:	4606      	mov	r6, r0
 800774c:	460f      	mov	r7, r1
 800774e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007752:	4620      	mov	r0, r4
 8007754:	4629      	mov	r1, r5
 8007756:	f7f8 fd3d 	bl	80001d4 <__adddf3>
 800775a:	4602      	mov	r2, r0
 800775c:	460b      	mov	r3, r1
 800775e:	4630      	mov	r0, r6
 8007760:	4639      	mov	r1, r7
 8007762:	f7f9 f817 	bl	8000794 <__aeabi_ddiv>
 8007766:	f04f 0a00 	mov.w	sl, #0
 800776a:	4604      	mov	r4, r0
 800776c:	460d      	mov	r5, r1
 800776e:	4622      	mov	r2, r4
 8007770:	462b      	mov	r3, r5
 8007772:	4620      	mov	r0, r4
 8007774:	4629      	mov	r1, r5
 8007776:	f7f8 fee3 	bl	8000540 <__aeabi_dmul>
 800777a:	4602      	mov	r2, r0
 800777c:	460b      	mov	r3, r1
 800777e:	4680      	mov	r8, r0
 8007780:	4689      	mov	r9, r1
 8007782:	f7f8 fedd 	bl	8000540 <__aeabi_dmul>
 8007786:	a374      	add	r3, pc, #464	; (adr r3, 8007958 <atan+0x2b8>)
 8007788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778c:	4606      	mov	r6, r0
 800778e:	460f      	mov	r7, r1
 8007790:	f7f8 fed6 	bl	8000540 <__aeabi_dmul>
 8007794:	a372      	add	r3, pc, #456	; (adr r3, 8007960 <atan+0x2c0>)
 8007796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779a:	f7f8 fd1b 	bl	80001d4 <__adddf3>
 800779e:	4632      	mov	r2, r6
 80077a0:	463b      	mov	r3, r7
 80077a2:	f7f8 fecd 	bl	8000540 <__aeabi_dmul>
 80077a6:	a370      	add	r3, pc, #448	; (adr r3, 8007968 <atan+0x2c8>)
 80077a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ac:	f7f8 fd12 	bl	80001d4 <__adddf3>
 80077b0:	4632      	mov	r2, r6
 80077b2:	463b      	mov	r3, r7
 80077b4:	f7f8 fec4 	bl	8000540 <__aeabi_dmul>
 80077b8:	a36d      	add	r3, pc, #436	; (adr r3, 8007970 <atan+0x2d0>)
 80077ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077be:	f7f8 fd09 	bl	80001d4 <__adddf3>
 80077c2:	4632      	mov	r2, r6
 80077c4:	463b      	mov	r3, r7
 80077c6:	f7f8 febb 	bl	8000540 <__aeabi_dmul>
 80077ca:	a36b      	add	r3, pc, #428	; (adr r3, 8007978 <atan+0x2d8>)
 80077cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d0:	f7f8 fd00 	bl	80001d4 <__adddf3>
 80077d4:	4632      	mov	r2, r6
 80077d6:	463b      	mov	r3, r7
 80077d8:	f7f8 feb2 	bl	8000540 <__aeabi_dmul>
 80077dc:	a368      	add	r3, pc, #416	; (adr r3, 8007980 <atan+0x2e0>)
 80077de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e2:	f7f8 fcf7 	bl	80001d4 <__adddf3>
 80077e6:	4642      	mov	r2, r8
 80077e8:	464b      	mov	r3, r9
 80077ea:	f7f8 fea9 	bl	8000540 <__aeabi_dmul>
 80077ee:	a366      	add	r3, pc, #408	; (adr r3, 8007988 <atan+0x2e8>)
 80077f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f4:	4680      	mov	r8, r0
 80077f6:	4689      	mov	r9, r1
 80077f8:	4630      	mov	r0, r6
 80077fa:	4639      	mov	r1, r7
 80077fc:	f7f8 fea0 	bl	8000540 <__aeabi_dmul>
 8007800:	a363      	add	r3, pc, #396	; (adr r3, 8007990 <atan+0x2f0>)
 8007802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007806:	f7f8 fce3 	bl	80001d0 <__aeabi_dsub>
 800780a:	4632      	mov	r2, r6
 800780c:	463b      	mov	r3, r7
 800780e:	f7f8 fe97 	bl	8000540 <__aeabi_dmul>
 8007812:	a361      	add	r3, pc, #388	; (adr r3, 8007998 <atan+0x2f8>)
 8007814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007818:	f7f8 fcda 	bl	80001d0 <__aeabi_dsub>
 800781c:	4632      	mov	r2, r6
 800781e:	463b      	mov	r3, r7
 8007820:	f7f8 fe8e 	bl	8000540 <__aeabi_dmul>
 8007824:	a35e      	add	r3, pc, #376	; (adr r3, 80079a0 <atan+0x300>)
 8007826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782a:	f7f8 fcd1 	bl	80001d0 <__aeabi_dsub>
 800782e:	4632      	mov	r2, r6
 8007830:	463b      	mov	r3, r7
 8007832:	f7f8 fe85 	bl	8000540 <__aeabi_dmul>
 8007836:	a35c      	add	r3, pc, #368	; (adr r3, 80079a8 <atan+0x308>)
 8007838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783c:	f7f8 fcc8 	bl	80001d0 <__aeabi_dsub>
 8007840:	4632      	mov	r2, r6
 8007842:	463b      	mov	r3, r7
 8007844:	f7f8 fe7c 	bl	8000540 <__aeabi_dmul>
 8007848:	4602      	mov	r2, r0
 800784a:	460b      	mov	r3, r1
 800784c:	4640      	mov	r0, r8
 800784e:	4649      	mov	r1, r9
 8007850:	f7f8 fcc0 	bl	80001d4 <__adddf3>
 8007854:	4622      	mov	r2, r4
 8007856:	462b      	mov	r3, r5
 8007858:	f7f8 fe72 	bl	8000540 <__aeabi_dmul>
 800785c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8007860:	4602      	mov	r2, r0
 8007862:	460b      	mov	r3, r1
 8007864:	d14b      	bne.n	80078fe <atan+0x25e>
 8007866:	4620      	mov	r0, r4
 8007868:	4629      	mov	r1, r5
 800786a:	f7f8 fcb1 	bl	80001d0 <__aeabi_dsub>
 800786e:	e72c      	b.n	80076ca <atan+0x2a>
 8007870:	ee10 0a10 	vmov	r0, s0
 8007874:	4b53      	ldr	r3, [pc, #332]	; (80079c4 <atan+0x324>)
 8007876:	2200      	movs	r2, #0
 8007878:	4629      	mov	r1, r5
 800787a:	f7f8 fca9 	bl	80001d0 <__aeabi_dsub>
 800787e:	4b51      	ldr	r3, [pc, #324]	; (80079c4 <atan+0x324>)
 8007880:	4606      	mov	r6, r0
 8007882:	460f      	mov	r7, r1
 8007884:	2200      	movs	r2, #0
 8007886:	4620      	mov	r0, r4
 8007888:	4629      	mov	r1, r5
 800788a:	f7f8 fca3 	bl	80001d4 <__adddf3>
 800788e:	4602      	mov	r2, r0
 8007890:	460b      	mov	r3, r1
 8007892:	4630      	mov	r0, r6
 8007894:	4639      	mov	r1, r7
 8007896:	f7f8 ff7d 	bl	8000794 <__aeabi_ddiv>
 800789a:	f04f 0a01 	mov.w	sl, #1
 800789e:	4604      	mov	r4, r0
 80078a0:	460d      	mov	r5, r1
 80078a2:	e764      	b.n	800776e <atan+0xce>
 80078a4:	4b49      	ldr	r3, [pc, #292]	; (80079cc <atan+0x32c>)
 80078a6:	429e      	cmp	r6, r3
 80078a8:	da1d      	bge.n	80078e6 <atan+0x246>
 80078aa:	ee10 0a10 	vmov	r0, s0
 80078ae:	4b48      	ldr	r3, [pc, #288]	; (80079d0 <atan+0x330>)
 80078b0:	2200      	movs	r2, #0
 80078b2:	4629      	mov	r1, r5
 80078b4:	f7f8 fc8c 	bl	80001d0 <__aeabi_dsub>
 80078b8:	4b45      	ldr	r3, [pc, #276]	; (80079d0 <atan+0x330>)
 80078ba:	4606      	mov	r6, r0
 80078bc:	460f      	mov	r7, r1
 80078be:	2200      	movs	r2, #0
 80078c0:	4620      	mov	r0, r4
 80078c2:	4629      	mov	r1, r5
 80078c4:	f7f8 fe3c 	bl	8000540 <__aeabi_dmul>
 80078c8:	4b3e      	ldr	r3, [pc, #248]	; (80079c4 <atan+0x324>)
 80078ca:	2200      	movs	r2, #0
 80078cc:	f7f8 fc82 	bl	80001d4 <__adddf3>
 80078d0:	4602      	mov	r2, r0
 80078d2:	460b      	mov	r3, r1
 80078d4:	4630      	mov	r0, r6
 80078d6:	4639      	mov	r1, r7
 80078d8:	f7f8 ff5c 	bl	8000794 <__aeabi_ddiv>
 80078dc:	f04f 0a02 	mov.w	sl, #2
 80078e0:	4604      	mov	r4, r0
 80078e2:	460d      	mov	r5, r1
 80078e4:	e743      	b.n	800776e <atan+0xce>
 80078e6:	462b      	mov	r3, r5
 80078e8:	ee10 2a10 	vmov	r2, s0
 80078ec:	4939      	ldr	r1, [pc, #228]	; (80079d4 <atan+0x334>)
 80078ee:	2000      	movs	r0, #0
 80078f0:	f7f8 ff50 	bl	8000794 <__aeabi_ddiv>
 80078f4:	f04f 0a03 	mov.w	sl, #3
 80078f8:	4604      	mov	r4, r0
 80078fa:	460d      	mov	r5, r1
 80078fc:	e737      	b.n	800776e <atan+0xce>
 80078fe:	4b36      	ldr	r3, [pc, #216]	; (80079d8 <atan+0x338>)
 8007900:	4e36      	ldr	r6, [pc, #216]	; (80079dc <atan+0x33c>)
 8007902:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790a:	f7f8 fc61 	bl	80001d0 <__aeabi_dsub>
 800790e:	4622      	mov	r2, r4
 8007910:	462b      	mov	r3, r5
 8007912:	f7f8 fc5d 	bl	80001d0 <__aeabi_dsub>
 8007916:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800791a:	4602      	mov	r2, r0
 800791c:	460b      	mov	r3, r1
 800791e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007922:	f7f8 fc55 	bl	80001d0 <__aeabi_dsub>
 8007926:	f1bb 0f00 	cmp.w	fp, #0
 800792a:	4604      	mov	r4, r0
 800792c:	460d      	mov	r5, r1
 800792e:	f6bf aed6 	bge.w	80076de <atan+0x3e>
 8007932:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007936:	461d      	mov	r5, r3
 8007938:	e6d1      	b.n	80076de <atan+0x3e>
 800793a:	a51d      	add	r5, pc, #116	; (adr r5, 80079b0 <atan+0x310>)
 800793c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007940:	e6cd      	b.n	80076de <atan+0x3e>
 8007942:	bf00      	nop
 8007944:	f3af 8000 	nop.w
 8007948:	54442d18 	.word	0x54442d18
 800794c:	bff921fb 	.word	0xbff921fb
 8007950:	8800759c 	.word	0x8800759c
 8007954:	7e37e43c 	.word	0x7e37e43c
 8007958:	e322da11 	.word	0xe322da11
 800795c:	3f90ad3a 	.word	0x3f90ad3a
 8007960:	24760deb 	.word	0x24760deb
 8007964:	3fa97b4b 	.word	0x3fa97b4b
 8007968:	a0d03d51 	.word	0xa0d03d51
 800796c:	3fb10d66 	.word	0x3fb10d66
 8007970:	c54c206e 	.word	0xc54c206e
 8007974:	3fb745cd 	.word	0x3fb745cd
 8007978:	920083ff 	.word	0x920083ff
 800797c:	3fc24924 	.word	0x3fc24924
 8007980:	5555550d 	.word	0x5555550d
 8007984:	3fd55555 	.word	0x3fd55555
 8007988:	2c6a6c2f 	.word	0x2c6a6c2f
 800798c:	bfa2b444 	.word	0xbfa2b444
 8007990:	52defd9a 	.word	0x52defd9a
 8007994:	3fadde2d 	.word	0x3fadde2d
 8007998:	af749a6d 	.word	0xaf749a6d
 800799c:	3fb3b0f2 	.word	0x3fb3b0f2
 80079a0:	fe231671 	.word	0xfe231671
 80079a4:	3fbc71c6 	.word	0x3fbc71c6
 80079a8:	9998ebc4 	.word	0x9998ebc4
 80079ac:	3fc99999 	.word	0x3fc99999
 80079b0:	54442d18 	.word	0x54442d18
 80079b4:	3ff921fb 	.word	0x3ff921fb
 80079b8:	440fffff 	.word	0x440fffff
 80079bc:	7ff00000 	.word	0x7ff00000
 80079c0:	3fdbffff 	.word	0x3fdbffff
 80079c4:	3ff00000 	.word	0x3ff00000
 80079c8:	3ff2ffff 	.word	0x3ff2ffff
 80079cc:	40038000 	.word	0x40038000
 80079d0:	3ff80000 	.word	0x3ff80000
 80079d4:	bff00000 	.word	0xbff00000
 80079d8:	08007aa0 	.word	0x08007aa0
 80079dc:	08007a80 	.word	0x08007a80

080079e0 <fabs>:
 80079e0:	ec51 0b10 	vmov	r0, r1, d0
 80079e4:	ee10 2a10 	vmov	r2, s0
 80079e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80079ec:	ec43 2b10 	vmov	d0, r2, r3
 80079f0:	4770      	bx	lr
	...

080079f4 <_init>:
 80079f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f6:	bf00      	nop
 80079f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079fa:	bc08      	pop	{r3}
 80079fc:	469e      	mov	lr, r3
 80079fe:	4770      	bx	lr

08007a00 <_fini>:
 8007a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a02:	bf00      	nop
 8007a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a06:	bc08      	pop	{r3}
 8007a08:	469e      	mov	lr, r3
 8007a0a:	4770      	bx	lr
