
Workshop_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048f4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08004a84  08004a84  00005a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b8c  08004b8c  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  08004b8c  08004b8c  00005b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b94  08004b94  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b94  08004b94  00005b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b98  08004b98  00005b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004b9c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006060  2**0
                  CONTENTS
 10 .bss          00000338  20000060  20000060  00006060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000398  20000398  00006060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e9e6  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ff6  00000000  00000000  00014a76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d68  00000000  00000000  00016a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a89  00000000  00000000  000177d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002263b  00000000  00000000  00018261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ff3c  00000000  00000000  0003a89c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7d5c  00000000  00000000  0004a7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00122534  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003dc0  00000000  00000000  00122578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  00126338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004a6c 	.word	0x08004a6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08004a6c 	.word	0x08004a6c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fe95 	bl	80012a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f91b 	bl	80007b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 fb15 	bl	8000bac <MX_GPIO_Init>
  MX_ADC1_Init();
 8000582:	f000 f973 	bl	800086c <MX_ADC1_Init>
  MX_TIM4_Init();
 8000586:	f000 fa5f 	bl	8000a48 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 800058a:	f000 fae5 	bl	8000b58 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 800058e:	f000 fa0d 	bl	80009ac <MX_TIM3_Init>
  MX_TIM2_Init();
 8000592:	f000 f9bd 	bl	8000910 <MX_TIM2_Init>
  MX_TIM12_Init();
 8000596:	f000 faa5 	bl	8000ae4 <MX_TIM12_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_ADC_Start_IT(&hadc1);
 800059a:	4871      	ldr	r0, [pc, #452]	@ (8000760 <main+0x1f0>)
 800059c:	f001 f896 	bl	80016cc <HAL_ADC_Start_IT>
  while (1)
  {
	  if (btn_status == 1)
 80005a0:	4b70      	ldr	r3, [pc, #448]	@ (8000764 <main+0x1f4>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	f000 80d8 	beq.w	800075a <main+0x1ea>
	  {
	      uint8_t rcvBuf[1];
	      HAL_StatusTypeDef result;
	      result = HAL_UART_Receive(&huart3, rcvBuf, 1, 10);
 80005aa:	1d39      	adds	r1, r7, #4
 80005ac:	230a      	movs	r3, #10
 80005ae:	2201      	movs	r2, #1
 80005b0:	486d      	ldr	r0, [pc, #436]	@ (8000768 <main+0x1f8>)
 80005b2:	f003 f9f4 	bl	800399e <HAL_UART_Receive>
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]

	      if (result == HAL_OK) {
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	f040 80cc 	bne.w	800075a <main+0x1ea>
	          switch (rcvBuf[0]) {
 80005c2:	793b      	ldrb	r3, [r7, #4]
 80005c4:	3b31      	subs	r3, #49	@ 0x31
 80005c6:	2b03      	cmp	r3, #3
 80005c8:	f200 80c0 	bhi.w	800074c <main+0x1dc>
 80005cc:	a201      	add	r2, pc, #4	@ (adr r2, 80005d4 <main+0x64>)
 80005ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005d2:	bf00      	nop
 80005d4:	080005e5 	.word	0x080005e5
 80005d8:	0800063f 	.word	0x0800063f
 80005dc:	08000699 	.word	0x08000699
 80005e0:	080006f3 	.word	0x080006f3
	              case '1':
	                  ledBlinking1 = !ledBlinking1;
 80005e4:	4b61      	ldr	r3, [pc, #388]	@ (800076c <main+0x1fc>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	bf14      	ite	ne
 80005ec:	2301      	movne	r3, #1
 80005ee:	2300      	moveq	r3, #0
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	f083 0301 	eor.w	r3, r3, #1
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	f003 0301 	and.w	r3, r3, #1
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	4b5b      	ldr	r3, [pc, #364]	@ (800076c <main+0x1fc>)
 8000600:	701a      	strb	r2, [r3, #0]
	                  if (ledBlinking1)
 8000602:	4b5a      	ldr	r3, [pc, #360]	@ (800076c <main+0x1fc>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d009      	beq.n	800061e <main+0xae>
	                  {
	                      HAL_TIM_Base_Start_IT(&htim2);
 800060a:	4859      	ldr	r0, [pc, #356]	@ (8000770 <main+0x200>)
 800060c:	f002 fc8e 	bl	8002f2c <HAL_TIM_Base_Start_IT>
	                      HAL_UART_Transmit(&huart3, (uint8_t *)" - GREEN_ON \r\n", 14, 100);
 8000610:	2364      	movs	r3, #100	@ 0x64
 8000612:	220e      	movs	r2, #14
 8000614:	4957      	ldr	r1, [pc, #348]	@ (8000774 <main+0x204>)
 8000616:	4854      	ldr	r0, [pc, #336]	@ (8000768 <main+0x1f8>)
 8000618:	f003 f936 	bl	8003888 <HAL_UART_Transmit>
	                  {
	                      HAL_TIM_Base_Stop_IT(&htim2);
	                      HAL_UART_Transmit(&huart3, (uint8_t *)" - GREEN_OFF \r\n", 14, 100);
	                      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
	                  }
	                  break;
 800061c:	e09d      	b.n	800075a <main+0x1ea>
	                      HAL_TIM_Base_Stop_IT(&htim2);
 800061e:	4854      	ldr	r0, [pc, #336]	@ (8000770 <main+0x200>)
 8000620:	f002 fcf4 	bl	800300c <HAL_TIM_Base_Stop_IT>
	                      HAL_UART_Transmit(&huart3, (uint8_t *)" - GREEN_OFF \r\n", 14, 100);
 8000624:	2364      	movs	r3, #100	@ 0x64
 8000626:	220e      	movs	r2, #14
 8000628:	4953      	ldr	r1, [pc, #332]	@ (8000778 <main+0x208>)
 800062a:	484f      	ldr	r0, [pc, #316]	@ (8000768 <main+0x1f8>)
 800062c:	f003 f92c 	bl	8003888 <HAL_UART_Transmit>
	                      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000636:	4851      	ldr	r0, [pc, #324]	@ (800077c <main+0x20c>)
 8000638:	f001 ff38 	bl	80024ac <HAL_GPIO_WritePin>
	                  break;
 800063c:	e08d      	b.n	800075a <main+0x1ea>
	              case '2':
	                  ledBlinking2 = !ledBlinking2;
 800063e:	4b50      	ldr	r3, [pc, #320]	@ (8000780 <main+0x210>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	bf14      	ite	ne
 8000646:	2301      	movne	r3, #1
 8000648:	2300      	moveq	r3, #0
 800064a:	b2db      	uxtb	r3, r3
 800064c:	f083 0301 	eor.w	r3, r3, #1
 8000650:	b2db      	uxtb	r3, r3
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	b2da      	uxtb	r2, r3
 8000658:	4b49      	ldr	r3, [pc, #292]	@ (8000780 <main+0x210>)
 800065a:	701a      	strb	r2, [r3, #0]
	                  if (ledBlinking2) 
 800065c:	4b48      	ldr	r3, [pc, #288]	@ (8000780 <main+0x210>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d009      	beq.n	8000678 <main+0x108>
	                  {
	                      HAL_TIM_Base_Start_IT(&htim3);
 8000664:	4847      	ldr	r0, [pc, #284]	@ (8000784 <main+0x214>)
 8000666:	f002 fc61 	bl	8002f2c <HAL_TIM_Base_Start_IT>
	                      HAL_UART_Transmit(&huart3, (uint8_t *)" - ORANGE_ON \r\n", 14, 100);
 800066a:	2364      	movs	r3, #100	@ 0x64
 800066c:	220e      	movs	r2, #14
 800066e:	4946      	ldr	r1, [pc, #280]	@ (8000788 <main+0x218>)
 8000670:	483d      	ldr	r0, [pc, #244]	@ (8000768 <main+0x1f8>)
 8000672:	f003 f909 	bl	8003888 <HAL_UART_Transmit>
	                  {
	                      HAL_TIM_Base_Stop_IT(&htim3);
	                      HAL_UART_Transmit(&huart3, (uint8_t *)" - ORANGE_OFF \r\n", 14, 100);
	                      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
	                  }
	                  break;
 8000676:	e070      	b.n	800075a <main+0x1ea>
	                      HAL_TIM_Base_Stop_IT(&htim3);
 8000678:	4842      	ldr	r0, [pc, #264]	@ (8000784 <main+0x214>)
 800067a:	f002 fcc7 	bl	800300c <HAL_TIM_Base_Stop_IT>
	                      HAL_UART_Transmit(&huart3, (uint8_t *)" - ORANGE_OFF \r\n", 14, 100);
 800067e:	2364      	movs	r3, #100	@ 0x64
 8000680:	220e      	movs	r2, #14
 8000682:	4942      	ldr	r1, [pc, #264]	@ (800078c <main+0x21c>)
 8000684:	4838      	ldr	r0, [pc, #224]	@ (8000768 <main+0x1f8>)
 8000686:	f003 f8ff 	bl	8003888 <HAL_UART_Transmit>
	                      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000690:	483a      	ldr	r0, [pc, #232]	@ (800077c <main+0x20c>)
 8000692:	f001 ff0b 	bl	80024ac <HAL_GPIO_WritePin>
	                  break;
 8000696:	e060      	b.n	800075a <main+0x1ea>
	              case '3':
	                  ledBlinking3 = !ledBlinking3;
 8000698:	4b3d      	ldr	r3, [pc, #244]	@ (8000790 <main+0x220>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	bf14      	ite	ne
 80006a0:	2301      	movne	r3, #1
 80006a2:	2300      	moveq	r3, #0
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	f083 0301 	eor.w	r3, r3, #1
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	f003 0301 	and.w	r3, r3, #1
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	4b37      	ldr	r3, [pc, #220]	@ (8000790 <main+0x220>)
 80006b4:	701a      	strb	r2, [r3, #0]
	                  if (ledBlinking3) 
 80006b6:	4b36      	ldr	r3, [pc, #216]	@ (8000790 <main+0x220>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d009      	beq.n	80006d2 <main+0x162>
	                  {
	                      HAL_TIM_Base_Start_IT(&htim4);
 80006be:	4835      	ldr	r0, [pc, #212]	@ (8000794 <main+0x224>)
 80006c0:	f002 fc34 	bl	8002f2c <HAL_TIM_Base_Start_IT>
	                      HAL_UART_Transmit(&huart3, (uint8_t *)" - RED_ON \r\n", 14, 100);
 80006c4:	2364      	movs	r3, #100	@ 0x64
 80006c6:	220e      	movs	r2, #14
 80006c8:	4933      	ldr	r1, [pc, #204]	@ (8000798 <main+0x228>)
 80006ca:	4827      	ldr	r0, [pc, #156]	@ (8000768 <main+0x1f8>)
 80006cc:	f003 f8dc 	bl	8003888 <HAL_UART_Transmit>
	                  {
	                      HAL_TIM_Base_Stop_IT(&htim4);
	                      HAL_UART_Transmit(&huart3, (uint8_t *)" - RED_OFF \r\n", 14, 100);
	                      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
	                  }
	                  break;
 80006d0:	e043      	b.n	800075a <main+0x1ea>
	                      HAL_TIM_Base_Stop_IT(&htim4);
 80006d2:	4830      	ldr	r0, [pc, #192]	@ (8000794 <main+0x224>)
 80006d4:	f002 fc9a 	bl	800300c <HAL_TIM_Base_Stop_IT>
	                      HAL_UART_Transmit(&huart3, (uint8_t *)" - RED_OFF \r\n", 14, 100);
 80006d8:	2364      	movs	r3, #100	@ 0x64
 80006da:	220e      	movs	r2, #14
 80006dc:	492f      	ldr	r1, [pc, #188]	@ (800079c <main+0x22c>)
 80006de:	4822      	ldr	r0, [pc, #136]	@ (8000768 <main+0x1f8>)
 80006e0:	f003 f8d2 	bl	8003888 <HAL_UART_Transmit>
	                      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006ea:	4824      	ldr	r0, [pc, #144]	@ (800077c <main+0x20c>)
 80006ec:	f001 fede 	bl	80024ac <HAL_GPIO_WritePin>
	                  break;
 80006f0:	e033      	b.n	800075a <main+0x1ea>
	              case '4':
	                  ledBlinking4 = !ledBlinking4;
 80006f2:	4b2b      	ldr	r3, [pc, #172]	@ (80007a0 <main+0x230>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	bf14      	ite	ne
 80006fa:	2301      	movne	r3, #1
 80006fc:	2300      	moveq	r3, #0
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	f083 0301 	eor.w	r3, r3, #1
 8000704:	b2db      	uxtb	r3, r3
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	b2da      	uxtb	r2, r3
 800070c:	4b24      	ldr	r3, [pc, #144]	@ (80007a0 <main+0x230>)
 800070e:	701a      	strb	r2, [r3, #0]
	                  if (ledBlinking4) 
 8000710:	4b23      	ldr	r3, [pc, #140]	@ (80007a0 <main+0x230>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d009      	beq.n	800072c <main+0x1bc>
	                  {
	                      HAL_TIM_Base_Start_IT(&htim12);
 8000718:	4822      	ldr	r0, [pc, #136]	@ (80007a4 <main+0x234>)
 800071a:	f002 fc07 	bl	8002f2c <HAL_TIM_Base_Start_IT>
	                      HAL_UART_Transmit(&huart3, (uint8_t *)" - BLUE_ON \r\n", 14, 100);
 800071e:	2364      	movs	r3, #100	@ 0x64
 8000720:	220e      	movs	r2, #14
 8000722:	4921      	ldr	r1, [pc, #132]	@ (80007a8 <main+0x238>)
 8000724:	4810      	ldr	r0, [pc, #64]	@ (8000768 <main+0x1f8>)
 8000726:	f003 f8af 	bl	8003888 <HAL_UART_Transmit>
	                  {
	                      HAL_TIM_Base_Stop_IT(&htim12);
	                      HAL_UART_Transmit(&huart3, (uint8_t *)" - BLUE_OFF \r\n", 14, 100);
	                      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
	                  }
	                  break;
 800072a:	e016      	b.n	800075a <main+0x1ea>
	                      HAL_TIM_Base_Stop_IT(&htim12);
 800072c:	481d      	ldr	r0, [pc, #116]	@ (80007a4 <main+0x234>)
 800072e:	f002 fc6d 	bl	800300c <HAL_TIM_Base_Stop_IT>
	                      HAL_UART_Transmit(&huart3, (uint8_t *)" - BLUE_OFF \r\n", 14, 100);
 8000732:	2364      	movs	r3, #100	@ 0x64
 8000734:	220e      	movs	r2, #14
 8000736:	491d      	ldr	r1, [pc, #116]	@ (80007ac <main+0x23c>)
 8000738:	480b      	ldr	r0, [pc, #44]	@ (8000768 <main+0x1f8>)
 800073a:	f003 f8a5 	bl	8003888 <HAL_UART_Transmit>
	                      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000744:	480d      	ldr	r0, [pc, #52]	@ (800077c <main+0x20c>)
 8000746:	f001 feb1 	bl	80024ac <HAL_GPIO_WritePin>
	                  break;
 800074a:	e006      	b.n	800075a <main+0x1ea>
	              default:
	                  HAL_UART_Transmit(&huart3, (uint8_t *)" - WRONG_INPUT \r\n", 12, 100);
 800074c:	2364      	movs	r3, #100	@ 0x64
 800074e:	220c      	movs	r2, #12
 8000750:	4917      	ldr	r1, [pc, #92]	@ (80007b0 <main+0x240>)
 8000752:	4805      	ldr	r0, [pc, #20]	@ (8000768 <main+0x1f8>)
 8000754:	f003 f898 	bl	8003888 <HAL_UART_Transmit>
	                  break;
 8000758:	bf00      	nop
	          }
	      }
	  }
      // At the end of while loop print ADC values every 10 seconds
	  Print_ADC_Values();
 800075a:	f000 fa91 	bl	8000c80 <Print_ADC_Values>
	  if (btn_status == 1)
 800075e:	e71f      	b.n	80005a0 <main+0x30>
 8000760:	2000007c 	.word	0x2000007c
 8000764:	20000000 	.word	0x20000000
 8000768:	200001e4 	.word	0x200001e4
 800076c:	2000022c 	.word	0x2000022c
 8000770:	200000c4 	.word	0x200000c4
 8000774:	08004a84 	.word	0x08004a84
 8000778:	08004a94 	.word	0x08004a94
 800077c:	40020c00 	.word	0x40020c00
 8000780:	2000022d 	.word	0x2000022d
 8000784:	2000010c 	.word	0x2000010c
 8000788:	08004aa4 	.word	0x08004aa4
 800078c:	08004ab4 	.word	0x08004ab4
 8000790:	2000022e 	.word	0x2000022e
 8000794:	20000154 	.word	0x20000154
 8000798:	08004ac8 	.word	0x08004ac8
 800079c:	08004ad8 	.word	0x08004ad8
 80007a0:	2000022f 	.word	0x2000022f
 80007a4:	2000019c 	.word	0x2000019c
 80007a8:	08004ae8 	.word	0x08004ae8
 80007ac:	08004af8 	.word	0x08004af8
 80007b0:	08004b08 	.word	0x08004b08

080007b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b094      	sub	sp, #80	@ 0x50
 80007b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ba:	f107 0320 	add.w	r3, r7, #32
 80007be:	2230      	movs	r2, #48	@ 0x30
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f003 fcd2 	bl	800416c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d8:	2300      	movs	r3, #0
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	4b21      	ldr	r3, [pc, #132]	@ (8000864 <SystemClock_Config+0xb0>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e0:	4a20      	ldr	r2, [pc, #128]	@ (8000864 <SystemClock_Config+0xb0>)
 80007e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80007e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000864 <SystemClock_Config+0xb0>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f4:	2300      	movs	r3, #0
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000868 <SystemClock_Config+0xb4>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a1a      	ldr	r2, [pc, #104]	@ (8000868 <SystemClock_Config+0xb4>)
 80007fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000802:	6013      	str	r3, [r2, #0]
 8000804:	4b18      	ldr	r3, [pc, #96]	@ (8000868 <SystemClock_Config+0xb4>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000810:	2301      	movs	r3, #1
 8000812:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000814:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000818:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800081a:	2300      	movs	r3, #0
 800081c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081e:	f107 0320 	add.w	r3, r7, #32
 8000822:	4618      	mov	r0, r3
 8000824:	f001 fe9a 	bl	800255c <HAL_RCC_OscConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800082e:	f000 fa9f 	bl	8000d70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000832:	230f      	movs	r3, #15
 8000834:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000836:	2301      	movs	r3, #1
 8000838:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	2100      	movs	r1, #0
 800084c:	4618      	mov	r0, r3
 800084e:	f002 f8fd 	bl	8002a4c <HAL_RCC_ClockConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000858:	f000 fa8a 	bl	8000d70 <Error_Handler>
  }
}
 800085c:	bf00      	nop
 800085e:	3750      	adds	r7, #80	@ 0x50
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800
 8000868:	40007000 	.word	0x40007000

0800086c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000872:	463b      	mov	r3, r7
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800087e:	4b21      	ldr	r3, [pc, #132]	@ (8000904 <MX_ADC1_Init+0x98>)
 8000880:	4a21      	ldr	r2, [pc, #132]	@ (8000908 <MX_ADC1_Init+0x9c>)
 8000882:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000884:	4b1f      	ldr	r3, [pc, #124]	@ (8000904 <MX_ADC1_Init+0x98>)
 8000886:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800088a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800088c:	4b1d      	ldr	r3, [pc, #116]	@ (8000904 <MX_ADC1_Init+0x98>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000892:	4b1c      	ldr	r3, [pc, #112]	@ (8000904 <MX_ADC1_Init+0x98>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000898:	4b1a      	ldr	r3, [pc, #104]	@ (8000904 <MX_ADC1_Init+0x98>)
 800089a:	2200      	movs	r2, #0
 800089c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800089e:	4b19      	ldr	r3, [pc, #100]	@ (8000904 <MX_ADC1_Init+0x98>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008a6:	4b17      	ldr	r3, [pc, #92]	@ (8000904 <MX_ADC1_Init+0x98>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008ac:	4b15      	ldr	r3, [pc, #84]	@ (8000904 <MX_ADC1_Init+0x98>)
 80008ae:	4a17      	ldr	r2, [pc, #92]	@ (800090c <MX_ADC1_Init+0xa0>)
 80008b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008b2:	4b14      	ldr	r3, [pc, #80]	@ (8000904 <MX_ADC1_Init+0x98>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008b8:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <MX_ADC1_Init+0x98>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008be:	4b11      	ldr	r3, [pc, #68]	@ (8000904 <MX_ADC1_Init+0x98>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000904 <MX_ADC1_Init+0x98>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008cc:	480d      	ldr	r0, [pc, #52]	@ (8000904 <MX_ADC1_Init+0x98>)
 80008ce:	f000 fd5b 	bl	8001388 <HAL_ADC_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008d8:	f000 fa4a 	bl	8000d70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008dc:	2301      	movs	r3, #1
 80008de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008e0:	2301      	movs	r3, #1
 80008e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80008e4:	2307      	movs	r3, #7
 80008e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008e8:	463b      	mov	r3, r7
 80008ea:	4619      	mov	r1, r3
 80008ec:	4805      	ldr	r0, [pc, #20]	@ (8000904 <MX_ADC1_Init+0x98>)
 80008ee:	f001 f907 	bl	8001b00 <HAL_ADC_ConfigChannel>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008f8:	f000 fa3a 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	3710      	adds	r7, #16
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	2000007c 	.word	0x2000007c
 8000908:	40012000 	.word	0x40012000
 800090c:	0f000001 	.word	0x0f000001

08000910 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000916:	f107 0308 	add.w	r3, r7, #8
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000924:	463b      	mov	r3, r7
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800092c:	4b1e      	ldr	r3, [pc, #120]	@ (80009a8 <MX_TIM2_Init+0x98>)
 800092e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000932:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8000934:	4b1c      	ldr	r3, [pc, #112]	@ (80009a8 <MX_TIM2_Init+0x98>)
 8000936:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800093a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093c:	4b1a      	ldr	r3, [pc, #104]	@ (80009a8 <MX_TIM2_Init+0x98>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000942:	4b19      	ldr	r3, [pc, #100]	@ (80009a8 <MX_TIM2_Init+0x98>)
 8000944:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000948:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800094a:	4b17      	ldr	r3, [pc, #92]	@ (80009a8 <MX_TIM2_Init+0x98>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000950:	4b15      	ldr	r3, [pc, #84]	@ (80009a8 <MX_TIM2_Init+0x98>)
 8000952:	2280      	movs	r2, #128	@ 0x80
 8000954:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000956:	4814      	ldr	r0, [pc, #80]	@ (80009a8 <MX_TIM2_Init+0x98>)
 8000958:	f002 fa98 	bl	8002e8c <HAL_TIM_Base_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000962:	f000 fa05 	bl	8000d70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000966:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800096a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800096c:	f107 0308 	add.w	r3, r7, #8
 8000970:	4619      	mov	r1, r3
 8000972:	480d      	ldr	r0, [pc, #52]	@ (80009a8 <MX_TIM2_Init+0x98>)
 8000974:	f002 fc69 	bl	800324a <HAL_TIM_ConfigClockSource>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800097e:	f000 f9f7 	bl	8000d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000982:	2300      	movs	r3, #0
 8000984:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800098a:	463b      	mov	r3, r7
 800098c:	4619      	mov	r1, r3
 800098e:	4806      	ldr	r0, [pc, #24]	@ (80009a8 <MX_TIM2_Init+0x98>)
 8000990:	f002 fe9a 	bl	80036c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800099a:	f000 f9e9 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200000c4 	.word	0x200000c4

080009ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009b2:	f107 0308 	add.w	r3, r7, #8
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c0:	463b      	mov	r3, r7
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a40 <MX_TIM3_Init+0x94>)
 80009ca:	4a1e      	ldr	r2, [pc, #120]	@ (8000a44 <MX_TIM3_Init+0x98>)
 80009cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1999;
 80009ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000a40 <MX_TIM3_Init+0x94>)
 80009d0:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80009d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a40 <MX_TIM3_Init+0x94>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80009dc:	4b18      	ldr	r3, [pc, #96]	@ (8000a40 <MX_TIM3_Init+0x94>)
 80009de:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e4:	4b16      	ldr	r3, [pc, #88]	@ (8000a40 <MX_TIM3_Init+0x94>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009ea:	4b15      	ldr	r3, [pc, #84]	@ (8000a40 <MX_TIM3_Init+0x94>)
 80009ec:	2280      	movs	r2, #128	@ 0x80
 80009ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009f0:	4813      	ldr	r0, [pc, #76]	@ (8000a40 <MX_TIM3_Init+0x94>)
 80009f2:	f002 fa4b 	bl	8002e8c <HAL_TIM_Base_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80009fc:	f000 f9b8 	bl	8000d70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a06:	f107 0308 	add.w	r3, r7, #8
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	480c      	ldr	r0, [pc, #48]	@ (8000a40 <MX_TIM3_Init+0x94>)
 8000a0e:	f002 fc1c 	bl	800324a <HAL_TIM_ConfigClockSource>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000a18:	f000 f9aa 	bl	8000d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a24:	463b      	mov	r3, r7
 8000a26:	4619      	mov	r1, r3
 8000a28:	4805      	ldr	r0, [pc, #20]	@ (8000a40 <MX_TIM3_Init+0x94>)
 8000a2a:	f002 fe4d 	bl	80036c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000a34:	f000 f99c 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a38:	bf00      	nop
 8000a3a:	3718      	adds	r7, #24
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	2000010c 	.word	0x2000010c
 8000a44:	40000400 	.word	0x40000400

08000a48 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a4e:	f107 0308 	add.w	r3, r7, #8
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5c:	463b      	mov	r3, r7
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a64:	4b1d      	ldr	r3, [pc, #116]	@ (8000adc <MX_TIM4_Init+0x94>)
 8000a66:	4a1e      	ldr	r2, [pc, #120]	@ (8000ae0 <MX_TIM4_Init+0x98>)
 8000a68:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 249;
 8000a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000adc <MX_TIM4_Init+0x94>)
 8000a6c:	22f9      	movs	r2, #249	@ 0xf9
 8000a6e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000a70:	4b1a      	ldr	r3, [pc, #104]	@ (8000adc <MX_TIM4_Init+0x94>)
 8000a72:	2210      	movs	r2, #16
 8000a74:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000a76:	4b19      	ldr	r3, [pc, #100]	@ (8000adc <MX_TIM4_Init+0x94>)
 8000a78:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a7c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7e:	4b17      	ldr	r3, [pc, #92]	@ (8000adc <MX_TIM4_Init+0x94>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a84:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <MX_TIM4_Init+0x94>)
 8000a86:	2280      	movs	r2, #128	@ 0x80
 8000a88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a8a:	4814      	ldr	r0, [pc, #80]	@ (8000adc <MX_TIM4_Init+0x94>)
 8000a8c:	f002 f9fe 	bl	8002e8c <HAL_TIM_Base_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000a96:	f000 f96b 	bl	8000d70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000aa0:	f107 0308 	add.w	r3, r7, #8
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	480d      	ldr	r0, [pc, #52]	@ (8000adc <MX_TIM4_Init+0x94>)
 8000aa8:	f002 fbcf 	bl	800324a <HAL_TIM_ConfigClockSource>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000ab2:	f000 f95d 	bl	8000d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000abe:	463b      	mov	r3, r7
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4806      	ldr	r0, [pc, #24]	@ (8000adc <MX_TIM4_Init+0x94>)
 8000ac4:	f002 fe00 	bl	80036c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000ace:	f000 f94f 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000154 	.word	0x20000154
 8000ae0:	40000800 	.word	0x40000800

08000ae4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aea:	463b      	mov	r3, r7
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000af6:	4b16      	ldr	r3, [pc, #88]	@ (8000b50 <MX_TIM12_Init+0x6c>)
 8000af8:	4a16      	ldr	r2, [pc, #88]	@ (8000b54 <MX_TIM12_Init+0x70>)
 8000afa:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 499;
 8000afc:	4b14      	ldr	r3, [pc, #80]	@ (8000b50 <MX_TIM12_Init+0x6c>)
 8000afe:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000b02:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b04:	4b12      	ldr	r3, [pc, #72]	@ (8000b50 <MX_TIM12_Init+0x6c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 8000b0a:	4b11      	ldr	r3, [pc, #68]	@ (8000b50 <MX_TIM12_Init+0x6c>)
 8000b0c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b10:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b12:	4b0f      	ldr	r3, [pc, #60]	@ (8000b50 <MX_TIM12_Init+0x6c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b18:	4b0d      	ldr	r3, [pc, #52]	@ (8000b50 <MX_TIM12_Init+0x6c>)
 8000b1a:	2280      	movs	r2, #128	@ 0x80
 8000b1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8000b1e:	480c      	ldr	r0, [pc, #48]	@ (8000b50 <MX_TIM12_Init+0x6c>)
 8000b20:	f002 f9b4 	bl	8002e8c <HAL_TIM_Base_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 8000b2a:	f000 f921 	bl	8000d70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b32:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8000b34:	463b      	mov	r3, r7
 8000b36:	4619      	mov	r1, r3
 8000b38:	4805      	ldr	r0, [pc, #20]	@ (8000b50 <MX_TIM12_Init+0x6c>)
 8000b3a:	f002 fb86 	bl	800324a <HAL_TIM_ConfigClockSource>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 8000b44:	f000 f914 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8000b48:	bf00      	nop
 8000b4a:	3710      	adds	r7, #16
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	2000019c 	.word	0x2000019c
 8000b54:	40001800 	.word	0x40001800

08000b58 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ba4 <MX_USART3_UART_Init+0x4c>)
 8000b5e:	4a12      	ldr	r2, [pc, #72]	@ (8000ba8 <MX_USART3_UART_Init+0x50>)
 8000b60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b62:	4b10      	ldr	r3, [pc, #64]	@ (8000ba4 <MX_USART3_UART_Init+0x4c>)
 8000b64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba4 <MX_USART3_UART_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <MX_USART3_UART_Init+0x4c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba4 <MX_USART3_UART_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b7c:	4b09      	ldr	r3, [pc, #36]	@ (8000ba4 <MX_USART3_UART_Init+0x4c>)
 8000b7e:	220c      	movs	r2, #12
 8000b80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b82:	4b08      	ldr	r3, [pc, #32]	@ (8000ba4 <MX_USART3_UART_Init+0x4c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b88:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <MX_USART3_UART_Init+0x4c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b8e:	4805      	ldr	r0, [pc, #20]	@ (8000ba4 <MX_USART3_UART_Init+0x4c>)
 8000b90:	f002 fe2a 	bl	80037e8 <HAL_UART_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b9a:	f000 f8e9 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	200001e4 	.word	0x200001e4
 8000ba8:	40004800 	.word	0x40004800

08000bac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b088      	sub	sp, #32
 8000bb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb2:	f107 030c 	add.w	r3, r7, #12
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
 8000bc0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	4b2b      	ldr	r3, [pc, #172]	@ (8000c74 <MX_GPIO_Init+0xc8>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	4a2a      	ldr	r2, [pc, #168]	@ (8000c74 <MX_GPIO_Init+0xc8>)
 8000bcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd2:	4b28      	ldr	r3, [pc, #160]	@ (8000c74 <MX_GPIO_Init+0xc8>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	4b24      	ldr	r3, [pc, #144]	@ (8000c74 <MX_GPIO_Init+0xc8>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	4a23      	ldr	r2, [pc, #140]	@ (8000c74 <MX_GPIO_Init+0xc8>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bee:	4b21      	ldr	r3, [pc, #132]	@ (8000c74 <MX_GPIO_Init+0xc8>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	603b      	str	r3, [r7, #0]
 8000bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8000c74 <MX_GPIO_Init+0xc8>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	4a1c      	ldr	r2, [pc, #112]	@ (8000c74 <MX_GPIO_Init+0xc8>)
 8000c04:	f043 0308 	orr.w	r3, r3, #8
 8000c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c74 <MX_GPIO_Init+0xc8>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	f003 0308 	and.w	r3, r3, #8
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000c1c:	4816      	ldr	r0, [pc, #88]	@ (8000c78 <MX_GPIO_Init+0xcc>)
 8000c1e:	f001 fc45 	bl	80024ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_LIGHT_Pin */
  GPIO_InitStruct.Pin = BTN_LIGHT_Pin;
 8000c22:	2301      	movs	r3, #1
 8000c24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c26:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_LIGHT_GPIO_Port, &GPIO_InitStruct);
 8000c30:	f107 030c 	add.w	r3, r7, #12
 8000c34:	4619      	mov	r1, r3
 8000c36:	4811      	ldr	r0, [pc, #68]	@ (8000c7c <MX_GPIO_Init+0xd0>)
 8000c38:	f001 fa9c 	bl	8002174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c3c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000c40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	2301      	movs	r3, #1
 8000c44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c4e:	f107 030c 	add.w	r3, r7, #12
 8000c52:	4619      	mov	r1, r3
 8000c54:	4808      	ldr	r0, [pc, #32]	@ (8000c78 <MX_GPIO_Init+0xcc>)
 8000c56:	f001 fa8d 	bl	8002174 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	2006      	movs	r0, #6
 8000c60:	f001 fa51 	bl	8002106 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c64:	2006      	movs	r0, #6
 8000c66:	f001 fa6a 	bl	800213e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c6a:	bf00      	nop
 8000c6c:	3720      	adds	r7, #32
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020c00 	.word	0x40020c00
 8000c7c:	40020000 	.word	0x40020000

08000c80 <Print_ADC_Values>:

/* USER CODE BEGIN 4 */
void Print_ADC_Values(void) {
 8000c80:	b590      	push	{r4, r7, lr}
 8000c82:	b095      	sub	sp, #84	@ 0x54
 8000c84:	af00      	add	r7, sp, #0
    // Variable to track the current ADC channel
    static uint32_t adcValues[POTENTIOMETER_COUNT] = {0}; // Array to store ADC values for each channel
    static uint32_t lastInterrupt = 0;
    uint32_t currentInterrupt = HAL_GetTick();
 8000c86:	f000 fb73 	bl	8001370 <HAL_GetTick>
 8000c8a:	64b8      	str	r0, [r7, #72]	@ 0x48

    if (currentInterrupt - lastInterrupt > TIME_PRINT_ADC)
 8000c8c:	4b33      	ldr	r3, [pc, #204]	@ (8000d5c <Print_ADC_Values+0xdc>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000c92:	1ad3      	subs	r3, r2, r3
 8000c94:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d95b      	bls.n	8000d54 <Print_ADC_Values+0xd4>
    {
        // Read ADC values from all four channels
        for (Potentiometer pot = POTENTIOMETER_ORANGE; pot < POTENTIOMETER_COUNT; pot++)
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8000ca2:	e02c      	b.n	8000cfe <Print_ADC_Values+0x7e>
        {
            // Configure ADC channel
            ADC_ChannelConfTypeDef sConfig = {0};
 8000ca4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
            sConfig.Channel = ADC_CHANNEL_1 + pot;
 8000cb2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	63bb      	str	r3, [r7, #56]	@ 0x38
            sConfig.Rank = 1;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
            sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000cbe:	2307      	movs	r3, #7
 8000cc0:	643b      	str	r3, [r7, #64]	@ 0x40
            HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000cc2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4825      	ldr	r0, [pc, #148]	@ (8000d60 <Print_ADC_Values+0xe0>)
 8000cca:	f000 ff19 	bl	8001b00 <HAL_ADC_ConfigChannel>

            // Start ADC conversion
            HAL_ADC_Start(&hadc1);
 8000cce:	4824      	ldr	r0, [pc, #144]	@ (8000d60 <Print_ADC_Values+0xe0>)
 8000cd0:	f000 fb9e 	bl	8001410 <HAL_ADC_Start>

            // Wait for ADC conversion to complete
            if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8000cd4:	2164      	movs	r1, #100	@ 0x64
 8000cd6:	4822      	ldr	r0, [pc, #136]	@ (8000d60 <Print_ADC_Values+0xe0>)
 8000cd8:	f000 fc6c 	bl	80015b4 <HAL_ADC_PollForConversion>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d108      	bne.n	8000cf4 <Print_ADC_Values+0x74>
            {
                // Read ADC value
                adcValues[pot] = HAL_ADC_GetValue(&hadc1);
 8000ce2:	f897 404f 	ldrb.w	r4, [r7, #79]	@ 0x4f
 8000ce6:	481e      	ldr	r0, [pc, #120]	@ (8000d60 <Print_ADC_Values+0xe0>)
 8000ce8:	f000 fede 	bl	8001aa8 <HAL_ADC_GetValue>
 8000cec:	4603      	mov	r3, r0
 8000cee:	4a1d      	ldr	r2, [pc, #116]	@ (8000d64 <Print_ADC_Values+0xe4>)
 8000cf0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        for (Potentiometer pot = POTENTIOMETER_ORANGE; pot < POTENTIOMETER_COUNT; pot++)
 8000cf4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8000cfe:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000d02:	2b03      	cmp	r3, #3
 8000d04:	d9ce      	bls.n	8000ca4 <Print_ADC_Values+0x24>
            }
        }

        // Print the ADC values for all channels
        char message[50];
        for (Potentiometer pot = POTENTIOMETER_ORANGE; pot < POTENTIOMETER_COUNT; pot++)
 8000d06:	2300      	movs	r3, #0
 8000d08:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8000d0c:	e01b      	b.n	8000d46 <Print_ADC_Values+0xc6>
        {
            sprintf(message, "Potentiometer %d ADC Value: %lu\r\n", pot + 1, adcValues[pot]);
 8000d0e:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000d12:	1c5a      	adds	r2, r3, #1
 8000d14:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000d18:	4912      	ldr	r1, [pc, #72]	@ (8000d64 <Print_ADC_Values+0xe4>)
 8000d1a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d1e:	1d38      	adds	r0, r7, #4
 8000d20:	4911      	ldr	r1, [pc, #68]	@ (8000d68 <Print_ADC_Values+0xe8>)
 8000d22:	f003 fa03 	bl	800412c <siprintf>
            HAL_UART_Transmit(&huart3, (uint8_t *)message, strlen(message), 100);
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fa51 	bl	80001d0 <strlen>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	1d39      	adds	r1, r7, #4
 8000d34:	2364      	movs	r3, #100	@ 0x64
 8000d36:	480d      	ldr	r0, [pc, #52]	@ (8000d6c <Print_ADC_Values+0xec>)
 8000d38:	f002 fda6 	bl	8003888 <HAL_UART_Transmit>
        for (Potentiometer pot = POTENTIOMETER_ORANGE; pot < POTENTIOMETER_COUNT; pot++)
 8000d3c:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000d40:	3301      	adds	r3, #1
 8000d42:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8000d46:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000d4a:	2b03      	cmp	r3, #3
 8000d4c:	d9df      	bls.n	8000d0e <Print_ADC_Values+0x8e>
        }

        lastInterrupt = currentInterrupt;
 8000d4e:	4a03      	ldr	r2, [pc, #12]	@ (8000d5c <Print_ADC_Values+0xdc>)
 8000d50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000d52:	6013      	str	r3, [r2, #0]
    }
}
 8000d54:	bf00      	nop
 8000d56:	3754      	adds	r7, #84	@ 0x54
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd90      	pop	{r4, r7, pc}
 8000d5c:	20000230 	.word	0x20000230
 8000d60:	2000007c 	.word	0x2000007c
 8000d64:	20000234 	.word	0x20000234
 8000d68:	08004b1c 	.word	0x08004b1c
 8000d6c:	200001e4 	.word	0x200001e4

08000d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d74:	b672      	cpsid	i
}
 8000d76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <Error_Handler+0x8>

08000d7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	4b10      	ldr	r3, [pc, #64]	@ (8000dc8 <HAL_MspInit+0x4c>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000dc8 <HAL_MspInit+0x4c>)
 8000d8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d92:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc8 <HAL_MspInit+0x4c>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	603b      	str	r3, [r7, #0]
 8000da2:	4b09      	ldr	r3, [pc, #36]	@ (8000dc8 <HAL_MspInit+0x4c>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da6:	4a08      	ldr	r2, [pc, #32]	@ (8000dc8 <HAL_MspInit+0x4c>)
 8000da8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dae:	4b06      	ldr	r3, [pc, #24]	@ (8000dc8 <HAL_MspInit+0x4c>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000db6:	603b      	str	r3, [r7, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	40023800 	.word	0x40023800

08000dcc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	@ 0x28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a1b      	ldr	r2, [pc, #108]	@ (8000e58 <HAL_ADC_MspInit+0x8c>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d12f      	bne.n	8000e4e <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e5c <HAL_ADC_MspInit+0x90>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df6:	4a19      	ldr	r2, [pc, #100]	@ (8000e5c <HAL_ADC_MspInit+0x90>)
 8000df8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dfe:	4b17      	ldr	r3, [pc, #92]	@ (8000e5c <HAL_ADC_MspInit+0x90>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	4b13      	ldr	r3, [pc, #76]	@ (8000e5c <HAL_ADC_MspInit+0x90>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	4a12      	ldr	r2, [pc, #72]	@ (8000e5c <HAL_ADC_MspInit+0x90>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1a:	4b10      	ldr	r3, [pc, #64]	@ (8000e5c <HAL_ADC_MspInit+0x90>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000e26:	231e      	movs	r3, #30
 8000e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	4619      	mov	r1, r3
 8000e38:	4809      	ldr	r0, [pc, #36]	@ (8000e60 <HAL_ADC_MspInit+0x94>)
 8000e3a:	f001 f99b 	bl	8002174 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2100      	movs	r1, #0
 8000e42:	2012      	movs	r0, #18
 8000e44:	f001 f95f 	bl	8002106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000e48:	2012      	movs	r0, #18
 8000e4a:	f001 f978 	bl	800213e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e4e:	bf00      	nop
 8000e50:	3728      	adds	r7, #40	@ 0x28
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40012000 	.word	0x40012000
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40020000 	.word	0x40020000

08000e64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e74:	d116      	bne.n	8000ea4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
 8000e7a:	4b36      	ldr	r3, [pc, #216]	@ (8000f54 <HAL_TIM_Base_MspInit+0xf0>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7e:	4a35      	ldr	r2, [pc, #212]	@ (8000f54 <HAL_TIM_Base_MspInit+0xf0>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e86:	4b33      	ldr	r3, [pc, #204]	@ (8000f54 <HAL_TIM_Base_MspInit+0xf0>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	617b      	str	r3, [r7, #20]
 8000e90:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2100      	movs	r1, #0
 8000e96:	201c      	movs	r0, #28
 8000e98:	f001 f935 	bl	8002106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e9c:	201c      	movs	r0, #28
 8000e9e:	f001 f94e 	bl	800213e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8000ea2:	e052      	b.n	8000f4a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a2b      	ldr	r2, [pc, #172]	@ (8000f58 <HAL_TIM_Base_MspInit+0xf4>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d116      	bne.n	8000edc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	4b28      	ldr	r3, [pc, #160]	@ (8000f54 <HAL_TIM_Base_MspInit+0xf0>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb6:	4a27      	ldr	r2, [pc, #156]	@ (8000f54 <HAL_TIM_Base_MspInit+0xf0>)
 8000eb8:	f043 0302 	orr.w	r3, r3, #2
 8000ebc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ebe:	4b25      	ldr	r3, [pc, #148]	@ (8000f54 <HAL_TIM_Base_MspInit+0xf0>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2100      	movs	r1, #0
 8000ece:	201d      	movs	r0, #29
 8000ed0:	f001 f919 	bl	8002106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ed4:	201d      	movs	r0, #29
 8000ed6:	f001 f932 	bl	800213e <HAL_NVIC_EnableIRQ>
}
 8000eda:	e036      	b.n	8000f4a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM4)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a1e      	ldr	r2, [pc, #120]	@ (8000f5c <HAL_TIM_Base_MspInit+0xf8>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d116      	bne.n	8000f14 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b1a      	ldr	r3, [pc, #104]	@ (8000f54 <HAL_TIM_Base_MspInit+0xf0>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eee:	4a19      	ldr	r2, [pc, #100]	@ (8000f54 <HAL_TIM_Base_MspInit+0xf0>)
 8000ef0:	f043 0304 	orr.w	r3, r3, #4
 8000ef4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ef6:	4b17      	ldr	r3, [pc, #92]	@ (8000f54 <HAL_TIM_Base_MspInit+0xf0>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efa:	f003 0304 	and.w	r3, r3, #4
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2100      	movs	r1, #0
 8000f06:	201e      	movs	r0, #30
 8000f08:	f001 f8fd 	bl	8002106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f0c:	201e      	movs	r0, #30
 8000f0e:	f001 f916 	bl	800213e <HAL_NVIC_EnableIRQ>
}
 8000f12:	e01a      	b.n	8000f4a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM12)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a11      	ldr	r2, [pc, #68]	@ (8000f60 <HAL_TIM_Base_MspInit+0xfc>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d115      	bne.n	8000f4a <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	4b0c      	ldr	r3, [pc, #48]	@ (8000f54 <HAL_TIM_Base_MspInit+0xf0>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f26:	4a0b      	ldr	r2, [pc, #44]	@ (8000f54 <HAL_TIM_Base_MspInit+0xf0>)
 8000f28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f2e:	4b09      	ldr	r3, [pc, #36]	@ (8000f54 <HAL_TIM_Base_MspInit+0xf0>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	202b      	movs	r0, #43	@ 0x2b
 8000f40:	f001 f8e1 	bl	8002106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8000f44:	202b      	movs	r0, #43	@ 0x2b
 8000f46:	f001 f8fa 	bl	800213e <HAL_NVIC_EnableIRQ>
}
 8000f4a:	bf00      	nop
 8000f4c:	3718      	adds	r7, #24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40000400 	.word	0x40000400
 8000f5c:	40000800 	.word	0x40000800
 8000f60:	40001800 	.word	0x40001800

08000f64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	@ 0x28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a19      	ldr	r2, [pc, #100]	@ (8000fe8 <HAL_UART_MspInit+0x84>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d12c      	bne.n	8000fe0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	4b18      	ldr	r3, [pc, #96]	@ (8000fec <HAL_UART_MspInit+0x88>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8e:	4a17      	ldr	r2, [pc, #92]	@ (8000fec <HAL_UART_MspInit+0x88>)
 8000f90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f96:	4b15      	ldr	r3, [pc, #84]	@ (8000fec <HAL_UART_MspInit+0x88>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	4b11      	ldr	r3, [pc, #68]	@ (8000fec <HAL_UART_MspInit+0x88>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	4a10      	ldr	r2, [pc, #64]	@ (8000fec <HAL_UART_MspInit+0x88>)
 8000fac:	f043 0308 	orr.w	r3, r3, #8
 8000fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <HAL_UART_MspInit+0x88>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	f003 0308 	and.w	r3, r3, #8
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fbe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fd0:	2307      	movs	r3, #7
 8000fd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4805      	ldr	r0, [pc, #20]	@ (8000ff0 <HAL_UART_MspInit+0x8c>)
 8000fdc:	f001 f8ca 	bl	8002174 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fe0:	bf00      	nop
 8000fe2:	3728      	adds	r7, #40	@ 0x28
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40004800 	.word	0x40004800
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020c00 	.word	0x40020c00

08000ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <NMI_Handler+0x4>

08000ffc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <HardFault_Handler+0x4>

08001004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <MemManage_Handler+0x4>

0800100c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <BusFault_Handler+0x4>

08001014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <UsageFault_Handler+0x4>

0800101c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800104a:	f000 f97d 	bl	8001348 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
    static bool status = 1;
    static uint32_t last_interrupt_time = 0;
    uint32_t current_time = HAL_GetTick();
 800105a:	f000 f989 	bl	8001370 <HAL_GetTick>
 800105e:	6078      	str	r0, [r7, #4]

    if (current_time - last_interrupt_time > 200) {
 8001060:	4b2a      	ldr	r3, [pc, #168]	@ (800110c <EXTI0_IRQHandler+0xb8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	2bc8      	cmp	r3, #200	@ 0xc8
 800106a:	d948      	bls.n	80010fe <EXTI0_IRQHandler+0xaa>
        if (status == 1) {
 800106c:	4b28      	ldr	r3, [pc, #160]	@ (8001110 <EXTI0_IRQHandler+0xbc>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d00f      	beq.n	8001094 <EXTI0_IRQHandler+0x40>
            HAL_TIM_Base_Start_IT(&htim2);
 8001074:	4827      	ldr	r0, [pc, #156]	@ (8001114 <EXTI0_IRQHandler+0xc0>)
 8001076:	f001 ff59 	bl	8002f2c <HAL_TIM_Base_Start_IT>
            HAL_TIM_Base_Start_IT(&htim3);
 800107a:	4827      	ldr	r0, [pc, #156]	@ (8001118 <EXTI0_IRQHandler+0xc4>)
 800107c:	f001 ff56 	bl	8002f2c <HAL_TIM_Base_Start_IT>
            HAL_TIM_Base_Start_IT(&htim4);
 8001080:	4826      	ldr	r0, [pc, #152]	@ (800111c <EXTI0_IRQHandler+0xc8>)
 8001082:	f001 ff53 	bl	8002f2c <HAL_TIM_Base_Start_IT>
            HAL_TIM_Base_Start_IT(&htim12);
 8001086:	4826      	ldr	r0, [pc, #152]	@ (8001120 <EXTI0_IRQHandler+0xcc>)
 8001088:	f001 ff50 	bl	8002f2c <HAL_TIM_Base_Start_IT>
            status = 0;
 800108c:	4b20      	ldr	r3, [pc, #128]	@ (8001110 <EXTI0_IRQHandler+0xbc>)
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]
 8001092:	e02d      	b.n	80010f0 <EXTI0_IRQHandler+0x9c>
        } else if (status == 0) {
 8001094:	4b1e      	ldr	r3, [pc, #120]	@ (8001110 <EXTI0_IRQHandler+0xbc>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	f083 0301 	eor.w	r3, r3, #1
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d026      	beq.n	80010f0 <EXTI0_IRQHandler+0x9c>
            HAL_TIM_Base_Stop_IT(&htim2);
 80010a2:	481c      	ldr	r0, [pc, #112]	@ (8001114 <EXTI0_IRQHandler+0xc0>)
 80010a4:	f001 ffb2 	bl	800300c <HAL_TIM_Base_Stop_IT>
            HAL_TIM_Base_Stop_IT(&htim3);
 80010a8:	481b      	ldr	r0, [pc, #108]	@ (8001118 <EXTI0_IRQHandler+0xc4>)
 80010aa:	f001 ffaf 	bl	800300c <HAL_TIM_Base_Stop_IT>
            HAL_TIM_Base_Stop_IT(&htim4);
 80010ae:	481b      	ldr	r0, [pc, #108]	@ (800111c <EXTI0_IRQHandler+0xc8>)
 80010b0:	f001 ffac 	bl	800300c <HAL_TIM_Base_Stop_IT>
            HAL_TIM_Base_Stop_IT(&htim12);
 80010b4:	481a      	ldr	r0, [pc, #104]	@ (8001120 <EXTI0_IRQHandler+0xcc>)
 80010b6:	f001 ffa9 	bl	800300c <HAL_TIM_Base_Stop_IT>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80010ba:	2200      	movs	r2, #0
 80010bc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010c0:	4818      	ldr	r0, [pc, #96]	@ (8001124 <EXTI0_IRQHandler+0xd0>)
 80010c2:	f001 f9f3 	bl	80024ac <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010cc:	4815      	ldr	r0, [pc, #84]	@ (8001124 <EXTI0_IRQHandler+0xd0>)
 80010ce:	f001 f9ed 	bl	80024ac <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010d8:	4812      	ldr	r0, [pc, #72]	@ (8001124 <EXTI0_IRQHandler+0xd0>)
 80010da:	f001 f9e7 	bl	80024ac <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80010de:	2200      	movs	r2, #0
 80010e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010e4:	480f      	ldr	r0, [pc, #60]	@ (8001124 <EXTI0_IRQHandler+0xd0>)
 80010e6:	f001 f9e1 	bl	80024ac <HAL_GPIO_WritePin>
            status = 1;
 80010ea:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <EXTI0_IRQHandler+0xbc>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	701a      	strb	r2, [r3, #0]
        }
        last_interrupt_time = current_time;
 80010f0:	4a06      	ldr	r2, [pc, #24]	@ (800110c <EXTI0_IRQHandler+0xb8>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6013      	str	r3, [r2, #0]
        btn_status = status; // Update variable to use in main for UART control
 80010f6:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <EXTI0_IRQHandler+0xbc>)
 80010f8:	781a      	ldrb	r2, [r3, #0]
 80010fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001128 <EXTI0_IRQHandler+0xd4>)
 80010fc:	701a      	strb	r2, [r3, #0]
    }
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_LIGHT_Pin);
 80010fe:	2001      	movs	r0, #1
 8001100:	f001 fa08 	bl	8002514 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000244 	.word	0x20000244
 8001110:	20000001 	.word	0x20000001
 8001114:	200000c4 	.word	0x200000c4
 8001118:	2000010c 	.word	0x2000010c
 800111c:	20000154 	.word	0x20000154
 8001120:	2000019c 	.word	0x2000019c
 8001124:	40020c00 	.word	0x40020c00
 8001128:	20000000 	.word	0x20000000

0800112c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001130:	4802      	ldr	r0, [pc, #8]	@ (800113c <ADC_IRQHandler+0x10>)
 8001132:	f000 fba9 	bl	8001888 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	2000007c 	.word	0x2000007c

08001140 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001144:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001148:	4803      	ldr	r0, [pc, #12]	@ (8001158 <TIM2_IRQHandler+0x18>)
 800114a:	f001 f9c8 	bl	80024de <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800114e:	4803      	ldr	r0, [pc, #12]	@ (800115c <TIM2_IRQHandler+0x1c>)
 8001150:	f001 ff8b 	bl	800306a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40020c00 	.word	0x40020c00
 800115c:	200000c4 	.word	0x200000c4

08001160 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8001164:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001168:	4803      	ldr	r0, [pc, #12]	@ (8001178 <TIM3_IRQHandler+0x18>)
 800116a:	f001 f9b8 	bl	80024de <HAL_GPIO_TogglePin>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800116e:	4803      	ldr	r0, [pc, #12]	@ (800117c <TIM3_IRQHandler+0x1c>)
 8001170:	f001 ff7b 	bl	800306a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40020c00 	.word	0x40020c00
 800117c:	2000010c 	.word	0x2000010c

08001180 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001184:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001188:	4803      	ldr	r0, [pc, #12]	@ (8001198 <TIM4_IRQHandler+0x18>)
 800118a:	f001 f9a8 	bl	80024de <HAL_GPIO_TogglePin>
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800118e:	4803      	ldr	r0, [pc, #12]	@ (800119c <TIM4_IRQHandler+0x1c>)
 8001190:	f001 ff6b 	bl	800306a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40020c00 	.word	0x40020c00
 800119c:	20000154 	.word	0x20000154

080011a0 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80011a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011a8:	4803      	ldr	r0, [pc, #12]	@ (80011b8 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80011aa:	f001 f998 	bl	80024de <HAL_GPIO_TogglePin>
  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 80011ae:	4803      	ldr	r0, [pc, #12]	@ (80011bc <TIM8_BRK_TIM12_IRQHandler+0x1c>)
 80011b0:	f001 ff5b 	bl	800306a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40020c00 	.word	0x40020c00
 80011bc:	2000019c 	.word	0x2000019c

080011c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011c8:	4a14      	ldr	r2, [pc, #80]	@ (800121c <_sbrk+0x5c>)
 80011ca:	4b15      	ldr	r3, [pc, #84]	@ (8001220 <_sbrk+0x60>)
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011d4:	4b13      	ldr	r3, [pc, #76]	@ (8001224 <_sbrk+0x64>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d102      	bne.n	80011e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011dc:	4b11      	ldr	r3, [pc, #68]	@ (8001224 <_sbrk+0x64>)
 80011de:	4a12      	ldr	r2, [pc, #72]	@ (8001228 <_sbrk+0x68>)
 80011e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011e2:	4b10      	ldr	r3, [pc, #64]	@ (8001224 <_sbrk+0x64>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d207      	bcs.n	8001200 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011f0:	f002 ffc4 	bl	800417c <__errno>
 80011f4:	4603      	mov	r3, r0
 80011f6:	220c      	movs	r2, #12
 80011f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011fa:	f04f 33ff 	mov.w	r3, #4294967295
 80011fe:	e009      	b.n	8001214 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001200:	4b08      	ldr	r3, [pc, #32]	@ (8001224 <_sbrk+0x64>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001206:	4b07      	ldr	r3, [pc, #28]	@ (8001224 <_sbrk+0x64>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4413      	add	r3, r2
 800120e:	4a05      	ldr	r2, [pc, #20]	@ (8001224 <_sbrk+0x64>)
 8001210:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001212:	68fb      	ldr	r3, [r7, #12]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20020000 	.word	0x20020000
 8001220:	00000400 	.word	0x00000400
 8001224:	20000248 	.word	0x20000248
 8001228:	20000398 	.word	0x20000398

0800122c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001230:	4b06      	ldr	r3, [pc, #24]	@ (800124c <SystemInit+0x20>)
 8001232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001236:	4a05      	ldr	r2, [pc, #20]	@ (800124c <SystemInit+0x20>)
 8001238:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800123c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001250:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001288 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001254:	f7ff ffea 	bl	800122c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001258:	480c      	ldr	r0, [pc, #48]	@ (800128c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800125a:	490d      	ldr	r1, [pc, #52]	@ (8001290 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800125c:	4a0d      	ldr	r2, [pc, #52]	@ (8001294 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001260:	e002      	b.n	8001268 <LoopCopyDataInit>

08001262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001266:	3304      	adds	r3, #4

08001268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800126c:	d3f9      	bcc.n	8001262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126e:	4a0a      	ldr	r2, [pc, #40]	@ (8001298 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001270:	4c0a      	ldr	r4, [pc, #40]	@ (800129c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001274:	e001      	b.n	800127a <LoopFillZerobss>

08001276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001278:	3204      	adds	r2, #4

0800127a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800127c:	d3fb      	bcc.n	8001276 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800127e:	f002 ff83 	bl	8004188 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001282:	f7ff f975 	bl	8000570 <main>
  bx  lr    
 8001286:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001288:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800128c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001290:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001294:	08004b9c 	.word	0x08004b9c
  ldr r2, =_sbss
 8001298:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800129c:	20000398 	.word	0x20000398

080012a0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012a0:	e7fe      	b.n	80012a0 <CAN1_RX0_IRQHandler>
	...

080012a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012a8:	4b0e      	ldr	r3, [pc, #56]	@ (80012e4 <HAL_Init+0x40>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a0d      	ldr	r2, [pc, #52]	@ (80012e4 <HAL_Init+0x40>)
 80012ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012b4:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <HAL_Init+0x40>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a0a      	ldr	r2, [pc, #40]	@ (80012e4 <HAL_Init+0x40>)
 80012ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c0:	4b08      	ldr	r3, [pc, #32]	@ (80012e4 <HAL_Init+0x40>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a07      	ldr	r2, [pc, #28]	@ (80012e4 <HAL_Init+0x40>)
 80012c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012cc:	2003      	movs	r0, #3
 80012ce:	f000 ff0f 	bl	80020f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012d2:	200f      	movs	r0, #15
 80012d4:	f000 f808 	bl	80012e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d8:	f7ff fd50 	bl	8000d7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40023c00 	.word	0x40023c00

080012e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012f0:	4b12      	ldr	r3, [pc, #72]	@ (800133c <HAL_InitTick+0x54>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4b12      	ldr	r3, [pc, #72]	@ (8001340 <HAL_InitTick+0x58>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	4619      	mov	r1, r3
 80012fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001302:	fbb2 f3f3 	udiv	r3, r2, r3
 8001306:	4618      	mov	r0, r3
 8001308:	f000 ff27 	bl	800215a <HAL_SYSTICK_Config>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e00e      	b.n	8001334 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b0f      	cmp	r3, #15
 800131a:	d80a      	bhi.n	8001332 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800131c:	2200      	movs	r2, #0
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	f04f 30ff 	mov.w	r0, #4294967295
 8001324:	f000 feef 	bl	8002106 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001328:	4a06      	ldr	r2, [pc, #24]	@ (8001344 <HAL_InitTick+0x5c>)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800132e:	2300      	movs	r3, #0
 8001330:	e000      	b.n	8001334 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
}
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000004 	.word	0x20000004
 8001340:	2000000c 	.word	0x2000000c
 8001344:	20000008 	.word	0x20000008

08001348 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800134c:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <HAL_IncTick+0x20>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	461a      	mov	r2, r3
 8001352:	4b06      	ldr	r3, [pc, #24]	@ (800136c <HAL_IncTick+0x24>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4413      	add	r3, r2
 8001358:	4a04      	ldr	r2, [pc, #16]	@ (800136c <HAL_IncTick+0x24>)
 800135a:	6013      	str	r3, [r2, #0]
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	2000000c 	.word	0x2000000c
 800136c:	2000024c 	.word	0x2000024c

08001370 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  return uwTick;
 8001374:	4b03      	ldr	r3, [pc, #12]	@ (8001384 <HAL_GetTick+0x14>)
 8001376:	681b      	ldr	r3, [r3, #0]
}
 8001378:	4618      	mov	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	2000024c 	.word	0x2000024c

08001388 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001390:	2300      	movs	r3, #0
 8001392:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e033      	b.n	8001406 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d109      	bne.n	80013ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff fd10 	bl	8000dcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013be:	f003 0310 	and.w	r3, r3, #16
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d118      	bne.n	80013f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ca:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80013ce:	f023 0302 	bic.w	r3, r3, #2
 80013d2:	f043 0202 	orr.w	r2, r3, #2
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 fcb2 	bl	8001d44 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ea:	f023 0303 	bic.w	r3, r3, #3
 80013ee:	f043 0201 	orr.w	r2, r3, #1
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80013f6:	e001      	b.n	80013fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001404:	7bfb      	ldrb	r3, [r7, #15]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001422:	2b01      	cmp	r3, #1
 8001424:	d101      	bne.n	800142a <HAL_ADC_Start+0x1a>
 8001426:	2302      	movs	r3, #2
 8001428:	e0b2      	b.n	8001590 <HAL_ADC_Start+0x180>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2201      	movs	r2, #1
 800142e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	2b01      	cmp	r3, #1
 800143e:	d018      	beq.n	8001472 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f042 0201 	orr.w	r2, r2, #1
 800144e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001450:	4b52      	ldr	r3, [pc, #328]	@ (800159c <HAL_ADC_Start+0x18c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a52      	ldr	r2, [pc, #328]	@ (80015a0 <HAL_ADC_Start+0x190>)
 8001456:	fba2 2303 	umull	r2, r3, r2, r3
 800145a:	0c9a      	lsrs	r2, r3, #18
 800145c:	4613      	mov	r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4413      	add	r3, r2
 8001462:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001464:	e002      	b.n	800146c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	3b01      	subs	r3, #1
 800146a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f9      	bne.n	8001466 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	2b01      	cmp	r3, #1
 800147e:	d17a      	bne.n	8001576 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001484:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001488:	f023 0301 	bic.w	r3, r3, #1
 800148c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d007      	beq.n	80014b2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80014aa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80014be:	d106      	bne.n	80014ce <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c4:	f023 0206 	bic.w	r2, r3, #6
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	645a      	str	r2, [r3, #68]	@ 0x44
 80014cc:	e002      	b.n	80014d4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014dc:	4b31      	ldr	r3, [pc, #196]	@ (80015a4 <HAL_ADC_Start+0x194>)
 80014de:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80014e8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 031f 	and.w	r3, r3, #31
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d12a      	bne.n	800154c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a2b      	ldr	r2, [pc, #172]	@ (80015a8 <HAL_ADC_Start+0x198>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d015      	beq.n	800152c <HAL_ADC_Start+0x11c>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a29      	ldr	r2, [pc, #164]	@ (80015ac <HAL_ADC_Start+0x19c>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d105      	bne.n	8001516 <HAL_ADC_Start+0x106>
 800150a:	4b26      	ldr	r3, [pc, #152]	@ (80015a4 <HAL_ADC_Start+0x194>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f003 031f 	and.w	r3, r3, #31
 8001512:	2b00      	cmp	r3, #0
 8001514:	d00a      	beq.n	800152c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a25      	ldr	r2, [pc, #148]	@ (80015b0 <HAL_ADC_Start+0x1a0>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d136      	bne.n	800158e <HAL_ADC_Start+0x17e>
 8001520:	4b20      	ldr	r3, [pc, #128]	@ (80015a4 <HAL_ADC_Start+0x194>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 0310 	and.w	r3, r3, #16
 8001528:	2b00      	cmp	r3, #0
 800152a:	d130      	bne.n	800158e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d129      	bne.n	800158e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001548:	609a      	str	r2, [r3, #8]
 800154a:	e020      	b.n	800158e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a15      	ldr	r2, [pc, #84]	@ (80015a8 <HAL_ADC_Start+0x198>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d11b      	bne.n	800158e <HAL_ADC_Start+0x17e>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d114      	bne.n	800158e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	e00b      	b.n	800158e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157a:	f043 0210 	orr.w	r2, r3, #16
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001586:	f043 0201 	orr.w	r2, r3, #1
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	20000004 	.word	0x20000004
 80015a0:	431bde83 	.word	0x431bde83
 80015a4:	40012300 	.word	0x40012300
 80015a8:	40012000 	.word	0x40012000
 80015ac:	40012100 	.word	0x40012100
 80015b0:	40012200 	.word	0x40012200

080015b4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015d0:	d113      	bne.n	80015fa <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80015dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80015e0:	d10b      	bne.n	80015fa <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e6:	f043 0220 	orr.w	r2, r3, #32
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e063      	b.n	80016c2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80015fa:	f7ff feb9 	bl	8001370 <HAL_GetTick>
 80015fe:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001600:	e021      	b.n	8001646 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001608:	d01d      	beq.n	8001646 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d007      	beq.n	8001620 <HAL_ADC_PollForConversion+0x6c>
 8001610:	f7ff feae 	bl	8001370 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	429a      	cmp	r2, r3
 800161e:	d212      	bcs.n	8001646 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b02      	cmp	r3, #2
 800162c:	d00b      	beq.n	8001646 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001632:	f043 0204 	orr.w	r2, r3, #4
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e03d      	b.n	80016c2 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b02      	cmp	r3, #2
 8001652:	d1d6      	bne.n	8001602 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f06f 0212 	mvn.w	r2, #18
 800165c:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001662:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d123      	bne.n	80016c0 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800167c:	2b00      	cmp	r3, #0
 800167e:	d11f      	bne.n	80016c0 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001686:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800168a:	2b00      	cmp	r3, #0
 800168c:	d006      	beq.n	800169c <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001698:	2b00      	cmp	r3, #0
 800169a:	d111      	bne.n	80016c0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d105      	bne.n	80016c0 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b8:	f043 0201 	orr.w	r2, r3, #1
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d101      	bne.n	80016e6 <HAL_ADC_Start_IT+0x1a>
 80016e2:	2302      	movs	r3, #2
 80016e4:	e0bd      	b.n	8001862 <HAL_ADC_Start_IT+0x196>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2201      	movs	r2, #1
 80016ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d018      	beq.n	800172e <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f042 0201 	orr.w	r2, r2, #1
 800170a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800170c:	4b58      	ldr	r3, [pc, #352]	@ (8001870 <HAL_ADC_Start_IT+0x1a4>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a58      	ldr	r2, [pc, #352]	@ (8001874 <HAL_ADC_Start_IT+0x1a8>)
 8001712:	fba2 2303 	umull	r2, r3, r2, r3
 8001716:	0c9a      	lsrs	r2, r3, #18
 8001718:	4613      	mov	r3, r2
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	4413      	add	r3, r2
 800171e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001720:	e002      	b.n	8001728 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	3b01      	subs	r3, #1
 8001726:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f9      	bne.n	8001722 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	2b01      	cmp	r3, #1
 800173a:	f040 8085 	bne.w	8001848 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001742:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001746:	f023 0301 	bic.w	r3, r3, #1
 800174a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800175c:	2b00      	cmp	r3, #0
 800175e:	d007      	beq.n	8001770 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001764:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001768:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001774:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001778:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800177c:	d106      	bne.n	800178c <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001782:	f023 0206 	bic.w	r2, r3, #6
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	645a      	str	r2, [r3, #68]	@ 0x44
 800178a:	e002      	b.n	8001792 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800179a:	4b37      	ldr	r3, [pc, #220]	@ (8001878 <HAL_ADC_Start_IT+0x1ac>)
 800179c:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80017a6:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	6812      	ldr	r2, [r2, #0]
 80017b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80017b6:	f043 0320 	orr.w	r3, r3, #32
 80017ba:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 031f 	and.w	r3, r3, #31
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d12a      	bne.n	800181e <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a2b      	ldr	r2, [pc, #172]	@ (800187c <HAL_ADC_Start_IT+0x1b0>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d015      	beq.n	80017fe <HAL_ADC_Start_IT+0x132>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a2a      	ldr	r2, [pc, #168]	@ (8001880 <HAL_ADC_Start_IT+0x1b4>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d105      	bne.n	80017e8 <HAL_ADC_Start_IT+0x11c>
 80017dc:	4b26      	ldr	r3, [pc, #152]	@ (8001878 <HAL_ADC_Start_IT+0x1ac>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 031f 	and.w	r3, r3, #31
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d00a      	beq.n	80017fe <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a25      	ldr	r2, [pc, #148]	@ (8001884 <HAL_ADC_Start_IT+0x1b8>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d136      	bne.n	8001860 <HAL_ADC_Start_IT+0x194>
 80017f2:	4b21      	ldr	r3, [pc, #132]	@ (8001878 <HAL_ADC_Start_IT+0x1ac>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f003 0310 	and.w	r3, r3, #16
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d130      	bne.n	8001860 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d129      	bne.n	8001860 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	e020      	b.n	8001860 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a16      	ldr	r2, [pc, #88]	@ (800187c <HAL_ADC_Start_IT+0x1b0>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d11b      	bne.n	8001860 <HAL_ADC_Start_IT+0x194>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d114      	bne.n	8001860 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001844:	609a      	str	r2, [r3, #8]
 8001846:	e00b      	b.n	8001860 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184c:	f043 0210 	orr.w	r2, r3, #16
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001858:	f043 0201 	orr.w	r2, r3, #1
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	20000004 	.word	0x20000004
 8001874:	431bde83 	.word	0x431bde83
 8001878:	40012300 	.word	0x40012300
 800187c:	40012000 	.word	0x40012000
 8001880:	40012100 	.word	0x40012100
 8001884:	40012200 	.word	0x40012200

08001888 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	2300      	movs	r3, #0
 8001896:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	f003 0320 	and.w	r3, r3, #32
 80018b6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d049      	beq.n	8001952 <HAL_ADC_IRQHandler+0xca>
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d046      	beq.n	8001952 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c8:	f003 0310 	and.w	r3, r3, #16
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d105      	bne.n	80018dc <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d12b      	bne.n	8001942 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d127      	bne.n	8001942 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d006      	beq.n	800190e <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800190a:	2b00      	cmp	r3, #0
 800190c:	d119      	bne.n	8001942 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 0220 	bic.w	r2, r2, #32
 800191c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001922:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d105      	bne.n	8001942 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193a:	f043 0201 	orr.w	r2, r3, #1
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 f8bd 	bl	8001ac2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f06f 0212 	mvn.w	r2, #18
 8001950:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001960:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d057      	beq.n	8001a18 <HAL_ADC_IRQHandler+0x190>
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d054      	beq.n	8001a18 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001972:	f003 0310 	and.w	r3, r3, #16
 8001976:	2b00      	cmp	r3, #0
 8001978:	d105      	bne.n	8001986 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d139      	bne.n	8001a08 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800199a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d006      	beq.n	80019b0 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d12b      	bne.n	8001a08 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d124      	bne.n	8001a08 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d11d      	bne.n	8001a08 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d119      	bne.n	8001a08 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	685a      	ldr	r2, [r3, #4]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019e2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d105      	bne.n	8001a08 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a00:	f043 0201 	orr.w	r2, r3, #1
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f000 fa97 	bl	8001f3c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f06f 020c 	mvn.w	r2, #12
 8001a16:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a26:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d017      	beq.n	8001a5e <HAL_ADC_IRQHandler+0x1d6>
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d014      	beq.n	8001a5e <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d10d      	bne.n	8001a5e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a46:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f841 	bl	8001ad6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f06f 0201 	mvn.w	r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f003 0320 	and.w	r3, r3, #32
 8001a64:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a6c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d015      	beq.n	8001aa0 <HAL_ADC_IRQHandler+0x218>
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d012      	beq.n	8001aa0 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7e:	f043 0202 	orr.w	r2, r3, #2
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f06f 0220 	mvn.w	r2, #32
 8001a8e:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 f82a 	bl	8001aea <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f06f 0220 	mvn.w	r2, #32
 8001a9e:	601a      	str	r2, [r3, #0]
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
	...

08001b00 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d101      	bne.n	8001b1c <HAL_ADC_ConfigChannel+0x1c>
 8001b18:	2302      	movs	r3, #2
 8001b1a:	e105      	b.n	8001d28 <HAL_ADC_ConfigChannel+0x228>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b09      	cmp	r3, #9
 8001b2a:	d925      	bls.n	8001b78 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	68d9      	ldr	r1, [r3, #12]
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	4413      	add	r3, r2
 8001b40:	3b1e      	subs	r3, #30
 8001b42:	2207      	movs	r2, #7
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43da      	mvns	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	400a      	ands	r2, r1
 8001b50:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68d9      	ldr	r1, [r3, #12]
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	4618      	mov	r0, r3
 8001b64:	4603      	mov	r3, r0
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	4403      	add	r3, r0
 8001b6a:	3b1e      	subs	r3, #30
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	e022      	b.n	8001bbe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6919      	ldr	r1, [r3, #16]
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	461a      	mov	r2, r3
 8001b86:	4613      	mov	r3, r2
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	4413      	add	r3, r2
 8001b8c:	2207      	movs	r2, #7
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43da      	mvns	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	400a      	ands	r2, r1
 8001b9a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6919      	ldr	r1, [r3, #16]
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	689a      	ldr	r2, [r3, #8]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	4618      	mov	r0, r3
 8001bae:	4603      	mov	r3, r0
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	4403      	add	r3, r0
 8001bb4:	409a      	lsls	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b06      	cmp	r3, #6
 8001bc4:	d824      	bhi.n	8001c10 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4413      	add	r3, r2
 8001bd6:	3b05      	subs	r3, #5
 8001bd8:	221f      	movs	r2, #31
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43da      	mvns	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	400a      	ands	r2, r1
 8001be6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	3b05      	subs	r3, #5
 8001c02:	fa00 f203 	lsl.w	r2, r0, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c0e:	e04c      	b.n	8001caa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b0c      	cmp	r3, #12
 8001c16:	d824      	bhi.n	8001c62 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	4613      	mov	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	3b23      	subs	r3, #35	@ 0x23
 8001c2a:	221f      	movs	r2, #31
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43da      	mvns	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	400a      	ands	r2, r1
 8001c38:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	4618      	mov	r0, r3
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	3b23      	subs	r3, #35	@ 0x23
 8001c54:	fa00 f203 	lsl.w	r2, r0, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c60:	e023      	b.n	8001caa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685a      	ldr	r2, [r3, #4]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	3b41      	subs	r3, #65	@ 0x41
 8001c74:	221f      	movs	r2, #31
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43da      	mvns	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	400a      	ands	r2, r1
 8001c82:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	4618      	mov	r0, r3
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	4613      	mov	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	3b41      	subs	r3, #65	@ 0x41
 8001c9e:	fa00 f203 	lsl.w	r2, r0, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001caa:	4b22      	ldr	r3, [pc, #136]	@ (8001d34 <HAL_ADC_ConfigChannel+0x234>)
 8001cac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a21      	ldr	r2, [pc, #132]	@ (8001d38 <HAL_ADC_ConfigChannel+0x238>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d109      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x1cc>
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b12      	cmp	r3, #18
 8001cbe:	d105      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a19      	ldr	r2, [pc, #100]	@ (8001d38 <HAL_ADC_ConfigChannel+0x238>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d123      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x21e>
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2b10      	cmp	r3, #16
 8001cdc:	d003      	beq.n	8001ce6 <HAL_ADC_ConfigChannel+0x1e6>
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2b11      	cmp	r3, #17
 8001ce4:	d11b      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2b10      	cmp	r3, #16
 8001cf8:	d111      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cfa:	4b10      	ldr	r3, [pc, #64]	@ (8001d3c <HAL_ADC_ConfigChannel+0x23c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a10      	ldr	r2, [pc, #64]	@ (8001d40 <HAL_ADC_ConfigChannel+0x240>)
 8001d00:	fba2 2303 	umull	r2, r3, r2, r3
 8001d04:	0c9a      	lsrs	r2, r3, #18
 8001d06:	4613      	mov	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d10:	e002      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	3b01      	subs	r3, #1
 8001d16:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f9      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	40012300 	.word	0x40012300
 8001d38:	40012000 	.word	0x40012000
 8001d3c:	20000004 	.word	0x20000004
 8001d40:	431bde83 	.word	0x431bde83

08001d44 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d4c:	4b79      	ldr	r3, [pc, #484]	@ (8001f34 <ADC_Init+0x1f0>)
 8001d4e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	431a      	orrs	r2, r3
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6859      	ldr	r1, [r3, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	021a      	lsls	r2, r3, #8
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001d9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6859      	ldr	r1, [r3, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6899      	ldr	r1, [r3, #8]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd6:	4a58      	ldr	r2, [pc, #352]	@ (8001f38 <ADC_Init+0x1f4>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d022      	beq.n	8001e22 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001dea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6899      	ldr	r1, [r3, #8]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6899      	ldr	r1, [r3, #8]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	e00f      	b.n	8001e42 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e40:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 0202 	bic.w	r2, r2, #2
 8001e50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6899      	ldr	r1, [r3, #8]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	7e1b      	ldrb	r3, [r3, #24]
 8001e5c:	005a      	lsls	r2, r3, #1
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d01b      	beq.n	8001ea8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e7e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001e8e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6859      	ldr	r1, [r3, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	035a      	lsls	r2, r3, #13
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	e007      	b.n	8001eb8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001eb6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001ec6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	051a      	lsls	r2, r3, #20
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001eec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6899      	ldr	r1, [r3, #8]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001efa:	025a      	lsls	r2, r3, #9
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	430a      	orrs	r2, r1
 8001f02:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6899      	ldr	r1, [r3, #8]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	029a      	lsls	r2, r3, #10
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	609a      	str	r2, [r3, #8]
}
 8001f28:	bf00      	nop
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	40012300 	.word	0x40012300
 8001f38:	0f000001 	.word	0x0f000001

08001f3c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f60:	4b0c      	ldr	r3, [pc, #48]	@ (8001f94 <__NVIC_SetPriorityGrouping+0x44>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f66:	68ba      	ldr	r2, [r7, #8]
 8001f68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f82:	4a04      	ldr	r2, [pc, #16]	@ (8001f94 <__NVIC_SetPriorityGrouping+0x44>)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	60d3      	str	r3, [r2, #12]
}
 8001f88:	bf00      	nop
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f9c:	4b04      	ldr	r3, [pc, #16]	@ (8001fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	0a1b      	lsrs	r3, r3, #8
 8001fa2:	f003 0307 	and.w	r3, r3, #7
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	db0b      	blt.n	8001fde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	f003 021f 	and.w	r2, r3, #31
 8001fcc:	4907      	ldr	r1, [pc, #28]	@ (8001fec <__NVIC_EnableIRQ+0x38>)
 8001fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd2:	095b      	lsrs	r3, r3, #5
 8001fd4:	2001      	movs	r0, #1
 8001fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	e000e100 	.word	0xe000e100

08001ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	6039      	str	r1, [r7, #0]
 8001ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002000:	2b00      	cmp	r3, #0
 8002002:	db0a      	blt.n	800201a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	b2da      	uxtb	r2, r3
 8002008:	490c      	ldr	r1, [pc, #48]	@ (800203c <__NVIC_SetPriority+0x4c>)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	0112      	lsls	r2, r2, #4
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	440b      	add	r3, r1
 8002014:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002018:	e00a      	b.n	8002030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	b2da      	uxtb	r2, r3
 800201e:	4908      	ldr	r1, [pc, #32]	@ (8002040 <__NVIC_SetPriority+0x50>)
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	3b04      	subs	r3, #4
 8002028:	0112      	lsls	r2, r2, #4
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	440b      	add	r3, r1
 800202e:	761a      	strb	r2, [r3, #24]
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	e000e100 	.word	0xe000e100
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002044:	b480      	push	{r7}
 8002046:	b089      	sub	sp, #36	@ 0x24
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f1c3 0307 	rsb	r3, r3, #7
 800205e:	2b04      	cmp	r3, #4
 8002060:	bf28      	it	cs
 8002062:	2304      	movcs	r3, #4
 8002064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	3304      	adds	r3, #4
 800206a:	2b06      	cmp	r3, #6
 800206c:	d902      	bls.n	8002074 <NVIC_EncodePriority+0x30>
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3b03      	subs	r3, #3
 8002072:	e000      	b.n	8002076 <NVIC_EncodePriority+0x32>
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002078:	f04f 32ff 	mov.w	r2, #4294967295
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43da      	mvns	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	401a      	ands	r2, r3
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800208c:	f04f 31ff 	mov.w	r1, #4294967295
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	fa01 f303 	lsl.w	r3, r1, r3
 8002096:	43d9      	mvns	r1, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800209c:	4313      	orrs	r3, r2
         );
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3724      	adds	r7, #36	@ 0x24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
	...

080020ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020bc:	d301      	bcc.n	80020c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020be:	2301      	movs	r3, #1
 80020c0:	e00f      	b.n	80020e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020c2:	4a0a      	ldr	r2, [pc, #40]	@ (80020ec <SysTick_Config+0x40>)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ca:	210f      	movs	r1, #15
 80020cc:	f04f 30ff 	mov.w	r0, #4294967295
 80020d0:	f7ff ff8e 	bl	8001ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020d4:	4b05      	ldr	r3, [pc, #20]	@ (80020ec <SysTick_Config+0x40>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020da:	4b04      	ldr	r3, [pc, #16]	@ (80020ec <SysTick_Config+0x40>)
 80020dc:	2207      	movs	r2, #7
 80020de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	e000e010 	.word	0xe000e010

080020f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff ff29 	bl	8001f50 <__NVIC_SetPriorityGrouping>
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002106:	b580      	push	{r7, lr}
 8002108:	b086      	sub	sp, #24
 800210a:	af00      	add	r7, sp, #0
 800210c:	4603      	mov	r3, r0
 800210e:	60b9      	str	r1, [r7, #8]
 8002110:	607a      	str	r2, [r7, #4]
 8002112:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002118:	f7ff ff3e 	bl	8001f98 <__NVIC_GetPriorityGrouping>
 800211c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	68b9      	ldr	r1, [r7, #8]
 8002122:	6978      	ldr	r0, [r7, #20]
 8002124:	f7ff ff8e 	bl	8002044 <NVIC_EncodePriority>
 8002128:	4602      	mov	r2, r0
 800212a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800212e:	4611      	mov	r1, r2
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff ff5d 	bl	8001ff0 <__NVIC_SetPriority>
}
 8002136:	bf00      	nop
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b082      	sub	sp, #8
 8002142:	af00      	add	r7, sp, #0
 8002144:	4603      	mov	r3, r0
 8002146:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff ff31 	bl	8001fb4 <__NVIC_EnableIRQ>
}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7ff ffa2 	bl	80020ac <SysTick_Config>
 8002168:	4603      	mov	r3, r0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002174:	b480      	push	{r7}
 8002176:	b089      	sub	sp, #36	@ 0x24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002182:	2300      	movs	r3, #0
 8002184:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002186:	2300      	movs	r3, #0
 8002188:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800218a:	2300      	movs	r3, #0
 800218c:	61fb      	str	r3, [r7, #28]
 800218e:	e16b      	b.n	8002468 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002190:	2201      	movs	r2, #1
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	4013      	ands	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	f040 815a 	bne.w	8002462 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d005      	beq.n	80021c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d130      	bne.n	8002228 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	2203      	movs	r2, #3
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43db      	mvns	r3, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4013      	ands	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021fc:	2201      	movs	r2, #1
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	091b      	lsrs	r3, r3, #4
 8002212:	f003 0201 	and.w	r2, r3, #1
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 0303 	and.w	r3, r3, #3
 8002230:	2b03      	cmp	r3, #3
 8002232:	d017      	beq.n	8002264 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	2203      	movs	r2, #3
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f003 0303 	and.w	r3, r3, #3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d123      	bne.n	80022b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	08da      	lsrs	r2, r3, #3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3208      	adds	r2, #8
 8002278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800227c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	220f      	movs	r2, #15
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	691a      	ldr	r2, [r3, #16]
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	08da      	lsrs	r2, r3, #3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	3208      	adds	r2, #8
 80022b2:	69b9      	ldr	r1, [r7, #24]
 80022b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	2203      	movs	r2, #3
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f003 0203 	and.w	r2, r3, #3
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 80b4 	beq.w	8002462 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	4b60      	ldr	r3, [pc, #384]	@ (8002480 <HAL_GPIO_Init+0x30c>)
 8002300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002302:	4a5f      	ldr	r2, [pc, #380]	@ (8002480 <HAL_GPIO_Init+0x30c>)
 8002304:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002308:	6453      	str	r3, [r2, #68]	@ 0x44
 800230a:	4b5d      	ldr	r3, [pc, #372]	@ (8002480 <HAL_GPIO_Init+0x30c>)
 800230c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002316:	4a5b      	ldr	r2, [pc, #364]	@ (8002484 <HAL_GPIO_Init+0x310>)
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	089b      	lsrs	r3, r3, #2
 800231c:	3302      	adds	r3, #2
 800231e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002322:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	220f      	movs	r2, #15
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43db      	mvns	r3, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4013      	ands	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a52      	ldr	r2, [pc, #328]	@ (8002488 <HAL_GPIO_Init+0x314>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d02b      	beq.n	800239a <HAL_GPIO_Init+0x226>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a51      	ldr	r2, [pc, #324]	@ (800248c <HAL_GPIO_Init+0x318>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d025      	beq.n	8002396 <HAL_GPIO_Init+0x222>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a50      	ldr	r2, [pc, #320]	@ (8002490 <HAL_GPIO_Init+0x31c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d01f      	beq.n	8002392 <HAL_GPIO_Init+0x21e>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a4f      	ldr	r2, [pc, #316]	@ (8002494 <HAL_GPIO_Init+0x320>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d019      	beq.n	800238e <HAL_GPIO_Init+0x21a>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a4e      	ldr	r2, [pc, #312]	@ (8002498 <HAL_GPIO_Init+0x324>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d013      	beq.n	800238a <HAL_GPIO_Init+0x216>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a4d      	ldr	r2, [pc, #308]	@ (800249c <HAL_GPIO_Init+0x328>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d00d      	beq.n	8002386 <HAL_GPIO_Init+0x212>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a4c      	ldr	r2, [pc, #304]	@ (80024a0 <HAL_GPIO_Init+0x32c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d007      	beq.n	8002382 <HAL_GPIO_Init+0x20e>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a4b      	ldr	r2, [pc, #300]	@ (80024a4 <HAL_GPIO_Init+0x330>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d101      	bne.n	800237e <HAL_GPIO_Init+0x20a>
 800237a:	2307      	movs	r3, #7
 800237c:	e00e      	b.n	800239c <HAL_GPIO_Init+0x228>
 800237e:	2308      	movs	r3, #8
 8002380:	e00c      	b.n	800239c <HAL_GPIO_Init+0x228>
 8002382:	2306      	movs	r3, #6
 8002384:	e00a      	b.n	800239c <HAL_GPIO_Init+0x228>
 8002386:	2305      	movs	r3, #5
 8002388:	e008      	b.n	800239c <HAL_GPIO_Init+0x228>
 800238a:	2304      	movs	r3, #4
 800238c:	e006      	b.n	800239c <HAL_GPIO_Init+0x228>
 800238e:	2303      	movs	r3, #3
 8002390:	e004      	b.n	800239c <HAL_GPIO_Init+0x228>
 8002392:	2302      	movs	r3, #2
 8002394:	e002      	b.n	800239c <HAL_GPIO_Init+0x228>
 8002396:	2301      	movs	r3, #1
 8002398:	e000      	b.n	800239c <HAL_GPIO_Init+0x228>
 800239a:	2300      	movs	r3, #0
 800239c:	69fa      	ldr	r2, [r7, #28]
 800239e:	f002 0203 	and.w	r2, r2, #3
 80023a2:	0092      	lsls	r2, r2, #2
 80023a4:	4093      	lsls	r3, r2
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023ac:	4935      	ldr	r1, [pc, #212]	@ (8002484 <HAL_GPIO_Init+0x310>)
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	089b      	lsrs	r3, r3, #2
 80023b2:	3302      	adds	r3, #2
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ba:	4b3b      	ldr	r3, [pc, #236]	@ (80024a8 <HAL_GPIO_Init+0x334>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	43db      	mvns	r3, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4013      	ands	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	4313      	orrs	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023de:	4a32      	ldr	r2, [pc, #200]	@ (80024a8 <HAL_GPIO_Init+0x334>)
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023e4:	4b30      	ldr	r3, [pc, #192]	@ (80024a8 <HAL_GPIO_Init+0x334>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	43db      	mvns	r3, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4013      	ands	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002408:	4a27      	ldr	r2, [pc, #156]	@ (80024a8 <HAL_GPIO_Init+0x334>)
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800240e:	4b26      	ldr	r3, [pc, #152]	@ (80024a8 <HAL_GPIO_Init+0x334>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	43db      	mvns	r3, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4013      	ands	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	4313      	orrs	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002432:	4a1d      	ldr	r2, [pc, #116]	@ (80024a8 <HAL_GPIO_Init+0x334>)
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002438:	4b1b      	ldr	r3, [pc, #108]	@ (80024a8 <HAL_GPIO_Init+0x334>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	43db      	mvns	r3, r3
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4013      	ands	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	4313      	orrs	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800245c:	4a12      	ldr	r2, [pc, #72]	@ (80024a8 <HAL_GPIO_Init+0x334>)
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3301      	adds	r3, #1
 8002466:	61fb      	str	r3, [r7, #28]
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	2b0f      	cmp	r3, #15
 800246c:	f67f ae90 	bls.w	8002190 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002470:	bf00      	nop
 8002472:	bf00      	nop
 8002474:	3724      	adds	r7, #36	@ 0x24
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	40023800 	.word	0x40023800
 8002484:	40013800 	.word	0x40013800
 8002488:	40020000 	.word	0x40020000
 800248c:	40020400 	.word	0x40020400
 8002490:	40020800 	.word	0x40020800
 8002494:	40020c00 	.word	0x40020c00
 8002498:	40021000 	.word	0x40021000
 800249c:	40021400 	.word	0x40021400
 80024a0:	40021800 	.word	0x40021800
 80024a4:	40021c00 	.word	0x40021c00
 80024a8:	40013c00 	.word	0x40013c00

080024ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	807b      	strh	r3, [r7, #2]
 80024b8:	4613      	mov	r3, r2
 80024ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024bc:	787b      	ldrb	r3, [r7, #1]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024c2:	887a      	ldrh	r2, [r7, #2]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024c8:	e003      	b.n	80024d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024ca:	887b      	ldrh	r3, [r7, #2]
 80024cc:	041a      	lsls	r2, r3, #16
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	619a      	str	r2, [r3, #24]
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024de:	b480      	push	{r7}
 80024e0:	b085      	sub	sp, #20
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	460b      	mov	r3, r1
 80024e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024f0:	887a      	ldrh	r2, [r7, #2]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	4013      	ands	r3, r2
 80024f6:	041a      	lsls	r2, r3, #16
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	43d9      	mvns	r1, r3
 80024fc:	887b      	ldrh	r3, [r7, #2]
 80024fe:	400b      	ands	r3, r1
 8002500:	431a      	orrs	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	619a      	str	r2, [r3, #24]
}
 8002506:	bf00      	nop
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
	...

08002514 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800251e:	4b08      	ldr	r3, [pc, #32]	@ (8002540 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002520:	695a      	ldr	r2, [r3, #20]
 8002522:	88fb      	ldrh	r3, [r7, #6]
 8002524:	4013      	ands	r3, r2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d006      	beq.n	8002538 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800252a:	4a05      	ldr	r2, [pc, #20]	@ (8002540 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800252c:	88fb      	ldrh	r3, [r7, #6]
 800252e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002530:	88fb      	ldrh	r3, [r7, #6]
 8002532:	4618      	mov	r0, r3
 8002534:	f000 f806 	bl	8002544 <HAL_GPIO_EXTI_Callback>
  }
}
 8002538:	bf00      	nop
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40013c00 	.word	0x40013c00

08002544 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
	...

0800255c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e267      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d075      	beq.n	8002666 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800257a:	4b88      	ldr	r3, [pc, #544]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 030c 	and.w	r3, r3, #12
 8002582:	2b04      	cmp	r3, #4
 8002584:	d00c      	beq.n	80025a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002586:	4b85      	ldr	r3, [pc, #532]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800258e:	2b08      	cmp	r3, #8
 8002590:	d112      	bne.n	80025b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002592:	4b82      	ldr	r3, [pc, #520]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800259a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800259e:	d10b      	bne.n	80025b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a0:	4b7e      	ldr	r3, [pc, #504]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d05b      	beq.n	8002664 <HAL_RCC_OscConfig+0x108>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d157      	bne.n	8002664 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e242      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025c0:	d106      	bne.n	80025d0 <HAL_RCC_OscConfig+0x74>
 80025c2:	4b76      	ldr	r3, [pc, #472]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a75      	ldr	r2, [pc, #468]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80025c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	e01d      	b.n	800260c <HAL_RCC_OscConfig+0xb0>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025d8:	d10c      	bne.n	80025f4 <HAL_RCC_OscConfig+0x98>
 80025da:	4b70      	ldr	r3, [pc, #448]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a6f      	ldr	r2, [pc, #444]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80025e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025e4:	6013      	str	r3, [r2, #0]
 80025e6:	4b6d      	ldr	r3, [pc, #436]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a6c      	ldr	r2, [pc, #432]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80025ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	e00b      	b.n	800260c <HAL_RCC_OscConfig+0xb0>
 80025f4:	4b69      	ldr	r3, [pc, #420]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a68      	ldr	r2, [pc, #416]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80025fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025fe:	6013      	str	r3, [r2, #0]
 8002600:	4b66      	ldr	r3, [pc, #408]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a65      	ldr	r2, [pc, #404]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002606:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800260a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d013      	beq.n	800263c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002614:	f7fe feac 	bl	8001370 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800261c:	f7fe fea8 	bl	8001370 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b64      	cmp	r3, #100	@ 0x64
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e207      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262e:	4b5b      	ldr	r3, [pc, #364]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0f0      	beq.n	800261c <HAL_RCC_OscConfig+0xc0>
 800263a:	e014      	b.n	8002666 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263c:	f7fe fe98 	bl	8001370 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002644:	f7fe fe94 	bl	8001370 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b64      	cmp	r3, #100	@ 0x64
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e1f3      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002656:	4b51      	ldr	r3, [pc, #324]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0xe8>
 8002662:	e000      	b.n	8002666 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d063      	beq.n	800273a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002672:	4b4a      	ldr	r3, [pc, #296]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 030c 	and.w	r3, r3, #12
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00b      	beq.n	8002696 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800267e:	4b47      	ldr	r3, [pc, #284]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002686:	2b08      	cmp	r3, #8
 8002688:	d11c      	bne.n	80026c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800268a:	4b44      	ldr	r3, [pc, #272]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d116      	bne.n	80026c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002696:	4b41      	ldr	r3, [pc, #260]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d005      	beq.n	80026ae <HAL_RCC_OscConfig+0x152>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d001      	beq.n	80026ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e1c7      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ae:	4b3b      	ldr	r3, [pc, #236]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	4937      	ldr	r1, [pc, #220]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026c2:	e03a      	b.n	800273a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d020      	beq.n	800270e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026cc:	4b34      	ldr	r3, [pc, #208]	@ (80027a0 <HAL_RCC_OscConfig+0x244>)
 80026ce:	2201      	movs	r2, #1
 80026d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d2:	f7fe fe4d 	bl	8001370 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026da:	f7fe fe49 	bl	8001370 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e1a8      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ec:	4b2b      	ldr	r3, [pc, #172]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0f0      	beq.n	80026da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f8:	4b28      	ldr	r3, [pc, #160]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	4925      	ldr	r1, [pc, #148]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002708:	4313      	orrs	r3, r2
 800270a:	600b      	str	r3, [r1, #0]
 800270c:	e015      	b.n	800273a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800270e:	4b24      	ldr	r3, [pc, #144]	@ (80027a0 <HAL_RCC_OscConfig+0x244>)
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002714:	f7fe fe2c 	bl	8001370 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800271c:	f7fe fe28 	bl	8001370 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e187      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800272e:	4b1b      	ldr	r3, [pc, #108]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1f0      	bne.n	800271c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	2b00      	cmp	r3, #0
 8002744:	d036      	beq.n	80027b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d016      	beq.n	800277c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800274e:	4b15      	ldr	r3, [pc, #84]	@ (80027a4 <HAL_RCC_OscConfig+0x248>)
 8002750:	2201      	movs	r2, #1
 8002752:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002754:	f7fe fe0c 	bl	8001370 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800275c:	f7fe fe08 	bl	8001370 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e167      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800276e:	4b0b      	ldr	r3, [pc, #44]	@ (800279c <HAL_RCC_OscConfig+0x240>)
 8002770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0f0      	beq.n	800275c <HAL_RCC_OscConfig+0x200>
 800277a:	e01b      	b.n	80027b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800277c:	4b09      	ldr	r3, [pc, #36]	@ (80027a4 <HAL_RCC_OscConfig+0x248>)
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002782:	f7fe fdf5 	bl	8001370 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002788:	e00e      	b.n	80027a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800278a:	f7fe fdf1 	bl	8001370 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d907      	bls.n	80027a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e150      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
 800279c:	40023800 	.word	0x40023800
 80027a0:	42470000 	.word	0x42470000
 80027a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027a8:	4b88      	ldr	r3, [pc, #544]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80027aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1ea      	bne.n	800278a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 8097 	beq.w	80028f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027c2:	2300      	movs	r3, #0
 80027c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027c6:	4b81      	ldr	r3, [pc, #516]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10f      	bne.n	80027f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	4b7d      	ldr	r3, [pc, #500]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027da:	4a7c      	ldr	r2, [pc, #496]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80027dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027e2:	4b7a      	ldr	r3, [pc, #488]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ee:	2301      	movs	r3, #1
 80027f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f2:	4b77      	ldr	r3, [pc, #476]	@ (80029d0 <HAL_RCC_OscConfig+0x474>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d118      	bne.n	8002830 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027fe:	4b74      	ldr	r3, [pc, #464]	@ (80029d0 <HAL_RCC_OscConfig+0x474>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a73      	ldr	r2, [pc, #460]	@ (80029d0 <HAL_RCC_OscConfig+0x474>)
 8002804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800280a:	f7fe fdb1 	bl	8001370 <HAL_GetTick>
 800280e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002810:	e008      	b.n	8002824 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002812:	f7fe fdad 	bl	8001370 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e10c      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002824:	4b6a      	ldr	r3, [pc, #424]	@ (80029d0 <HAL_RCC_OscConfig+0x474>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0f0      	beq.n	8002812 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d106      	bne.n	8002846 <HAL_RCC_OscConfig+0x2ea>
 8002838:	4b64      	ldr	r3, [pc, #400]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 800283a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800283c:	4a63      	ldr	r2, [pc, #396]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	6713      	str	r3, [r2, #112]	@ 0x70
 8002844:	e01c      	b.n	8002880 <HAL_RCC_OscConfig+0x324>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	2b05      	cmp	r3, #5
 800284c:	d10c      	bne.n	8002868 <HAL_RCC_OscConfig+0x30c>
 800284e:	4b5f      	ldr	r3, [pc, #380]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 8002850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002852:	4a5e      	ldr	r2, [pc, #376]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 8002854:	f043 0304 	orr.w	r3, r3, #4
 8002858:	6713      	str	r3, [r2, #112]	@ 0x70
 800285a:	4b5c      	ldr	r3, [pc, #368]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 800285c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800285e:	4a5b      	ldr	r2, [pc, #364]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	6713      	str	r3, [r2, #112]	@ 0x70
 8002866:	e00b      	b.n	8002880 <HAL_RCC_OscConfig+0x324>
 8002868:	4b58      	ldr	r3, [pc, #352]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 800286a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800286c:	4a57      	ldr	r2, [pc, #348]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 800286e:	f023 0301 	bic.w	r3, r3, #1
 8002872:	6713      	str	r3, [r2, #112]	@ 0x70
 8002874:	4b55      	ldr	r3, [pc, #340]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 8002876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002878:	4a54      	ldr	r2, [pc, #336]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 800287a:	f023 0304 	bic.w	r3, r3, #4
 800287e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d015      	beq.n	80028b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002888:	f7fe fd72 	bl	8001370 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800288e:	e00a      	b.n	80028a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002890:	f7fe fd6e 	bl	8001370 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800289e:	4293      	cmp	r3, r2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e0cb      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a6:	4b49      	ldr	r3, [pc, #292]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80028a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0ee      	beq.n	8002890 <HAL_RCC_OscConfig+0x334>
 80028b2:	e014      	b.n	80028de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b4:	f7fe fd5c 	bl	8001370 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ba:	e00a      	b.n	80028d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028bc:	f7fe fd58 	bl	8001370 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e0b5      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028d2:	4b3e      	ldr	r3, [pc, #248]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80028d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1ee      	bne.n	80028bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028de:	7dfb      	ldrb	r3, [r7, #23]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d105      	bne.n	80028f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e4:	4b39      	ldr	r3, [pc, #228]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80028e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e8:	4a38      	ldr	r2, [pc, #224]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80028ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 80a1 	beq.w	8002a3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028fa:	4b34      	ldr	r3, [pc, #208]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 030c 	and.w	r3, r3, #12
 8002902:	2b08      	cmp	r3, #8
 8002904:	d05c      	beq.n	80029c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	2b02      	cmp	r3, #2
 800290c:	d141      	bne.n	8002992 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290e:	4b31      	ldr	r3, [pc, #196]	@ (80029d4 <HAL_RCC_OscConfig+0x478>)
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002914:	f7fe fd2c 	bl	8001370 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800291c:	f7fe fd28 	bl	8001370 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e087      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800292e:	4b27      	ldr	r3, [pc, #156]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f0      	bne.n	800291c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69da      	ldr	r2, [r3, #28]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002948:	019b      	lsls	r3, r3, #6
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002950:	085b      	lsrs	r3, r3, #1
 8002952:	3b01      	subs	r3, #1
 8002954:	041b      	lsls	r3, r3, #16
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800295c:	061b      	lsls	r3, r3, #24
 800295e:	491b      	ldr	r1, [pc, #108]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 8002960:	4313      	orrs	r3, r2
 8002962:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002964:	4b1b      	ldr	r3, [pc, #108]	@ (80029d4 <HAL_RCC_OscConfig+0x478>)
 8002966:	2201      	movs	r2, #1
 8002968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296a:	f7fe fd01 	bl	8001370 <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002970:	e008      	b.n	8002984 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002972:	f7fe fcfd 	bl	8001370 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e05c      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002984:	4b11      	ldr	r3, [pc, #68]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0f0      	beq.n	8002972 <HAL_RCC_OscConfig+0x416>
 8002990:	e054      	b.n	8002a3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002992:	4b10      	ldr	r3, [pc, #64]	@ (80029d4 <HAL_RCC_OscConfig+0x478>)
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002998:	f7fe fcea 	bl	8001370 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a0:	f7fe fce6 	bl	8001370 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e045      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b2:	4b06      	ldr	r3, [pc, #24]	@ (80029cc <HAL_RCC_OscConfig+0x470>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x444>
 80029be:	e03d      	b.n	8002a3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d107      	bne.n	80029d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e038      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40007000 	.word	0x40007000
 80029d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a48 <HAL_RCC_OscConfig+0x4ec>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d028      	beq.n	8002a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d121      	bne.n	8002a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d11a      	bne.n	8002a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a08:	4013      	ands	r3, r2
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d111      	bne.n	8002a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a1e:	085b      	lsrs	r3, r3, #1
 8002a20:	3b01      	subs	r3, #1
 8002a22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d107      	bne.n	8002a38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d001      	beq.n	8002a3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e000      	b.n	8002a3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40023800 	.word	0x40023800

08002a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0cc      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a60:	4b68      	ldr	r3, [pc, #416]	@ (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d90c      	bls.n	8002a88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6e:	4b65      	ldr	r3, [pc, #404]	@ (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a76:	4b63      	ldr	r3, [pc, #396]	@ (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d001      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e0b8      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d020      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d005      	beq.n	8002aac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aa0:	4b59      	ldr	r3, [pc, #356]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	4a58      	ldr	r2, [pc, #352]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002aaa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0308 	and.w	r3, r3, #8
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d005      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ab8:	4b53      	ldr	r3, [pc, #332]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	4a52      	ldr	r2, [pc, #328]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ac2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac4:	4b50      	ldr	r3, [pc, #320]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	494d      	ldr	r1, [pc, #308]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d044      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d107      	bne.n	8002afa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aea:	4b47      	ldr	r3, [pc, #284]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d119      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e07f      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d003      	beq.n	8002b0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b06:	2b03      	cmp	r3, #3
 8002b08:	d107      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b0a:	4b3f      	ldr	r3, [pc, #252]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d109      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e06f      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1a:	4b3b      	ldr	r3, [pc, #236]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e067      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b2a:	4b37      	ldr	r3, [pc, #220]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f023 0203 	bic.w	r2, r3, #3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	4934      	ldr	r1, [pc, #208]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b3c:	f7fe fc18 	bl	8001370 <HAL_GetTick>
 8002b40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b42:	e00a      	b.n	8002b5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b44:	f7fe fc14 	bl	8001370 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e04f      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5a:	4b2b      	ldr	r3, [pc, #172]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 020c 	and.w	r2, r3, #12
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d1eb      	bne.n	8002b44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b6c:	4b25      	ldr	r3, [pc, #148]	@ (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d20c      	bcs.n	8002b94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7a:	4b22      	ldr	r3, [pc, #136]	@ (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b82:	4b20      	ldr	r3, [pc, #128]	@ (8002c04 <HAL_RCC_ClockConfig+0x1b8>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d001      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e032      	b.n	8002bfa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d008      	beq.n	8002bb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba0:	4b19      	ldr	r3, [pc, #100]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	4916      	ldr	r1, [pc, #88]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d009      	beq.n	8002bd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bbe:	4b12      	ldr	r3, [pc, #72]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	490e      	ldr	r1, [pc, #56]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bd2:	f000 f821 	bl	8002c18 <HAL_RCC_GetSysClockFreq>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002c08 <HAL_RCC_ClockConfig+0x1bc>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	091b      	lsrs	r3, r3, #4
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	490a      	ldr	r1, [pc, #40]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c0>)
 8002be4:	5ccb      	ldrb	r3, [r1, r3]
 8002be6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bea:	4a09      	ldr	r2, [pc, #36]	@ (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bee:	4b09      	ldr	r3, [pc, #36]	@ (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fe fb78 	bl	80012e8 <HAL_InitTick>

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40023c00 	.word	0x40023c00
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	08004b40 	.word	0x08004b40
 8002c10:	20000004 	.word	0x20000004
 8002c14:	20000008 	.word	0x20000008

08002c18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c1c:	b094      	sub	sp, #80	@ 0x50
 8002c1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c20:	2300      	movs	r3, #0
 8002c22:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c24:	2300      	movs	r3, #0
 8002c26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c28:	2300      	movs	r3, #0
 8002c2a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c30:	4b79      	ldr	r3, [pc, #484]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 030c 	and.w	r3, r3, #12
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d00d      	beq.n	8002c58 <HAL_RCC_GetSysClockFreq+0x40>
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	f200 80e1 	bhi.w	8002e04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d002      	beq.n	8002c4c <HAL_RCC_GetSysClockFreq+0x34>
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d003      	beq.n	8002c52 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c4a:	e0db      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c4c:	4b73      	ldr	r3, [pc, #460]	@ (8002e1c <HAL_RCC_GetSysClockFreq+0x204>)
 8002c4e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002c50:	e0db      	b.n	8002e0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c52:	4b73      	ldr	r3, [pc, #460]	@ (8002e20 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c56:	e0d8      	b.n	8002e0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c58:	4b6f      	ldr	r3, [pc, #444]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c60:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c62:	4b6d      	ldr	r3, [pc, #436]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d063      	beq.n	8002d36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c6e:	4b6a      	ldr	r3, [pc, #424]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	099b      	lsrs	r3, r3, #6
 8002c74:	2200      	movs	r2, #0
 8002c76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c78:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c80:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c82:	2300      	movs	r3, #0
 8002c84:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c8a:	4622      	mov	r2, r4
 8002c8c:	462b      	mov	r3, r5
 8002c8e:	f04f 0000 	mov.w	r0, #0
 8002c92:	f04f 0100 	mov.w	r1, #0
 8002c96:	0159      	lsls	r1, r3, #5
 8002c98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c9c:	0150      	lsls	r0, r2, #5
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4621      	mov	r1, r4
 8002ca4:	1a51      	subs	r1, r2, r1
 8002ca6:	6139      	str	r1, [r7, #16]
 8002ca8:	4629      	mov	r1, r5
 8002caa:	eb63 0301 	sbc.w	r3, r3, r1
 8002cae:	617b      	str	r3, [r7, #20]
 8002cb0:	f04f 0200 	mov.w	r2, #0
 8002cb4:	f04f 0300 	mov.w	r3, #0
 8002cb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cbc:	4659      	mov	r1, fp
 8002cbe:	018b      	lsls	r3, r1, #6
 8002cc0:	4651      	mov	r1, sl
 8002cc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cc6:	4651      	mov	r1, sl
 8002cc8:	018a      	lsls	r2, r1, #6
 8002cca:	4651      	mov	r1, sl
 8002ccc:	ebb2 0801 	subs.w	r8, r2, r1
 8002cd0:	4659      	mov	r1, fp
 8002cd2:	eb63 0901 	sbc.w	r9, r3, r1
 8002cd6:	f04f 0200 	mov.w	r2, #0
 8002cda:	f04f 0300 	mov.w	r3, #0
 8002cde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ce2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ce6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cea:	4690      	mov	r8, r2
 8002cec:	4699      	mov	r9, r3
 8002cee:	4623      	mov	r3, r4
 8002cf0:	eb18 0303 	adds.w	r3, r8, r3
 8002cf4:	60bb      	str	r3, [r7, #8]
 8002cf6:	462b      	mov	r3, r5
 8002cf8:	eb49 0303 	adc.w	r3, r9, r3
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	f04f 0200 	mov.w	r2, #0
 8002d02:	f04f 0300 	mov.w	r3, #0
 8002d06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d0a:	4629      	mov	r1, r5
 8002d0c:	024b      	lsls	r3, r1, #9
 8002d0e:	4621      	mov	r1, r4
 8002d10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d14:	4621      	mov	r1, r4
 8002d16:	024a      	lsls	r2, r1, #9
 8002d18:	4610      	mov	r0, r2
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d1e:	2200      	movs	r2, #0
 8002d20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d28:	f7fd faaa 	bl	8000280 <__aeabi_uldivmod>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4613      	mov	r3, r2
 8002d32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d34:	e058      	b.n	8002de8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d36:	4b38      	ldr	r3, [pc, #224]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	099b      	lsrs	r3, r3, #6
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	4618      	mov	r0, r3
 8002d40:	4611      	mov	r1, r2
 8002d42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d46:	623b      	str	r3, [r7, #32]
 8002d48:	2300      	movs	r3, #0
 8002d4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d50:	4642      	mov	r2, r8
 8002d52:	464b      	mov	r3, r9
 8002d54:	f04f 0000 	mov.w	r0, #0
 8002d58:	f04f 0100 	mov.w	r1, #0
 8002d5c:	0159      	lsls	r1, r3, #5
 8002d5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d62:	0150      	lsls	r0, r2, #5
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	4641      	mov	r1, r8
 8002d6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d6e:	4649      	mov	r1, r9
 8002d70:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	f04f 0300 	mov.w	r3, #0
 8002d7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d88:	ebb2 040a 	subs.w	r4, r2, sl
 8002d8c:	eb63 050b 	sbc.w	r5, r3, fp
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	00eb      	lsls	r3, r5, #3
 8002d9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d9e:	00e2      	lsls	r2, r4, #3
 8002da0:	4614      	mov	r4, r2
 8002da2:	461d      	mov	r5, r3
 8002da4:	4643      	mov	r3, r8
 8002da6:	18e3      	adds	r3, r4, r3
 8002da8:	603b      	str	r3, [r7, #0]
 8002daa:	464b      	mov	r3, r9
 8002dac:	eb45 0303 	adc.w	r3, r5, r3
 8002db0:	607b      	str	r3, [r7, #4]
 8002db2:	f04f 0200 	mov.w	r2, #0
 8002db6:	f04f 0300 	mov.w	r3, #0
 8002dba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dbe:	4629      	mov	r1, r5
 8002dc0:	028b      	lsls	r3, r1, #10
 8002dc2:	4621      	mov	r1, r4
 8002dc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dc8:	4621      	mov	r1, r4
 8002dca:	028a      	lsls	r2, r1, #10
 8002dcc:	4610      	mov	r0, r2
 8002dce:	4619      	mov	r1, r3
 8002dd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	61bb      	str	r3, [r7, #24]
 8002dd6:	61fa      	str	r2, [r7, #28]
 8002dd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ddc:	f7fd fa50 	bl	8000280 <__aeabi_uldivmod>
 8002de0:	4602      	mov	r2, r0
 8002de2:	460b      	mov	r3, r1
 8002de4:	4613      	mov	r3, r2
 8002de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002de8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e18 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	0c1b      	lsrs	r3, r3, #16
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	3301      	adds	r3, #1
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002df8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002dfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e02:	e002      	b.n	8002e0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e04:	4b05      	ldr	r3, [pc, #20]	@ (8002e1c <HAL_RCC_GetSysClockFreq+0x204>)
 8002e06:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3750      	adds	r7, #80	@ 0x50
 8002e10:	46bd      	mov	sp, r7
 8002e12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e16:	bf00      	nop
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	00f42400 	.word	0x00f42400
 8002e20:	007a1200 	.word	0x007a1200

08002e24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e28:	4b03      	ldr	r3, [pc, #12]	@ (8002e38 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	20000004 	.word	0x20000004

08002e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e40:	f7ff fff0 	bl	8002e24 <HAL_RCC_GetHCLKFreq>
 8002e44:	4602      	mov	r2, r0
 8002e46:	4b05      	ldr	r3, [pc, #20]	@ (8002e5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	0a9b      	lsrs	r3, r3, #10
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	4903      	ldr	r1, [pc, #12]	@ (8002e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e52:	5ccb      	ldrb	r3, [r1, r3]
 8002e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	08004b50 	.word	0x08004b50

08002e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e68:	f7ff ffdc 	bl	8002e24 <HAL_RCC_GetHCLKFreq>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	4b05      	ldr	r3, [pc, #20]	@ (8002e84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	0b5b      	lsrs	r3, r3, #13
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	4903      	ldr	r1, [pc, #12]	@ (8002e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e7a:	5ccb      	ldrb	r3, [r1, r3]
 8002e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40023800 	.word	0x40023800
 8002e88:	08004b50 	.word	0x08004b50

08002e8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e041      	b.n	8002f22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d106      	bne.n	8002eb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7fd ffd6 	bl	8000e64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3304      	adds	r3, #4
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4610      	mov	r0, r2
 8002ecc:	f000 fab6 	bl	800343c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d001      	beq.n	8002f44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e04e      	b.n	8002fe2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2202      	movs	r2, #2
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0201 	orr.w	r2, r2, #1
 8002f5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a23      	ldr	r2, [pc, #140]	@ (8002ff0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d022      	beq.n	8002fac <HAL_TIM_Base_Start_IT+0x80>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f6e:	d01d      	beq.n	8002fac <HAL_TIM_Base_Start_IT+0x80>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a1f      	ldr	r2, [pc, #124]	@ (8002ff4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d018      	beq.n	8002fac <HAL_TIM_Base_Start_IT+0x80>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a1e      	ldr	r2, [pc, #120]	@ (8002ff8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d013      	beq.n	8002fac <HAL_TIM_Base_Start_IT+0x80>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a1c      	ldr	r2, [pc, #112]	@ (8002ffc <HAL_TIM_Base_Start_IT+0xd0>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d00e      	beq.n	8002fac <HAL_TIM_Base_Start_IT+0x80>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a1b      	ldr	r2, [pc, #108]	@ (8003000 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d009      	beq.n	8002fac <HAL_TIM_Base_Start_IT+0x80>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a19      	ldr	r2, [pc, #100]	@ (8003004 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d004      	beq.n	8002fac <HAL_TIM_Base_Start_IT+0x80>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a18      	ldr	r2, [pc, #96]	@ (8003008 <HAL_TIM_Base_Start_IT+0xdc>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d111      	bne.n	8002fd0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2b06      	cmp	r3, #6
 8002fbc:	d010      	beq.n	8002fe0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f042 0201 	orr.w	r2, r2, #1
 8002fcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fce:	e007      	b.n	8002fe0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f042 0201 	orr.w	r2, r2, #1
 8002fde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3714      	adds	r7, #20
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	40010000 	.word	0x40010000
 8002ff4:	40000400 	.word	0x40000400
 8002ff8:	40000800 	.word	0x40000800
 8002ffc:	40000c00 	.word	0x40000c00
 8003000:	40010400 	.word	0x40010400
 8003004:	40014000 	.word	0x40014000
 8003008:	40001800 	.word	0x40001800

0800300c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 0201 	bic.w	r2, r2, #1
 8003022:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6a1a      	ldr	r2, [r3, #32]
 800302a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800302e:	4013      	ands	r3, r2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10f      	bne.n	8003054 <HAL_TIM_Base_Stop_IT+0x48>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6a1a      	ldr	r2, [r3, #32]
 800303a:	f240 4344 	movw	r3, #1092	@ 0x444
 800303e:	4013      	ands	r3, r2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d107      	bne.n	8003054 <HAL_TIM_Base_Stop_IT+0x48>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0201 	bic.w	r2, r2, #1
 8003052:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b084      	sub	sp, #16
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d020      	beq.n	80030ce <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d01b      	beq.n	80030ce <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f06f 0202 	mvn.w	r2, #2
 800309e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	f003 0303 	and.w	r3, r3, #3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 f9a3 	bl	8003400 <HAL_TIM_IC_CaptureCallback>
 80030ba:	e005      	b.n	80030c8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f995 	bl	80033ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f9a6 	bl	8003414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d020      	beq.n	800311a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f003 0304 	and.w	r3, r3, #4
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d01b      	beq.n	800311a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f06f 0204 	mvn.w	r2, #4
 80030ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2202      	movs	r2, #2
 80030f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 f97d 	bl	8003400 <HAL_TIM_IC_CaptureCallback>
 8003106:	e005      	b.n	8003114 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f96f 	bl	80033ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f980 	bl	8003414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	f003 0308 	and.w	r3, r3, #8
 8003120:	2b00      	cmp	r3, #0
 8003122:	d020      	beq.n	8003166 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	2b00      	cmp	r3, #0
 800312c:	d01b      	beq.n	8003166 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f06f 0208 	mvn.w	r2, #8
 8003136:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2204      	movs	r2, #4
 800313c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	f003 0303 	and.w	r3, r3, #3
 8003148:	2b00      	cmp	r3, #0
 800314a:	d003      	beq.n	8003154 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 f957 	bl	8003400 <HAL_TIM_IC_CaptureCallback>
 8003152:	e005      	b.n	8003160 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f949 	bl	80033ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f95a 	bl	8003414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	f003 0310 	and.w	r3, r3, #16
 800316c:	2b00      	cmp	r3, #0
 800316e:	d020      	beq.n	80031b2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f003 0310 	and.w	r3, r3, #16
 8003176:	2b00      	cmp	r3, #0
 8003178:	d01b      	beq.n	80031b2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f06f 0210 	mvn.w	r2, #16
 8003182:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2208      	movs	r2, #8
 8003188:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 f931 	bl	8003400 <HAL_TIM_IC_CaptureCallback>
 800319e:	e005      	b.n	80031ac <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f923 	bl	80033ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f934 	bl	8003414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00c      	beq.n	80031d6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d007      	beq.n	80031d6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f06f 0201 	mvn.w	r2, #1
 80031ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 f901 	bl	80033d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00c      	beq.n	80031fa <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d007      	beq.n	80031fa <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80031f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 faed 	bl	80037d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00c      	beq.n	800321e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800320a:	2b00      	cmp	r3, #0
 800320c:	d007      	beq.n	800321e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 f905 	bl	8003428 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	f003 0320 	and.w	r3, r3, #32
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00c      	beq.n	8003242 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f003 0320 	and.w	r3, r3, #32
 800322e:	2b00      	cmp	r3, #0
 8003230:	d007      	beq.n	8003242 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f06f 0220 	mvn.w	r2, #32
 800323a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 fabf 	bl	80037c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003242:	bf00      	nop
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b084      	sub	sp, #16
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
 8003252:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003254:	2300      	movs	r3, #0
 8003256:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800325e:	2b01      	cmp	r3, #1
 8003260:	d101      	bne.n	8003266 <HAL_TIM_ConfigClockSource+0x1c>
 8003262:	2302      	movs	r3, #2
 8003264:	e0b4      	b.n	80033d0 <HAL_TIM_ConfigClockSource+0x186>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2202      	movs	r2, #2
 8003272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003284:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800328c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800329e:	d03e      	beq.n	800331e <HAL_TIM_ConfigClockSource+0xd4>
 80032a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032a4:	f200 8087 	bhi.w	80033b6 <HAL_TIM_ConfigClockSource+0x16c>
 80032a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032ac:	f000 8086 	beq.w	80033bc <HAL_TIM_ConfigClockSource+0x172>
 80032b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032b4:	d87f      	bhi.n	80033b6 <HAL_TIM_ConfigClockSource+0x16c>
 80032b6:	2b70      	cmp	r3, #112	@ 0x70
 80032b8:	d01a      	beq.n	80032f0 <HAL_TIM_ConfigClockSource+0xa6>
 80032ba:	2b70      	cmp	r3, #112	@ 0x70
 80032bc:	d87b      	bhi.n	80033b6 <HAL_TIM_ConfigClockSource+0x16c>
 80032be:	2b60      	cmp	r3, #96	@ 0x60
 80032c0:	d050      	beq.n	8003364 <HAL_TIM_ConfigClockSource+0x11a>
 80032c2:	2b60      	cmp	r3, #96	@ 0x60
 80032c4:	d877      	bhi.n	80033b6 <HAL_TIM_ConfigClockSource+0x16c>
 80032c6:	2b50      	cmp	r3, #80	@ 0x50
 80032c8:	d03c      	beq.n	8003344 <HAL_TIM_ConfigClockSource+0xfa>
 80032ca:	2b50      	cmp	r3, #80	@ 0x50
 80032cc:	d873      	bhi.n	80033b6 <HAL_TIM_ConfigClockSource+0x16c>
 80032ce:	2b40      	cmp	r3, #64	@ 0x40
 80032d0:	d058      	beq.n	8003384 <HAL_TIM_ConfigClockSource+0x13a>
 80032d2:	2b40      	cmp	r3, #64	@ 0x40
 80032d4:	d86f      	bhi.n	80033b6 <HAL_TIM_ConfigClockSource+0x16c>
 80032d6:	2b30      	cmp	r3, #48	@ 0x30
 80032d8:	d064      	beq.n	80033a4 <HAL_TIM_ConfigClockSource+0x15a>
 80032da:	2b30      	cmp	r3, #48	@ 0x30
 80032dc:	d86b      	bhi.n	80033b6 <HAL_TIM_ConfigClockSource+0x16c>
 80032de:	2b20      	cmp	r3, #32
 80032e0:	d060      	beq.n	80033a4 <HAL_TIM_ConfigClockSource+0x15a>
 80032e2:	2b20      	cmp	r3, #32
 80032e4:	d867      	bhi.n	80033b6 <HAL_TIM_ConfigClockSource+0x16c>
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d05c      	beq.n	80033a4 <HAL_TIM_ConfigClockSource+0x15a>
 80032ea:	2b10      	cmp	r3, #16
 80032ec:	d05a      	beq.n	80033a4 <HAL_TIM_ConfigClockSource+0x15a>
 80032ee:	e062      	b.n	80033b6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003300:	f000 f9c2 	bl	8003688 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003312:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	609a      	str	r2, [r3, #8]
      break;
 800331c:	e04f      	b.n	80033be <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800332e:	f000 f9ab 	bl	8003688 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003340:	609a      	str	r2, [r3, #8]
      break;
 8003342:	e03c      	b.n	80033be <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003350:	461a      	mov	r2, r3
 8003352:	f000 f91f 	bl	8003594 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2150      	movs	r1, #80	@ 0x50
 800335c:	4618      	mov	r0, r3
 800335e:	f000 f978 	bl	8003652 <TIM_ITRx_SetConfig>
      break;
 8003362:	e02c      	b.n	80033be <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003370:	461a      	mov	r2, r3
 8003372:	f000 f93e 	bl	80035f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2160      	movs	r1, #96	@ 0x60
 800337c:	4618      	mov	r0, r3
 800337e:	f000 f968 	bl	8003652 <TIM_ITRx_SetConfig>
      break;
 8003382:	e01c      	b.n	80033be <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003390:	461a      	mov	r2, r3
 8003392:	f000 f8ff 	bl	8003594 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2140      	movs	r1, #64	@ 0x40
 800339c:	4618      	mov	r0, r3
 800339e:	f000 f958 	bl	8003652 <TIM_ITRx_SetConfig>
      break;
 80033a2:	e00c      	b.n	80033be <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4619      	mov	r1, r3
 80033ae:	4610      	mov	r0, r2
 80033b0:	f000 f94f 	bl	8003652 <TIM_ITRx_SetConfig>
      break;
 80033b4:	e003      	b.n	80033be <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	73fb      	strb	r3, [r7, #15]
      break;
 80033ba:	e000      	b.n	80033be <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80033ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a46      	ldr	r2, [pc, #280]	@ (8003568 <TIM_Base_SetConfig+0x12c>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d013      	beq.n	800347c <TIM_Base_SetConfig+0x40>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800345a:	d00f      	beq.n	800347c <TIM_Base_SetConfig+0x40>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a43      	ldr	r2, [pc, #268]	@ (800356c <TIM_Base_SetConfig+0x130>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d00b      	beq.n	800347c <TIM_Base_SetConfig+0x40>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a42      	ldr	r2, [pc, #264]	@ (8003570 <TIM_Base_SetConfig+0x134>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d007      	beq.n	800347c <TIM_Base_SetConfig+0x40>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a41      	ldr	r2, [pc, #260]	@ (8003574 <TIM_Base_SetConfig+0x138>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d003      	beq.n	800347c <TIM_Base_SetConfig+0x40>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a40      	ldr	r2, [pc, #256]	@ (8003578 <TIM_Base_SetConfig+0x13c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d108      	bne.n	800348e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003482:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	4313      	orrs	r3, r2
 800348c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a35      	ldr	r2, [pc, #212]	@ (8003568 <TIM_Base_SetConfig+0x12c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d02b      	beq.n	80034ee <TIM_Base_SetConfig+0xb2>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800349c:	d027      	beq.n	80034ee <TIM_Base_SetConfig+0xb2>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a32      	ldr	r2, [pc, #200]	@ (800356c <TIM_Base_SetConfig+0x130>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d023      	beq.n	80034ee <TIM_Base_SetConfig+0xb2>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a31      	ldr	r2, [pc, #196]	@ (8003570 <TIM_Base_SetConfig+0x134>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d01f      	beq.n	80034ee <TIM_Base_SetConfig+0xb2>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a30      	ldr	r2, [pc, #192]	@ (8003574 <TIM_Base_SetConfig+0x138>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d01b      	beq.n	80034ee <TIM_Base_SetConfig+0xb2>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a2f      	ldr	r2, [pc, #188]	@ (8003578 <TIM_Base_SetConfig+0x13c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d017      	beq.n	80034ee <TIM_Base_SetConfig+0xb2>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a2e      	ldr	r2, [pc, #184]	@ (800357c <TIM_Base_SetConfig+0x140>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d013      	beq.n	80034ee <TIM_Base_SetConfig+0xb2>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a2d      	ldr	r2, [pc, #180]	@ (8003580 <TIM_Base_SetConfig+0x144>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d00f      	beq.n	80034ee <TIM_Base_SetConfig+0xb2>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a2c      	ldr	r2, [pc, #176]	@ (8003584 <TIM_Base_SetConfig+0x148>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d00b      	beq.n	80034ee <TIM_Base_SetConfig+0xb2>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a2b      	ldr	r2, [pc, #172]	@ (8003588 <TIM_Base_SetConfig+0x14c>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d007      	beq.n	80034ee <TIM_Base_SetConfig+0xb2>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a2a      	ldr	r2, [pc, #168]	@ (800358c <TIM_Base_SetConfig+0x150>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d003      	beq.n	80034ee <TIM_Base_SetConfig+0xb2>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a29      	ldr	r2, [pc, #164]	@ (8003590 <TIM_Base_SetConfig+0x154>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d108      	bne.n	8003500 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	4313      	orrs	r3, r2
 800350c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a10      	ldr	r2, [pc, #64]	@ (8003568 <TIM_Base_SetConfig+0x12c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d003      	beq.n	8003534 <TIM_Base_SetConfig+0xf8>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a12      	ldr	r2, [pc, #72]	@ (8003578 <TIM_Base_SetConfig+0x13c>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d103      	bne.n	800353c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	691a      	ldr	r2, [r3, #16]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b01      	cmp	r3, #1
 800354c:	d105      	bne.n	800355a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	f023 0201 	bic.w	r2, r3, #1
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	611a      	str	r2, [r3, #16]
  }
}
 800355a:	bf00      	nop
 800355c:	3714      	adds	r7, #20
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	40010000 	.word	0x40010000
 800356c:	40000400 	.word	0x40000400
 8003570:	40000800 	.word	0x40000800
 8003574:	40000c00 	.word	0x40000c00
 8003578:	40010400 	.word	0x40010400
 800357c:	40014000 	.word	0x40014000
 8003580:	40014400 	.word	0x40014400
 8003584:	40014800 	.word	0x40014800
 8003588:	40001800 	.word	0x40001800
 800358c:	40001c00 	.word	0x40001c00
 8003590:	40002000 	.word	0x40002000

08003594 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003594:	b480      	push	{r7}
 8003596:	b087      	sub	sp, #28
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	f023 0201 	bic.w	r2, r3, #1
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	011b      	lsls	r3, r3, #4
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f023 030a 	bic.w	r3, r3, #10
 80035d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	621a      	str	r2, [r3, #32]
}
 80035e6:	bf00      	nop
 80035e8:	371c      	adds	r7, #28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b087      	sub	sp, #28
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	60f8      	str	r0, [r7, #12]
 80035fa:	60b9      	str	r1, [r7, #8]
 80035fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	f023 0210 	bic.w	r2, r3, #16
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800361c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	031b      	lsls	r3, r3, #12
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	4313      	orrs	r3, r2
 8003626:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800362e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	011b      	lsls	r3, r3, #4
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	4313      	orrs	r3, r2
 8003638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	621a      	str	r2, [r3, #32]
}
 8003646:	bf00      	nop
 8003648:	371c      	adds	r7, #28
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003652:	b480      	push	{r7}
 8003654:	b085      	sub	sp, #20
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
 800365a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003668:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4313      	orrs	r3, r2
 8003670:	f043 0307 	orr.w	r3, r3, #7
 8003674:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	609a      	str	r2, [r3, #8]
}
 800367c:	bf00      	nop
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003688:	b480      	push	{r7}
 800368a:	b087      	sub	sp, #28
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
 8003694:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	021a      	lsls	r2, r3, #8
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	431a      	orrs	r2, r3
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	609a      	str	r2, [r3, #8]
}
 80036bc:	bf00      	nop
 80036be:	371c      	adds	r7, #28
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d101      	bne.n	80036e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036dc:	2302      	movs	r3, #2
 80036de:	e05a      	b.n	8003796 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003706:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	4313      	orrs	r3, r2
 8003710:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a21      	ldr	r2, [pc, #132]	@ (80037a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d022      	beq.n	800376a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800372c:	d01d      	beq.n	800376a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a1d      	ldr	r2, [pc, #116]	@ (80037a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d018      	beq.n	800376a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a1b      	ldr	r2, [pc, #108]	@ (80037ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d013      	beq.n	800376a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a1a      	ldr	r2, [pc, #104]	@ (80037b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d00e      	beq.n	800376a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a18      	ldr	r2, [pc, #96]	@ (80037b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d009      	beq.n	800376a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a17      	ldr	r2, [pc, #92]	@ (80037b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d004      	beq.n	800376a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a15      	ldr	r2, [pc, #84]	@ (80037bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d10c      	bne.n	8003784 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003770:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	4313      	orrs	r3, r2
 800377a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3714      	adds	r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	40010000 	.word	0x40010000
 80037a8:	40000400 	.word	0x40000400
 80037ac:	40000800 	.word	0x40000800
 80037b0:	40000c00 	.word	0x40000c00
 80037b4:	40010400 	.word	0x40010400
 80037b8:	40014000 	.word	0x40014000
 80037bc:	40001800 	.word	0x40001800

080037c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e042      	b.n	8003880 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d106      	bne.n	8003814 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7fd fba8 	bl	8000f64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2224      	movs	r2, #36	@ 0x24
 8003818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68da      	ldr	r2, [r3, #12]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800382a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 fa09 	bl	8003c44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	691a      	ldr	r2, [r3, #16]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003840:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	695a      	ldr	r2, [r3, #20]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003850:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68da      	ldr	r2, [r3, #12]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003860:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2220      	movs	r2, #32
 800386c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2220      	movs	r2, #32
 8003874:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b08a      	sub	sp, #40	@ 0x28
 800388c:	af02      	add	r7, sp, #8
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	603b      	str	r3, [r7, #0]
 8003894:	4613      	mov	r3, r2
 8003896:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b20      	cmp	r3, #32
 80038a6:	d175      	bne.n	8003994 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d002      	beq.n	80038b4 <HAL_UART_Transmit+0x2c>
 80038ae:	88fb      	ldrh	r3, [r7, #6]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e06e      	b.n	8003996 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2221      	movs	r2, #33	@ 0x21
 80038c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038c6:	f7fd fd53 	bl	8001370 <HAL_GetTick>
 80038ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	88fa      	ldrh	r2, [r7, #6]
 80038d0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	88fa      	ldrh	r2, [r7, #6]
 80038d6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038e0:	d108      	bne.n	80038f4 <HAL_UART_Transmit+0x6c>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d104      	bne.n	80038f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80038ea:	2300      	movs	r3, #0
 80038ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	61bb      	str	r3, [r7, #24]
 80038f2:	e003      	b.n	80038fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038f8:	2300      	movs	r3, #0
 80038fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038fc:	e02e      	b.n	800395c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2200      	movs	r2, #0
 8003906:	2180      	movs	r1, #128	@ 0x80
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f000 f8df 	bl	8003acc <UART_WaitOnFlagUntilTimeout>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d005      	beq.n	8003920 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2220      	movs	r2, #32
 8003918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e03a      	b.n	8003996 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10b      	bne.n	800393e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	881b      	ldrh	r3, [r3, #0]
 800392a:	461a      	mov	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003934:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	3302      	adds	r3, #2
 800393a:	61bb      	str	r3, [r7, #24]
 800393c:	e007      	b.n	800394e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	781a      	ldrb	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	3301      	adds	r3, #1
 800394c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003952:	b29b      	uxth	r3, r3
 8003954:	3b01      	subs	r3, #1
 8003956:	b29a      	uxth	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003960:	b29b      	uxth	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1cb      	bne.n	80038fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2200      	movs	r2, #0
 800396e:	2140      	movs	r1, #64	@ 0x40
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 f8ab 	bl	8003acc <UART_WaitOnFlagUntilTimeout>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d005      	beq.n	8003988 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2220      	movs	r2, #32
 8003980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e006      	b.n	8003996 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2220      	movs	r2, #32
 800398c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003990:	2300      	movs	r3, #0
 8003992:	e000      	b.n	8003996 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003994:	2302      	movs	r3, #2
  }
}
 8003996:	4618      	mov	r0, r3
 8003998:	3720      	adds	r7, #32
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b08a      	sub	sp, #40	@ 0x28
 80039a2:	af02      	add	r7, sp, #8
 80039a4:	60f8      	str	r0, [r7, #12]
 80039a6:	60b9      	str	r1, [r7, #8]
 80039a8:	603b      	str	r3, [r7, #0]
 80039aa:	4613      	mov	r3, r2
 80039ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b20      	cmp	r3, #32
 80039bc:	f040 8081 	bne.w	8003ac2 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d002      	beq.n	80039cc <HAL_UART_Receive+0x2e>
 80039c6:	88fb      	ldrh	r3, [r7, #6]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e079      	b.n	8003ac4 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2222      	movs	r2, #34	@ 0x22
 80039da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039e4:	f7fd fcc4 	bl	8001370 <HAL_GetTick>
 80039e8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	88fa      	ldrh	r2, [r7, #6]
 80039ee:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	88fa      	ldrh	r2, [r7, #6]
 80039f4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039fe:	d108      	bne.n	8003a12 <HAL_UART_Receive+0x74>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d104      	bne.n	8003a12 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	61bb      	str	r3, [r7, #24]
 8003a10:	e003      	b.n	8003a1a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a16:	2300      	movs	r3, #0
 8003a18:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003a1a:	e047      	b.n	8003aac <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	9300      	str	r3, [sp, #0]
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	2200      	movs	r2, #0
 8003a24:	2120      	movs	r1, #32
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f000 f850 	bl	8003acc <UART_WaitOnFlagUntilTimeout>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d005      	beq.n	8003a3e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2220      	movs	r2, #32
 8003a36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e042      	b.n	8003ac4 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10c      	bne.n	8003a5e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	3302      	adds	r3, #2
 8003a5a:	61bb      	str	r3, [r7, #24]
 8003a5c:	e01f      	b.n	8003a9e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a66:	d007      	beq.n	8003a78 <HAL_UART_Receive+0xda>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10a      	bne.n	8003a86 <HAL_UART_Receive+0xe8>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d106      	bne.n	8003a86 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	701a      	strb	r2, [r3, #0]
 8003a84:	e008      	b.n	8003a98 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1b2      	bne.n	8003a1c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	e000      	b.n	8003ac4 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003ac2:	2302      	movs	r3, #2
  }
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3720      	adds	r7, #32
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	603b      	str	r3, [r7, #0]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003adc:	e03b      	b.n	8003b56 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ade:	6a3b      	ldr	r3, [r7, #32]
 8003ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae4:	d037      	beq.n	8003b56 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ae6:	f7fd fc43 	bl	8001370 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	6a3a      	ldr	r2, [r7, #32]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d302      	bcc.n	8003afc <UART_WaitOnFlagUntilTimeout+0x30>
 8003af6:	6a3b      	ldr	r3, [r7, #32]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e03a      	b.n	8003b76 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	f003 0304 	and.w	r3, r3, #4
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d023      	beq.n	8003b56 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2b80      	cmp	r3, #128	@ 0x80
 8003b12:	d020      	beq.n	8003b56 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2b40      	cmp	r3, #64	@ 0x40
 8003b18:	d01d      	beq.n	8003b56 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0308 	and.w	r3, r3, #8
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d116      	bne.n	8003b56 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003b28:	2300      	movs	r3, #0
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 f81d 	bl	8003b7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2208      	movs	r2, #8
 8003b48:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e00f      	b.n	8003b76 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	bf0c      	ite	eq
 8003b66:	2301      	moveq	r3, #1
 8003b68:	2300      	movne	r3, #0
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	79fb      	ldrb	r3, [r7, #7]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d0b4      	beq.n	8003ade <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3718      	adds	r7, #24
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b095      	sub	sp, #84	@ 0x54
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	330c      	adds	r3, #12
 8003b8c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b90:	e853 3f00 	ldrex	r3, [r3]
 8003b94:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	330c      	adds	r3, #12
 8003ba4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ba6:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003baa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003bac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003bae:	e841 2300 	strex	r3, r2, [r1]
 8003bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1e5      	bne.n	8003b86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	3314      	adds	r3, #20
 8003bc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc2:	6a3b      	ldr	r3, [r7, #32]
 8003bc4:	e853 3f00 	ldrex	r3, [r3]
 8003bc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	f023 0301 	bic.w	r3, r3, #1
 8003bd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	3314      	adds	r3, #20
 8003bd8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003be0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003be2:	e841 2300 	strex	r3, r2, [r1]
 8003be6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1e5      	bne.n	8003bba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d119      	bne.n	8003c2a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	330c      	adds	r3, #12
 8003bfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	e853 3f00 	ldrex	r3, [r3]
 8003c04:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	f023 0310 	bic.w	r3, r3, #16
 8003c0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	330c      	adds	r3, #12
 8003c14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c16:	61ba      	str	r2, [r7, #24]
 8003c18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1a:	6979      	ldr	r1, [r7, #20]
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	e841 2300 	strex	r3, r2, [r1]
 8003c22:	613b      	str	r3, [r7, #16]
   return(result);
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1e5      	bne.n	8003bf6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c38:	bf00      	nop
 8003c3a:	3754      	adds	r7, #84	@ 0x54
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c48:	b0c0      	sub	sp, #256	@ 0x100
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c60:	68d9      	ldr	r1, [r3, #12]
 8003c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	ea40 0301 	orr.w	r3, r0, r1
 8003c6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	431a      	orrs	r2, r3
 8003c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003c9c:	f021 010c 	bic.w	r1, r1, #12
 8003ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003caa:	430b      	orrs	r3, r1
 8003cac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cbe:	6999      	ldr	r1, [r3, #24]
 8003cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	ea40 0301 	orr.w	r3, r0, r1
 8003cca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	4b8f      	ldr	r3, [pc, #572]	@ (8003f10 <UART_SetConfig+0x2cc>)
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d005      	beq.n	8003ce4 <UART_SetConfig+0xa0>
 8003cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	4b8d      	ldr	r3, [pc, #564]	@ (8003f14 <UART_SetConfig+0x2d0>)
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d104      	bne.n	8003cee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ce4:	f7ff f8be 	bl	8002e64 <HAL_RCC_GetPCLK2Freq>
 8003ce8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003cec:	e003      	b.n	8003cf6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cee:	f7ff f8a5 	bl	8002e3c <HAL_RCC_GetPCLK1Freq>
 8003cf2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d00:	f040 810c 	bne.w	8003f1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d0e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003d12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003d16:	4622      	mov	r2, r4
 8003d18:	462b      	mov	r3, r5
 8003d1a:	1891      	adds	r1, r2, r2
 8003d1c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003d1e:	415b      	adcs	r3, r3
 8003d20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d26:	4621      	mov	r1, r4
 8003d28:	eb12 0801 	adds.w	r8, r2, r1
 8003d2c:	4629      	mov	r1, r5
 8003d2e:	eb43 0901 	adc.w	r9, r3, r1
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	f04f 0300 	mov.w	r3, #0
 8003d3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d46:	4690      	mov	r8, r2
 8003d48:	4699      	mov	r9, r3
 8003d4a:	4623      	mov	r3, r4
 8003d4c:	eb18 0303 	adds.w	r3, r8, r3
 8003d50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003d54:	462b      	mov	r3, r5
 8003d56:	eb49 0303 	adc.w	r3, r9, r3
 8003d5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003d6a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003d6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003d72:	460b      	mov	r3, r1
 8003d74:	18db      	adds	r3, r3, r3
 8003d76:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d78:	4613      	mov	r3, r2
 8003d7a:	eb42 0303 	adc.w	r3, r2, r3
 8003d7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003d84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003d88:	f7fc fa7a 	bl	8000280 <__aeabi_uldivmod>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	460b      	mov	r3, r1
 8003d90:	4b61      	ldr	r3, [pc, #388]	@ (8003f18 <UART_SetConfig+0x2d4>)
 8003d92:	fba3 2302 	umull	r2, r3, r3, r2
 8003d96:	095b      	lsrs	r3, r3, #5
 8003d98:	011c      	lsls	r4, r3, #4
 8003d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003da4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003da8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003dac:	4642      	mov	r2, r8
 8003dae:	464b      	mov	r3, r9
 8003db0:	1891      	adds	r1, r2, r2
 8003db2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003db4:	415b      	adcs	r3, r3
 8003db6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003db8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003dbc:	4641      	mov	r1, r8
 8003dbe:	eb12 0a01 	adds.w	sl, r2, r1
 8003dc2:	4649      	mov	r1, r9
 8003dc4:	eb43 0b01 	adc.w	fp, r3, r1
 8003dc8:	f04f 0200 	mov.w	r2, #0
 8003dcc:	f04f 0300 	mov.w	r3, #0
 8003dd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003dd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003dd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ddc:	4692      	mov	sl, r2
 8003dde:	469b      	mov	fp, r3
 8003de0:	4643      	mov	r3, r8
 8003de2:	eb1a 0303 	adds.w	r3, sl, r3
 8003de6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003dea:	464b      	mov	r3, r9
 8003dec:	eb4b 0303 	adc.w	r3, fp, r3
 8003df0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e00:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003e04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e08:	460b      	mov	r3, r1
 8003e0a:	18db      	adds	r3, r3, r3
 8003e0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e0e:	4613      	mov	r3, r2
 8003e10:	eb42 0303 	adc.w	r3, r2, r3
 8003e14:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003e1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003e1e:	f7fc fa2f 	bl	8000280 <__aeabi_uldivmod>
 8003e22:	4602      	mov	r2, r0
 8003e24:	460b      	mov	r3, r1
 8003e26:	4611      	mov	r1, r2
 8003e28:	4b3b      	ldr	r3, [pc, #236]	@ (8003f18 <UART_SetConfig+0x2d4>)
 8003e2a:	fba3 2301 	umull	r2, r3, r3, r1
 8003e2e:	095b      	lsrs	r3, r3, #5
 8003e30:	2264      	movs	r2, #100	@ 0x64
 8003e32:	fb02 f303 	mul.w	r3, r2, r3
 8003e36:	1acb      	subs	r3, r1, r3
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003e3e:	4b36      	ldr	r3, [pc, #216]	@ (8003f18 <UART_SetConfig+0x2d4>)
 8003e40:	fba3 2302 	umull	r2, r3, r3, r2
 8003e44:	095b      	lsrs	r3, r3, #5
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003e4c:	441c      	add	r4, r3
 8003e4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e52:	2200      	movs	r2, #0
 8003e54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e58:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003e5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003e60:	4642      	mov	r2, r8
 8003e62:	464b      	mov	r3, r9
 8003e64:	1891      	adds	r1, r2, r2
 8003e66:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003e68:	415b      	adcs	r3, r3
 8003e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003e70:	4641      	mov	r1, r8
 8003e72:	1851      	adds	r1, r2, r1
 8003e74:	6339      	str	r1, [r7, #48]	@ 0x30
 8003e76:	4649      	mov	r1, r9
 8003e78:	414b      	adcs	r3, r1
 8003e7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	f04f 0300 	mov.w	r3, #0
 8003e84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003e88:	4659      	mov	r1, fp
 8003e8a:	00cb      	lsls	r3, r1, #3
 8003e8c:	4651      	mov	r1, sl
 8003e8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e92:	4651      	mov	r1, sl
 8003e94:	00ca      	lsls	r2, r1, #3
 8003e96:	4610      	mov	r0, r2
 8003e98:	4619      	mov	r1, r3
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	4642      	mov	r2, r8
 8003e9e:	189b      	adds	r3, r3, r2
 8003ea0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ea4:	464b      	mov	r3, r9
 8003ea6:	460a      	mov	r2, r1
 8003ea8:	eb42 0303 	adc.w	r3, r2, r3
 8003eac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ebc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003ec0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	18db      	adds	r3, r3, r3
 8003ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003eca:	4613      	mov	r3, r2
 8003ecc:	eb42 0303 	adc.w	r3, r2, r3
 8003ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ed2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ed6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003eda:	f7fc f9d1 	bl	8000280 <__aeabi_uldivmod>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8003f18 <UART_SetConfig+0x2d4>)
 8003ee4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ee8:	095b      	lsrs	r3, r3, #5
 8003eea:	2164      	movs	r1, #100	@ 0x64
 8003eec:	fb01 f303 	mul.w	r3, r1, r3
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	3332      	adds	r3, #50	@ 0x32
 8003ef6:	4a08      	ldr	r2, [pc, #32]	@ (8003f18 <UART_SetConfig+0x2d4>)
 8003ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8003efc:	095b      	lsrs	r3, r3, #5
 8003efe:	f003 0207 	and.w	r2, r3, #7
 8003f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4422      	add	r2, r4
 8003f0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f0c:	e106      	b.n	800411c <UART_SetConfig+0x4d8>
 8003f0e:	bf00      	nop
 8003f10:	40011000 	.word	0x40011000
 8003f14:	40011400 	.word	0x40011400
 8003f18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f20:	2200      	movs	r2, #0
 8003f22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f26:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003f2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003f2e:	4642      	mov	r2, r8
 8003f30:	464b      	mov	r3, r9
 8003f32:	1891      	adds	r1, r2, r2
 8003f34:	6239      	str	r1, [r7, #32]
 8003f36:	415b      	adcs	r3, r3
 8003f38:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f3e:	4641      	mov	r1, r8
 8003f40:	1854      	adds	r4, r2, r1
 8003f42:	4649      	mov	r1, r9
 8003f44:	eb43 0501 	adc.w	r5, r3, r1
 8003f48:	f04f 0200 	mov.w	r2, #0
 8003f4c:	f04f 0300 	mov.w	r3, #0
 8003f50:	00eb      	lsls	r3, r5, #3
 8003f52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f56:	00e2      	lsls	r2, r4, #3
 8003f58:	4614      	mov	r4, r2
 8003f5a:	461d      	mov	r5, r3
 8003f5c:	4643      	mov	r3, r8
 8003f5e:	18e3      	adds	r3, r4, r3
 8003f60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f64:	464b      	mov	r3, r9
 8003f66:	eb45 0303 	adc.w	r3, r5, r3
 8003f6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f7a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003f7e:	f04f 0200 	mov.w	r2, #0
 8003f82:	f04f 0300 	mov.w	r3, #0
 8003f86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003f8a:	4629      	mov	r1, r5
 8003f8c:	008b      	lsls	r3, r1, #2
 8003f8e:	4621      	mov	r1, r4
 8003f90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f94:	4621      	mov	r1, r4
 8003f96:	008a      	lsls	r2, r1, #2
 8003f98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003f9c:	f7fc f970 	bl	8000280 <__aeabi_uldivmod>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	4b60      	ldr	r3, [pc, #384]	@ (8004128 <UART_SetConfig+0x4e4>)
 8003fa6:	fba3 2302 	umull	r2, r3, r3, r2
 8003faa:	095b      	lsrs	r3, r3, #5
 8003fac:	011c      	lsls	r4, r3, #4
 8003fae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003fb8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003fbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003fc0:	4642      	mov	r2, r8
 8003fc2:	464b      	mov	r3, r9
 8003fc4:	1891      	adds	r1, r2, r2
 8003fc6:	61b9      	str	r1, [r7, #24]
 8003fc8:	415b      	adcs	r3, r3
 8003fca:	61fb      	str	r3, [r7, #28]
 8003fcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fd0:	4641      	mov	r1, r8
 8003fd2:	1851      	adds	r1, r2, r1
 8003fd4:	6139      	str	r1, [r7, #16]
 8003fd6:	4649      	mov	r1, r9
 8003fd8:	414b      	adcs	r3, r1
 8003fda:	617b      	str	r3, [r7, #20]
 8003fdc:	f04f 0200 	mov.w	r2, #0
 8003fe0:	f04f 0300 	mov.w	r3, #0
 8003fe4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fe8:	4659      	mov	r1, fp
 8003fea:	00cb      	lsls	r3, r1, #3
 8003fec:	4651      	mov	r1, sl
 8003fee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ff2:	4651      	mov	r1, sl
 8003ff4:	00ca      	lsls	r2, r1, #3
 8003ff6:	4610      	mov	r0, r2
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	4642      	mov	r2, r8
 8003ffe:	189b      	adds	r3, r3, r2
 8004000:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004004:	464b      	mov	r3, r9
 8004006:	460a      	mov	r2, r1
 8004008:	eb42 0303 	adc.w	r3, r2, r3
 800400c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	67bb      	str	r3, [r7, #120]	@ 0x78
 800401a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800401c:	f04f 0200 	mov.w	r2, #0
 8004020:	f04f 0300 	mov.w	r3, #0
 8004024:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004028:	4649      	mov	r1, r9
 800402a:	008b      	lsls	r3, r1, #2
 800402c:	4641      	mov	r1, r8
 800402e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004032:	4641      	mov	r1, r8
 8004034:	008a      	lsls	r2, r1, #2
 8004036:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800403a:	f7fc f921 	bl	8000280 <__aeabi_uldivmod>
 800403e:	4602      	mov	r2, r0
 8004040:	460b      	mov	r3, r1
 8004042:	4611      	mov	r1, r2
 8004044:	4b38      	ldr	r3, [pc, #224]	@ (8004128 <UART_SetConfig+0x4e4>)
 8004046:	fba3 2301 	umull	r2, r3, r3, r1
 800404a:	095b      	lsrs	r3, r3, #5
 800404c:	2264      	movs	r2, #100	@ 0x64
 800404e:	fb02 f303 	mul.w	r3, r2, r3
 8004052:	1acb      	subs	r3, r1, r3
 8004054:	011b      	lsls	r3, r3, #4
 8004056:	3332      	adds	r3, #50	@ 0x32
 8004058:	4a33      	ldr	r2, [pc, #204]	@ (8004128 <UART_SetConfig+0x4e4>)
 800405a:	fba2 2303 	umull	r2, r3, r2, r3
 800405e:	095b      	lsrs	r3, r3, #5
 8004060:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004064:	441c      	add	r4, r3
 8004066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800406a:	2200      	movs	r2, #0
 800406c:	673b      	str	r3, [r7, #112]	@ 0x70
 800406e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004070:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004074:	4642      	mov	r2, r8
 8004076:	464b      	mov	r3, r9
 8004078:	1891      	adds	r1, r2, r2
 800407a:	60b9      	str	r1, [r7, #8]
 800407c:	415b      	adcs	r3, r3
 800407e:	60fb      	str	r3, [r7, #12]
 8004080:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004084:	4641      	mov	r1, r8
 8004086:	1851      	adds	r1, r2, r1
 8004088:	6039      	str	r1, [r7, #0]
 800408a:	4649      	mov	r1, r9
 800408c:	414b      	adcs	r3, r1
 800408e:	607b      	str	r3, [r7, #4]
 8004090:	f04f 0200 	mov.w	r2, #0
 8004094:	f04f 0300 	mov.w	r3, #0
 8004098:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800409c:	4659      	mov	r1, fp
 800409e:	00cb      	lsls	r3, r1, #3
 80040a0:	4651      	mov	r1, sl
 80040a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040a6:	4651      	mov	r1, sl
 80040a8:	00ca      	lsls	r2, r1, #3
 80040aa:	4610      	mov	r0, r2
 80040ac:	4619      	mov	r1, r3
 80040ae:	4603      	mov	r3, r0
 80040b0:	4642      	mov	r2, r8
 80040b2:	189b      	adds	r3, r3, r2
 80040b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040b6:	464b      	mov	r3, r9
 80040b8:	460a      	mov	r2, r1
 80040ba:	eb42 0303 	adc.w	r3, r2, r3
 80040be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80040c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80040ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80040cc:	f04f 0200 	mov.w	r2, #0
 80040d0:	f04f 0300 	mov.w	r3, #0
 80040d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80040d8:	4649      	mov	r1, r9
 80040da:	008b      	lsls	r3, r1, #2
 80040dc:	4641      	mov	r1, r8
 80040de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040e2:	4641      	mov	r1, r8
 80040e4:	008a      	lsls	r2, r1, #2
 80040e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80040ea:	f7fc f8c9 	bl	8000280 <__aeabi_uldivmod>
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004128 <UART_SetConfig+0x4e4>)
 80040f4:	fba3 1302 	umull	r1, r3, r3, r2
 80040f8:	095b      	lsrs	r3, r3, #5
 80040fa:	2164      	movs	r1, #100	@ 0x64
 80040fc:	fb01 f303 	mul.w	r3, r1, r3
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	011b      	lsls	r3, r3, #4
 8004104:	3332      	adds	r3, #50	@ 0x32
 8004106:	4a08      	ldr	r2, [pc, #32]	@ (8004128 <UART_SetConfig+0x4e4>)
 8004108:	fba2 2303 	umull	r2, r3, r2, r3
 800410c:	095b      	lsrs	r3, r3, #5
 800410e:	f003 020f 	and.w	r2, r3, #15
 8004112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4422      	add	r2, r4
 800411a:	609a      	str	r2, [r3, #8]
}
 800411c:	bf00      	nop
 800411e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004122:	46bd      	mov	sp, r7
 8004124:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004128:	51eb851f 	.word	0x51eb851f

0800412c <siprintf>:
 800412c:	b40e      	push	{r1, r2, r3}
 800412e:	b500      	push	{lr}
 8004130:	b09c      	sub	sp, #112	@ 0x70
 8004132:	ab1d      	add	r3, sp, #116	@ 0x74
 8004134:	9002      	str	r0, [sp, #8]
 8004136:	9006      	str	r0, [sp, #24]
 8004138:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800413c:	4809      	ldr	r0, [pc, #36]	@ (8004164 <siprintf+0x38>)
 800413e:	9107      	str	r1, [sp, #28]
 8004140:	9104      	str	r1, [sp, #16]
 8004142:	4909      	ldr	r1, [pc, #36]	@ (8004168 <siprintf+0x3c>)
 8004144:	f853 2b04 	ldr.w	r2, [r3], #4
 8004148:	9105      	str	r1, [sp, #20]
 800414a:	6800      	ldr	r0, [r0, #0]
 800414c:	9301      	str	r3, [sp, #4]
 800414e:	a902      	add	r1, sp, #8
 8004150:	f000 f994 	bl	800447c <_svfiprintf_r>
 8004154:	9b02      	ldr	r3, [sp, #8]
 8004156:	2200      	movs	r2, #0
 8004158:	701a      	strb	r2, [r3, #0]
 800415a:	b01c      	add	sp, #112	@ 0x70
 800415c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004160:	b003      	add	sp, #12
 8004162:	4770      	bx	lr
 8004164:	20000010 	.word	0x20000010
 8004168:	ffff0208 	.word	0xffff0208

0800416c <memset>:
 800416c:	4402      	add	r2, r0
 800416e:	4603      	mov	r3, r0
 8004170:	4293      	cmp	r3, r2
 8004172:	d100      	bne.n	8004176 <memset+0xa>
 8004174:	4770      	bx	lr
 8004176:	f803 1b01 	strb.w	r1, [r3], #1
 800417a:	e7f9      	b.n	8004170 <memset+0x4>

0800417c <__errno>:
 800417c:	4b01      	ldr	r3, [pc, #4]	@ (8004184 <__errno+0x8>)
 800417e:	6818      	ldr	r0, [r3, #0]
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	20000010 	.word	0x20000010

08004188 <__libc_init_array>:
 8004188:	b570      	push	{r4, r5, r6, lr}
 800418a:	4d0d      	ldr	r5, [pc, #52]	@ (80041c0 <__libc_init_array+0x38>)
 800418c:	4c0d      	ldr	r4, [pc, #52]	@ (80041c4 <__libc_init_array+0x3c>)
 800418e:	1b64      	subs	r4, r4, r5
 8004190:	10a4      	asrs	r4, r4, #2
 8004192:	2600      	movs	r6, #0
 8004194:	42a6      	cmp	r6, r4
 8004196:	d109      	bne.n	80041ac <__libc_init_array+0x24>
 8004198:	4d0b      	ldr	r5, [pc, #44]	@ (80041c8 <__libc_init_array+0x40>)
 800419a:	4c0c      	ldr	r4, [pc, #48]	@ (80041cc <__libc_init_array+0x44>)
 800419c:	f000 fc66 	bl	8004a6c <_init>
 80041a0:	1b64      	subs	r4, r4, r5
 80041a2:	10a4      	asrs	r4, r4, #2
 80041a4:	2600      	movs	r6, #0
 80041a6:	42a6      	cmp	r6, r4
 80041a8:	d105      	bne.n	80041b6 <__libc_init_array+0x2e>
 80041aa:	bd70      	pop	{r4, r5, r6, pc}
 80041ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80041b0:	4798      	blx	r3
 80041b2:	3601      	adds	r6, #1
 80041b4:	e7ee      	b.n	8004194 <__libc_init_array+0xc>
 80041b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ba:	4798      	blx	r3
 80041bc:	3601      	adds	r6, #1
 80041be:	e7f2      	b.n	80041a6 <__libc_init_array+0x1e>
 80041c0:	08004b94 	.word	0x08004b94
 80041c4:	08004b94 	.word	0x08004b94
 80041c8:	08004b94 	.word	0x08004b94
 80041cc:	08004b98 	.word	0x08004b98

080041d0 <__retarget_lock_acquire_recursive>:
 80041d0:	4770      	bx	lr

080041d2 <__retarget_lock_release_recursive>:
 80041d2:	4770      	bx	lr

080041d4 <_free_r>:
 80041d4:	b538      	push	{r3, r4, r5, lr}
 80041d6:	4605      	mov	r5, r0
 80041d8:	2900      	cmp	r1, #0
 80041da:	d041      	beq.n	8004260 <_free_r+0x8c>
 80041dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041e0:	1f0c      	subs	r4, r1, #4
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	bfb8      	it	lt
 80041e6:	18e4      	addlt	r4, r4, r3
 80041e8:	f000 f8e0 	bl	80043ac <__malloc_lock>
 80041ec:	4a1d      	ldr	r2, [pc, #116]	@ (8004264 <_free_r+0x90>)
 80041ee:	6813      	ldr	r3, [r2, #0]
 80041f0:	b933      	cbnz	r3, 8004200 <_free_r+0x2c>
 80041f2:	6063      	str	r3, [r4, #4]
 80041f4:	6014      	str	r4, [r2, #0]
 80041f6:	4628      	mov	r0, r5
 80041f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041fc:	f000 b8dc 	b.w	80043b8 <__malloc_unlock>
 8004200:	42a3      	cmp	r3, r4
 8004202:	d908      	bls.n	8004216 <_free_r+0x42>
 8004204:	6820      	ldr	r0, [r4, #0]
 8004206:	1821      	adds	r1, r4, r0
 8004208:	428b      	cmp	r3, r1
 800420a:	bf01      	itttt	eq
 800420c:	6819      	ldreq	r1, [r3, #0]
 800420e:	685b      	ldreq	r3, [r3, #4]
 8004210:	1809      	addeq	r1, r1, r0
 8004212:	6021      	streq	r1, [r4, #0]
 8004214:	e7ed      	b.n	80041f2 <_free_r+0x1e>
 8004216:	461a      	mov	r2, r3
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	b10b      	cbz	r3, 8004220 <_free_r+0x4c>
 800421c:	42a3      	cmp	r3, r4
 800421e:	d9fa      	bls.n	8004216 <_free_r+0x42>
 8004220:	6811      	ldr	r1, [r2, #0]
 8004222:	1850      	adds	r0, r2, r1
 8004224:	42a0      	cmp	r0, r4
 8004226:	d10b      	bne.n	8004240 <_free_r+0x6c>
 8004228:	6820      	ldr	r0, [r4, #0]
 800422a:	4401      	add	r1, r0
 800422c:	1850      	adds	r0, r2, r1
 800422e:	4283      	cmp	r3, r0
 8004230:	6011      	str	r1, [r2, #0]
 8004232:	d1e0      	bne.n	80041f6 <_free_r+0x22>
 8004234:	6818      	ldr	r0, [r3, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	6053      	str	r3, [r2, #4]
 800423a:	4408      	add	r0, r1
 800423c:	6010      	str	r0, [r2, #0]
 800423e:	e7da      	b.n	80041f6 <_free_r+0x22>
 8004240:	d902      	bls.n	8004248 <_free_r+0x74>
 8004242:	230c      	movs	r3, #12
 8004244:	602b      	str	r3, [r5, #0]
 8004246:	e7d6      	b.n	80041f6 <_free_r+0x22>
 8004248:	6820      	ldr	r0, [r4, #0]
 800424a:	1821      	adds	r1, r4, r0
 800424c:	428b      	cmp	r3, r1
 800424e:	bf04      	itt	eq
 8004250:	6819      	ldreq	r1, [r3, #0]
 8004252:	685b      	ldreq	r3, [r3, #4]
 8004254:	6063      	str	r3, [r4, #4]
 8004256:	bf04      	itt	eq
 8004258:	1809      	addeq	r1, r1, r0
 800425a:	6021      	streq	r1, [r4, #0]
 800425c:	6054      	str	r4, [r2, #4]
 800425e:	e7ca      	b.n	80041f6 <_free_r+0x22>
 8004260:	bd38      	pop	{r3, r4, r5, pc}
 8004262:	bf00      	nop
 8004264:	20000394 	.word	0x20000394

08004268 <sbrk_aligned>:
 8004268:	b570      	push	{r4, r5, r6, lr}
 800426a:	4e0f      	ldr	r6, [pc, #60]	@ (80042a8 <sbrk_aligned+0x40>)
 800426c:	460c      	mov	r4, r1
 800426e:	6831      	ldr	r1, [r6, #0]
 8004270:	4605      	mov	r5, r0
 8004272:	b911      	cbnz	r1, 800427a <sbrk_aligned+0x12>
 8004274:	f000 fba6 	bl	80049c4 <_sbrk_r>
 8004278:	6030      	str	r0, [r6, #0]
 800427a:	4621      	mov	r1, r4
 800427c:	4628      	mov	r0, r5
 800427e:	f000 fba1 	bl	80049c4 <_sbrk_r>
 8004282:	1c43      	adds	r3, r0, #1
 8004284:	d103      	bne.n	800428e <sbrk_aligned+0x26>
 8004286:	f04f 34ff 	mov.w	r4, #4294967295
 800428a:	4620      	mov	r0, r4
 800428c:	bd70      	pop	{r4, r5, r6, pc}
 800428e:	1cc4      	adds	r4, r0, #3
 8004290:	f024 0403 	bic.w	r4, r4, #3
 8004294:	42a0      	cmp	r0, r4
 8004296:	d0f8      	beq.n	800428a <sbrk_aligned+0x22>
 8004298:	1a21      	subs	r1, r4, r0
 800429a:	4628      	mov	r0, r5
 800429c:	f000 fb92 	bl	80049c4 <_sbrk_r>
 80042a0:	3001      	adds	r0, #1
 80042a2:	d1f2      	bne.n	800428a <sbrk_aligned+0x22>
 80042a4:	e7ef      	b.n	8004286 <sbrk_aligned+0x1e>
 80042a6:	bf00      	nop
 80042a8:	20000390 	.word	0x20000390

080042ac <_malloc_r>:
 80042ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042b0:	1ccd      	adds	r5, r1, #3
 80042b2:	f025 0503 	bic.w	r5, r5, #3
 80042b6:	3508      	adds	r5, #8
 80042b8:	2d0c      	cmp	r5, #12
 80042ba:	bf38      	it	cc
 80042bc:	250c      	movcc	r5, #12
 80042be:	2d00      	cmp	r5, #0
 80042c0:	4606      	mov	r6, r0
 80042c2:	db01      	blt.n	80042c8 <_malloc_r+0x1c>
 80042c4:	42a9      	cmp	r1, r5
 80042c6:	d904      	bls.n	80042d2 <_malloc_r+0x26>
 80042c8:	230c      	movs	r3, #12
 80042ca:	6033      	str	r3, [r6, #0]
 80042cc:	2000      	movs	r0, #0
 80042ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80043a8 <_malloc_r+0xfc>
 80042d6:	f000 f869 	bl	80043ac <__malloc_lock>
 80042da:	f8d8 3000 	ldr.w	r3, [r8]
 80042de:	461c      	mov	r4, r3
 80042e0:	bb44      	cbnz	r4, 8004334 <_malloc_r+0x88>
 80042e2:	4629      	mov	r1, r5
 80042e4:	4630      	mov	r0, r6
 80042e6:	f7ff ffbf 	bl	8004268 <sbrk_aligned>
 80042ea:	1c43      	adds	r3, r0, #1
 80042ec:	4604      	mov	r4, r0
 80042ee:	d158      	bne.n	80043a2 <_malloc_r+0xf6>
 80042f0:	f8d8 4000 	ldr.w	r4, [r8]
 80042f4:	4627      	mov	r7, r4
 80042f6:	2f00      	cmp	r7, #0
 80042f8:	d143      	bne.n	8004382 <_malloc_r+0xd6>
 80042fa:	2c00      	cmp	r4, #0
 80042fc:	d04b      	beq.n	8004396 <_malloc_r+0xea>
 80042fe:	6823      	ldr	r3, [r4, #0]
 8004300:	4639      	mov	r1, r7
 8004302:	4630      	mov	r0, r6
 8004304:	eb04 0903 	add.w	r9, r4, r3
 8004308:	f000 fb5c 	bl	80049c4 <_sbrk_r>
 800430c:	4581      	cmp	r9, r0
 800430e:	d142      	bne.n	8004396 <_malloc_r+0xea>
 8004310:	6821      	ldr	r1, [r4, #0]
 8004312:	1a6d      	subs	r5, r5, r1
 8004314:	4629      	mov	r1, r5
 8004316:	4630      	mov	r0, r6
 8004318:	f7ff ffa6 	bl	8004268 <sbrk_aligned>
 800431c:	3001      	adds	r0, #1
 800431e:	d03a      	beq.n	8004396 <_malloc_r+0xea>
 8004320:	6823      	ldr	r3, [r4, #0]
 8004322:	442b      	add	r3, r5
 8004324:	6023      	str	r3, [r4, #0]
 8004326:	f8d8 3000 	ldr.w	r3, [r8]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	bb62      	cbnz	r2, 8004388 <_malloc_r+0xdc>
 800432e:	f8c8 7000 	str.w	r7, [r8]
 8004332:	e00f      	b.n	8004354 <_malloc_r+0xa8>
 8004334:	6822      	ldr	r2, [r4, #0]
 8004336:	1b52      	subs	r2, r2, r5
 8004338:	d420      	bmi.n	800437c <_malloc_r+0xd0>
 800433a:	2a0b      	cmp	r2, #11
 800433c:	d917      	bls.n	800436e <_malloc_r+0xc2>
 800433e:	1961      	adds	r1, r4, r5
 8004340:	42a3      	cmp	r3, r4
 8004342:	6025      	str	r5, [r4, #0]
 8004344:	bf18      	it	ne
 8004346:	6059      	strne	r1, [r3, #4]
 8004348:	6863      	ldr	r3, [r4, #4]
 800434a:	bf08      	it	eq
 800434c:	f8c8 1000 	streq.w	r1, [r8]
 8004350:	5162      	str	r2, [r4, r5]
 8004352:	604b      	str	r3, [r1, #4]
 8004354:	4630      	mov	r0, r6
 8004356:	f000 f82f 	bl	80043b8 <__malloc_unlock>
 800435a:	f104 000b 	add.w	r0, r4, #11
 800435e:	1d23      	adds	r3, r4, #4
 8004360:	f020 0007 	bic.w	r0, r0, #7
 8004364:	1ac2      	subs	r2, r0, r3
 8004366:	bf1c      	itt	ne
 8004368:	1a1b      	subne	r3, r3, r0
 800436a:	50a3      	strne	r3, [r4, r2]
 800436c:	e7af      	b.n	80042ce <_malloc_r+0x22>
 800436e:	6862      	ldr	r2, [r4, #4]
 8004370:	42a3      	cmp	r3, r4
 8004372:	bf0c      	ite	eq
 8004374:	f8c8 2000 	streq.w	r2, [r8]
 8004378:	605a      	strne	r2, [r3, #4]
 800437a:	e7eb      	b.n	8004354 <_malloc_r+0xa8>
 800437c:	4623      	mov	r3, r4
 800437e:	6864      	ldr	r4, [r4, #4]
 8004380:	e7ae      	b.n	80042e0 <_malloc_r+0x34>
 8004382:	463c      	mov	r4, r7
 8004384:	687f      	ldr	r7, [r7, #4]
 8004386:	e7b6      	b.n	80042f6 <_malloc_r+0x4a>
 8004388:	461a      	mov	r2, r3
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	42a3      	cmp	r3, r4
 800438e:	d1fb      	bne.n	8004388 <_malloc_r+0xdc>
 8004390:	2300      	movs	r3, #0
 8004392:	6053      	str	r3, [r2, #4]
 8004394:	e7de      	b.n	8004354 <_malloc_r+0xa8>
 8004396:	230c      	movs	r3, #12
 8004398:	6033      	str	r3, [r6, #0]
 800439a:	4630      	mov	r0, r6
 800439c:	f000 f80c 	bl	80043b8 <__malloc_unlock>
 80043a0:	e794      	b.n	80042cc <_malloc_r+0x20>
 80043a2:	6005      	str	r5, [r0, #0]
 80043a4:	e7d6      	b.n	8004354 <_malloc_r+0xa8>
 80043a6:	bf00      	nop
 80043a8:	20000394 	.word	0x20000394

080043ac <__malloc_lock>:
 80043ac:	4801      	ldr	r0, [pc, #4]	@ (80043b4 <__malloc_lock+0x8>)
 80043ae:	f7ff bf0f 	b.w	80041d0 <__retarget_lock_acquire_recursive>
 80043b2:	bf00      	nop
 80043b4:	2000038c 	.word	0x2000038c

080043b8 <__malloc_unlock>:
 80043b8:	4801      	ldr	r0, [pc, #4]	@ (80043c0 <__malloc_unlock+0x8>)
 80043ba:	f7ff bf0a 	b.w	80041d2 <__retarget_lock_release_recursive>
 80043be:	bf00      	nop
 80043c0:	2000038c 	.word	0x2000038c

080043c4 <__ssputs_r>:
 80043c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043c8:	688e      	ldr	r6, [r1, #8]
 80043ca:	461f      	mov	r7, r3
 80043cc:	42be      	cmp	r6, r7
 80043ce:	680b      	ldr	r3, [r1, #0]
 80043d0:	4682      	mov	sl, r0
 80043d2:	460c      	mov	r4, r1
 80043d4:	4690      	mov	r8, r2
 80043d6:	d82d      	bhi.n	8004434 <__ssputs_r+0x70>
 80043d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80043dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80043e0:	d026      	beq.n	8004430 <__ssputs_r+0x6c>
 80043e2:	6965      	ldr	r5, [r4, #20]
 80043e4:	6909      	ldr	r1, [r1, #16]
 80043e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80043ea:	eba3 0901 	sub.w	r9, r3, r1
 80043ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80043f2:	1c7b      	adds	r3, r7, #1
 80043f4:	444b      	add	r3, r9
 80043f6:	106d      	asrs	r5, r5, #1
 80043f8:	429d      	cmp	r5, r3
 80043fa:	bf38      	it	cc
 80043fc:	461d      	movcc	r5, r3
 80043fe:	0553      	lsls	r3, r2, #21
 8004400:	d527      	bpl.n	8004452 <__ssputs_r+0x8e>
 8004402:	4629      	mov	r1, r5
 8004404:	f7ff ff52 	bl	80042ac <_malloc_r>
 8004408:	4606      	mov	r6, r0
 800440a:	b360      	cbz	r0, 8004466 <__ssputs_r+0xa2>
 800440c:	6921      	ldr	r1, [r4, #16]
 800440e:	464a      	mov	r2, r9
 8004410:	f000 fae8 	bl	80049e4 <memcpy>
 8004414:	89a3      	ldrh	r3, [r4, #12]
 8004416:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800441a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800441e:	81a3      	strh	r3, [r4, #12]
 8004420:	6126      	str	r6, [r4, #16]
 8004422:	6165      	str	r5, [r4, #20]
 8004424:	444e      	add	r6, r9
 8004426:	eba5 0509 	sub.w	r5, r5, r9
 800442a:	6026      	str	r6, [r4, #0]
 800442c:	60a5      	str	r5, [r4, #8]
 800442e:	463e      	mov	r6, r7
 8004430:	42be      	cmp	r6, r7
 8004432:	d900      	bls.n	8004436 <__ssputs_r+0x72>
 8004434:	463e      	mov	r6, r7
 8004436:	6820      	ldr	r0, [r4, #0]
 8004438:	4632      	mov	r2, r6
 800443a:	4641      	mov	r1, r8
 800443c:	f000 faa8 	bl	8004990 <memmove>
 8004440:	68a3      	ldr	r3, [r4, #8]
 8004442:	1b9b      	subs	r3, r3, r6
 8004444:	60a3      	str	r3, [r4, #8]
 8004446:	6823      	ldr	r3, [r4, #0]
 8004448:	4433      	add	r3, r6
 800444a:	6023      	str	r3, [r4, #0]
 800444c:	2000      	movs	r0, #0
 800444e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004452:	462a      	mov	r2, r5
 8004454:	f000 fad4 	bl	8004a00 <_realloc_r>
 8004458:	4606      	mov	r6, r0
 800445a:	2800      	cmp	r0, #0
 800445c:	d1e0      	bne.n	8004420 <__ssputs_r+0x5c>
 800445e:	6921      	ldr	r1, [r4, #16]
 8004460:	4650      	mov	r0, sl
 8004462:	f7ff feb7 	bl	80041d4 <_free_r>
 8004466:	230c      	movs	r3, #12
 8004468:	f8ca 3000 	str.w	r3, [sl]
 800446c:	89a3      	ldrh	r3, [r4, #12]
 800446e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004472:	81a3      	strh	r3, [r4, #12]
 8004474:	f04f 30ff 	mov.w	r0, #4294967295
 8004478:	e7e9      	b.n	800444e <__ssputs_r+0x8a>
	...

0800447c <_svfiprintf_r>:
 800447c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004480:	4698      	mov	r8, r3
 8004482:	898b      	ldrh	r3, [r1, #12]
 8004484:	061b      	lsls	r3, r3, #24
 8004486:	b09d      	sub	sp, #116	@ 0x74
 8004488:	4607      	mov	r7, r0
 800448a:	460d      	mov	r5, r1
 800448c:	4614      	mov	r4, r2
 800448e:	d510      	bpl.n	80044b2 <_svfiprintf_r+0x36>
 8004490:	690b      	ldr	r3, [r1, #16]
 8004492:	b973      	cbnz	r3, 80044b2 <_svfiprintf_r+0x36>
 8004494:	2140      	movs	r1, #64	@ 0x40
 8004496:	f7ff ff09 	bl	80042ac <_malloc_r>
 800449a:	6028      	str	r0, [r5, #0]
 800449c:	6128      	str	r0, [r5, #16]
 800449e:	b930      	cbnz	r0, 80044ae <_svfiprintf_r+0x32>
 80044a0:	230c      	movs	r3, #12
 80044a2:	603b      	str	r3, [r7, #0]
 80044a4:	f04f 30ff 	mov.w	r0, #4294967295
 80044a8:	b01d      	add	sp, #116	@ 0x74
 80044aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044ae:	2340      	movs	r3, #64	@ 0x40
 80044b0:	616b      	str	r3, [r5, #20]
 80044b2:	2300      	movs	r3, #0
 80044b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80044b6:	2320      	movs	r3, #32
 80044b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80044bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80044c0:	2330      	movs	r3, #48	@ 0x30
 80044c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004660 <_svfiprintf_r+0x1e4>
 80044c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80044ca:	f04f 0901 	mov.w	r9, #1
 80044ce:	4623      	mov	r3, r4
 80044d0:	469a      	mov	sl, r3
 80044d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044d6:	b10a      	cbz	r2, 80044dc <_svfiprintf_r+0x60>
 80044d8:	2a25      	cmp	r2, #37	@ 0x25
 80044da:	d1f9      	bne.n	80044d0 <_svfiprintf_r+0x54>
 80044dc:	ebba 0b04 	subs.w	fp, sl, r4
 80044e0:	d00b      	beq.n	80044fa <_svfiprintf_r+0x7e>
 80044e2:	465b      	mov	r3, fp
 80044e4:	4622      	mov	r2, r4
 80044e6:	4629      	mov	r1, r5
 80044e8:	4638      	mov	r0, r7
 80044ea:	f7ff ff6b 	bl	80043c4 <__ssputs_r>
 80044ee:	3001      	adds	r0, #1
 80044f0:	f000 80a7 	beq.w	8004642 <_svfiprintf_r+0x1c6>
 80044f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80044f6:	445a      	add	r2, fp
 80044f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80044fa:	f89a 3000 	ldrb.w	r3, [sl]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 809f 	beq.w	8004642 <_svfiprintf_r+0x1c6>
 8004504:	2300      	movs	r3, #0
 8004506:	f04f 32ff 	mov.w	r2, #4294967295
 800450a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800450e:	f10a 0a01 	add.w	sl, sl, #1
 8004512:	9304      	str	r3, [sp, #16]
 8004514:	9307      	str	r3, [sp, #28]
 8004516:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800451a:	931a      	str	r3, [sp, #104]	@ 0x68
 800451c:	4654      	mov	r4, sl
 800451e:	2205      	movs	r2, #5
 8004520:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004524:	484e      	ldr	r0, [pc, #312]	@ (8004660 <_svfiprintf_r+0x1e4>)
 8004526:	f7fb fe5b 	bl	80001e0 <memchr>
 800452a:	9a04      	ldr	r2, [sp, #16]
 800452c:	b9d8      	cbnz	r0, 8004566 <_svfiprintf_r+0xea>
 800452e:	06d0      	lsls	r0, r2, #27
 8004530:	bf44      	itt	mi
 8004532:	2320      	movmi	r3, #32
 8004534:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004538:	0711      	lsls	r1, r2, #28
 800453a:	bf44      	itt	mi
 800453c:	232b      	movmi	r3, #43	@ 0x2b
 800453e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004542:	f89a 3000 	ldrb.w	r3, [sl]
 8004546:	2b2a      	cmp	r3, #42	@ 0x2a
 8004548:	d015      	beq.n	8004576 <_svfiprintf_r+0xfa>
 800454a:	9a07      	ldr	r2, [sp, #28]
 800454c:	4654      	mov	r4, sl
 800454e:	2000      	movs	r0, #0
 8004550:	f04f 0c0a 	mov.w	ip, #10
 8004554:	4621      	mov	r1, r4
 8004556:	f811 3b01 	ldrb.w	r3, [r1], #1
 800455a:	3b30      	subs	r3, #48	@ 0x30
 800455c:	2b09      	cmp	r3, #9
 800455e:	d94b      	bls.n	80045f8 <_svfiprintf_r+0x17c>
 8004560:	b1b0      	cbz	r0, 8004590 <_svfiprintf_r+0x114>
 8004562:	9207      	str	r2, [sp, #28]
 8004564:	e014      	b.n	8004590 <_svfiprintf_r+0x114>
 8004566:	eba0 0308 	sub.w	r3, r0, r8
 800456a:	fa09 f303 	lsl.w	r3, r9, r3
 800456e:	4313      	orrs	r3, r2
 8004570:	9304      	str	r3, [sp, #16]
 8004572:	46a2      	mov	sl, r4
 8004574:	e7d2      	b.n	800451c <_svfiprintf_r+0xa0>
 8004576:	9b03      	ldr	r3, [sp, #12]
 8004578:	1d19      	adds	r1, r3, #4
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	9103      	str	r1, [sp, #12]
 800457e:	2b00      	cmp	r3, #0
 8004580:	bfbb      	ittet	lt
 8004582:	425b      	neglt	r3, r3
 8004584:	f042 0202 	orrlt.w	r2, r2, #2
 8004588:	9307      	strge	r3, [sp, #28]
 800458a:	9307      	strlt	r3, [sp, #28]
 800458c:	bfb8      	it	lt
 800458e:	9204      	strlt	r2, [sp, #16]
 8004590:	7823      	ldrb	r3, [r4, #0]
 8004592:	2b2e      	cmp	r3, #46	@ 0x2e
 8004594:	d10a      	bne.n	80045ac <_svfiprintf_r+0x130>
 8004596:	7863      	ldrb	r3, [r4, #1]
 8004598:	2b2a      	cmp	r3, #42	@ 0x2a
 800459a:	d132      	bne.n	8004602 <_svfiprintf_r+0x186>
 800459c:	9b03      	ldr	r3, [sp, #12]
 800459e:	1d1a      	adds	r2, r3, #4
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	9203      	str	r2, [sp, #12]
 80045a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80045a8:	3402      	adds	r4, #2
 80045aa:	9305      	str	r3, [sp, #20]
 80045ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004670 <_svfiprintf_r+0x1f4>
 80045b0:	7821      	ldrb	r1, [r4, #0]
 80045b2:	2203      	movs	r2, #3
 80045b4:	4650      	mov	r0, sl
 80045b6:	f7fb fe13 	bl	80001e0 <memchr>
 80045ba:	b138      	cbz	r0, 80045cc <_svfiprintf_r+0x150>
 80045bc:	9b04      	ldr	r3, [sp, #16]
 80045be:	eba0 000a 	sub.w	r0, r0, sl
 80045c2:	2240      	movs	r2, #64	@ 0x40
 80045c4:	4082      	lsls	r2, r0
 80045c6:	4313      	orrs	r3, r2
 80045c8:	3401      	adds	r4, #1
 80045ca:	9304      	str	r3, [sp, #16]
 80045cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045d0:	4824      	ldr	r0, [pc, #144]	@ (8004664 <_svfiprintf_r+0x1e8>)
 80045d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80045d6:	2206      	movs	r2, #6
 80045d8:	f7fb fe02 	bl	80001e0 <memchr>
 80045dc:	2800      	cmp	r0, #0
 80045de:	d036      	beq.n	800464e <_svfiprintf_r+0x1d2>
 80045e0:	4b21      	ldr	r3, [pc, #132]	@ (8004668 <_svfiprintf_r+0x1ec>)
 80045e2:	bb1b      	cbnz	r3, 800462c <_svfiprintf_r+0x1b0>
 80045e4:	9b03      	ldr	r3, [sp, #12]
 80045e6:	3307      	adds	r3, #7
 80045e8:	f023 0307 	bic.w	r3, r3, #7
 80045ec:	3308      	adds	r3, #8
 80045ee:	9303      	str	r3, [sp, #12]
 80045f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045f2:	4433      	add	r3, r6
 80045f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80045f6:	e76a      	b.n	80044ce <_svfiprintf_r+0x52>
 80045f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80045fc:	460c      	mov	r4, r1
 80045fe:	2001      	movs	r0, #1
 8004600:	e7a8      	b.n	8004554 <_svfiprintf_r+0xd8>
 8004602:	2300      	movs	r3, #0
 8004604:	3401      	adds	r4, #1
 8004606:	9305      	str	r3, [sp, #20]
 8004608:	4619      	mov	r1, r3
 800460a:	f04f 0c0a 	mov.w	ip, #10
 800460e:	4620      	mov	r0, r4
 8004610:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004614:	3a30      	subs	r2, #48	@ 0x30
 8004616:	2a09      	cmp	r2, #9
 8004618:	d903      	bls.n	8004622 <_svfiprintf_r+0x1a6>
 800461a:	2b00      	cmp	r3, #0
 800461c:	d0c6      	beq.n	80045ac <_svfiprintf_r+0x130>
 800461e:	9105      	str	r1, [sp, #20]
 8004620:	e7c4      	b.n	80045ac <_svfiprintf_r+0x130>
 8004622:	fb0c 2101 	mla	r1, ip, r1, r2
 8004626:	4604      	mov	r4, r0
 8004628:	2301      	movs	r3, #1
 800462a:	e7f0      	b.n	800460e <_svfiprintf_r+0x192>
 800462c:	ab03      	add	r3, sp, #12
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	462a      	mov	r2, r5
 8004632:	4b0e      	ldr	r3, [pc, #56]	@ (800466c <_svfiprintf_r+0x1f0>)
 8004634:	a904      	add	r1, sp, #16
 8004636:	4638      	mov	r0, r7
 8004638:	f3af 8000 	nop.w
 800463c:	1c42      	adds	r2, r0, #1
 800463e:	4606      	mov	r6, r0
 8004640:	d1d6      	bne.n	80045f0 <_svfiprintf_r+0x174>
 8004642:	89ab      	ldrh	r3, [r5, #12]
 8004644:	065b      	lsls	r3, r3, #25
 8004646:	f53f af2d 	bmi.w	80044a4 <_svfiprintf_r+0x28>
 800464a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800464c:	e72c      	b.n	80044a8 <_svfiprintf_r+0x2c>
 800464e:	ab03      	add	r3, sp, #12
 8004650:	9300      	str	r3, [sp, #0]
 8004652:	462a      	mov	r2, r5
 8004654:	4b05      	ldr	r3, [pc, #20]	@ (800466c <_svfiprintf_r+0x1f0>)
 8004656:	a904      	add	r1, sp, #16
 8004658:	4638      	mov	r0, r7
 800465a:	f000 f879 	bl	8004750 <_printf_i>
 800465e:	e7ed      	b.n	800463c <_svfiprintf_r+0x1c0>
 8004660:	08004b58 	.word	0x08004b58
 8004664:	08004b62 	.word	0x08004b62
 8004668:	00000000 	.word	0x00000000
 800466c:	080043c5 	.word	0x080043c5
 8004670:	08004b5e 	.word	0x08004b5e

08004674 <_printf_common>:
 8004674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004678:	4616      	mov	r6, r2
 800467a:	4698      	mov	r8, r3
 800467c:	688a      	ldr	r2, [r1, #8]
 800467e:	690b      	ldr	r3, [r1, #16]
 8004680:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004684:	4293      	cmp	r3, r2
 8004686:	bfb8      	it	lt
 8004688:	4613      	movlt	r3, r2
 800468a:	6033      	str	r3, [r6, #0]
 800468c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004690:	4607      	mov	r7, r0
 8004692:	460c      	mov	r4, r1
 8004694:	b10a      	cbz	r2, 800469a <_printf_common+0x26>
 8004696:	3301      	adds	r3, #1
 8004698:	6033      	str	r3, [r6, #0]
 800469a:	6823      	ldr	r3, [r4, #0]
 800469c:	0699      	lsls	r1, r3, #26
 800469e:	bf42      	ittt	mi
 80046a0:	6833      	ldrmi	r3, [r6, #0]
 80046a2:	3302      	addmi	r3, #2
 80046a4:	6033      	strmi	r3, [r6, #0]
 80046a6:	6825      	ldr	r5, [r4, #0]
 80046a8:	f015 0506 	ands.w	r5, r5, #6
 80046ac:	d106      	bne.n	80046bc <_printf_common+0x48>
 80046ae:	f104 0a19 	add.w	sl, r4, #25
 80046b2:	68e3      	ldr	r3, [r4, #12]
 80046b4:	6832      	ldr	r2, [r6, #0]
 80046b6:	1a9b      	subs	r3, r3, r2
 80046b8:	42ab      	cmp	r3, r5
 80046ba:	dc26      	bgt.n	800470a <_printf_common+0x96>
 80046bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80046c0:	6822      	ldr	r2, [r4, #0]
 80046c2:	3b00      	subs	r3, #0
 80046c4:	bf18      	it	ne
 80046c6:	2301      	movne	r3, #1
 80046c8:	0692      	lsls	r2, r2, #26
 80046ca:	d42b      	bmi.n	8004724 <_printf_common+0xb0>
 80046cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80046d0:	4641      	mov	r1, r8
 80046d2:	4638      	mov	r0, r7
 80046d4:	47c8      	blx	r9
 80046d6:	3001      	adds	r0, #1
 80046d8:	d01e      	beq.n	8004718 <_printf_common+0xa4>
 80046da:	6823      	ldr	r3, [r4, #0]
 80046dc:	6922      	ldr	r2, [r4, #16]
 80046de:	f003 0306 	and.w	r3, r3, #6
 80046e2:	2b04      	cmp	r3, #4
 80046e4:	bf02      	ittt	eq
 80046e6:	68e5      	ldreq	r5, [r4, #12]
 80046e8:	6833      	ldreq	r3, [r6, #0]
 80046ea:	1aed      	subeq	r5, r5, r3
 80046ec:	68a3      	ldr	r3, [r4, #8]
 80046ee:	bf0c      	ite	eq
 80046f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046f4:	2500      	movne	r5, #0
 80046f6:	4293      	cmp	r3, r2
 80046f8:	bfc4      	itt	gt
 80046fa:	1a9b      	subgt	r3, r3, r2
 80046fc:	18ed      	addgt	r5, r5, r3
 80046fe:	2600      	movs	r6, #0
 8004700:	341a      	adds	r4, #26
 8004702:	42b5      	cmp	r5, r6
 8004704:	d11a      	bne.n	800473c <_printf_common+0xc8>
 8004706:	2000      	movs	r0, #0
 8004708:	e008      	b.n	800471c <_printf_common+0xa8>
 800470a:	2301      	movs	r3, #1
 800470c:	4652      	mov	r2, sl
 800470e:	4641      	mov	r1, r8
 8004710:	4638      	mov	r0, r7
 8004712:	47c8      	blx	r9
 8004714:	3001      	adds	r0, #1
 8004716:	d103      	bne.n	8004720 <_printf_common+0xac>
 8004718:	f04f 30ff 	mov.w	r0, #4294967295
 800471c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004720:	3501      	adds	r5, #1
 8004722:	e7c6      	b.n	80046b2 <_printf_common+0x3e>
 8004724:	18e1      	adds	r1, r4, r3
 8004726:	1c5a      	adds	r2, r3, #1
 8004728:	2030      	movs	r0, #48	@ 0x30
 800472a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800472e:	4422      	add	r2, r4
 8004730:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004734:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004738:	3302      	adds	r3, #2
 800473a:	e7c7      	b.n	80046cc <_printf_common+0x58>
 800473c:	2301      	movs	r3, #1
 800473e:	4622      	mov	r2, r4
 8004740:	4641      	mov	r1, r8
 8004742:	4638      	mov	r0, r7
 8004744:	47c8      	blx	r9
 8004746:	3001      	adds	r0, #1
 8004748:	d0e6      	beq.n	8004718 <_printf_common+0xa4>
 800474a:	3601      	adds	r6, #1
 800474c:	e7d9      	b.n	8004702 <_printf_common+0x8e>
	...

08004750 <_printf_i>:
 8004750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004754:	7e0f      	ldrb	r7, [r1, #24]
 8004756:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004758:	2f78      	cmp	r7, #120	@ 0x78
 800475a:	4691      	mov	r9, r2
 800475c:	4680      	mov	r8, r0
 800475e:	460c      	mov	r4, r1
 8004760:	469a      	mov	sl, r3
 8004762:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004766:	d807      	bhi.n	8004778 <_printf_i+0x28>
 8004768:	2f62      	cmp	r7, #98	@ 0x62
 800476a:	d80a      	bhi.n	8004782 <_printf_i+0x32>
 800476c:	2f00      	cmp	r7, #0
 800476e:	f000 80d2 	beq.w	8004916 <_printf_i+0x1c6>
 8004772:	2f58      	cmp	r7, #88	@ 0x58
 8004774:	f000 80b9 	beq.w	80048ea <_printf_i+0x19a>
 8004778:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800477c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004780:	e03a      	b.n	80047f8 <_printf_i+0xa8>
 8004782:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004786:	2b15      	cmp	r3, #21
 8004788:	d8f6      	bhi.n	8004778 <_printf_i+0x28>
 800478a:	a101      	add	r1, pc, #4	@ (adr r1, 8004790 <_printf_i+0x40>)
 800478c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004790:	080047e9 	.word	0x080047e9
 8004794:	080047fd 	.word	0x080047fd
 8004798:	08004779 	.word	0x08004779
 800479c:	08004779 	.word	0x08004779
 80047a0:	08004779 	.word	0x08004779
 80047a4:	08004779 	.word	0x08004779
 80047a8:	080047fd 	.word	0x080047fd
 80047ac:	08004779 	.word	0x08004779
 80047b0:	08004779 	.word	0x08004779
 80047b4:	08004779 	.word	0x08004779
 80047b8:	08004779 	.word	0x08004779
 80047bc:	080048fd 	.word	0x080048fd
 80047c0:	08004827 	.word	0x08004827
 80047c4:	080048b7 	.word	0x080048b7
 80047c8:	08004779 	.word	0x08004779
 80047cc:	08004779 	.word	0x08004779
 80047d0:	0800491f 	.word	0x0800491f
 80047d4:	08004779 	.word	0x08004779
 80047d8:	08004827 	.word	0x08004827
 80047dc:	08004779 	.word	0x08004779
 80047e0:	08004779 	.word	0x08004779
 80047e4:	080048bf 	.word	0x080048bf
 80047e8:	6833      	ldr	r3, [r6, #0]
 80047ea:	1d1a      	adds	r2, r3, #4
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6032      	str	r2, [r6, #0]
 80047f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80047f8:	2301      	movs	r3, #1
 80047fa:	e09d      	b.n	8004938 <_printf_i+0x1e8>
 80047fc:	6833      	ldr	r3, [r6, #0]
 80047fe:	6820      	ldr	r0, [r4, #0]
 8004800:	1d19      	adds	r1, r3, #4
 8004802:	6031      	str	r1, [r6, #0]
 8004804:	0606      	lsls	r6, r0, #24
 8004806:	d501      	bpl.n	800480c <_printf_i+0xbc>
 8004808:	681d      	ldr	r5, [r3, #0]
 800480a:	e003      	b.n	8004814 <_printf_i+0xc4>
 800480c:	0645      	lsls	r5, r0, #25
 800480e:	d5fb      	bpl.n	8004808 <_printf_i+0xb8>
 8004810:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004814:	2d00      	cmp	r5, #0
 8004816:	da03      	bge.n	8004820 <_printf_i+0xd0>
 8004818:	232d      	movs	r3, #45	@ 0x2d
 800481a:	426d      	negs	r5, r5
 800481c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004820:	4859      	ldr	r0, [pc, #356]	@ (8004988 <_printf_i+0x238>)
 8004822:	230a      	movs	r3, #10
 8004824:	e011      	b.n	800484a <_printf_i+0xfa>
 8004826:	6821      	ldr	r1, [r4, #0]
 8004828:	6833      	ldr	r3, [r6, #0]
 800482a:	0608      	lsls	r0, r1, #24
 800482c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004830:	d402      	bmi.n	8004838 <_printf_i+0xe8>
 8004832:	0649      	lsls	r1, r1, #25
 8004834:	bf48      	it	mi
 8004836:	b2ad      	uxthmi	r5, r5
 8004838:	2f6f      	cmp	r7, #111	@ 0x6f
 800483a:	4853      	ldr	r0, [pc, #332]	@ (8004988 <_printf_i+0x238>)
 800483c:	6033      	str	r3, [r6, #0]
 800483e:	bf14      	ite	ne
 8004840:	230a      	movne	r3, #10
 8004842:	2308      	moveq	r3, #8
 8004844:	2100      	movs	r1, #0
 8004846:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800484a:	6866      	ldr	r6, [r4, #4]
 800484c:	60a6      	str	r6, [r4, #8]
 800484e:	2e00      	cmp	r6, #0
 8004850:	bfa2      	ittt	ge
 8004852:	6821      	ldrge	r1, [r4, #0]
 8004854:	f021 0104 	bicge.w	r1, r1, #4
 8004858:	6021      	strge	r1, [r4, #0]
 800485a:	b90d      	cbnz	r5, 8004860 <_printf_i+0x110>
 800485c:	2e00      	cmp	r6, #0
 800485e:	d04b      	beq.n	80048f8 <_printf_i+0x1a8>
 8004860:	4616      	mov	r6, r2
 8004862:	fbb5 f1f3 	udiv	r1, r5, r3
 8004866:	fb03 5711 	mls	r7, r3, r1, r5
 800486a:	5dc7      	ldrb	r7, [r0, r7]
 800486c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004870:	462f      	mov	r7, r5
 8004872:	42bb      	cmp	r3, r7
 8004874:	460d      	mov	r5, r1
 8004876:	d9f4      	bls.n	8004862 <_printf_i+0x112>
 8004878:	2b08      	cmp	r3, #8
 800487a:	d10b      	bne.n	8004894 <_printf_i+0x144>
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	07df      	lsls	r7, r3, #31
 8004880:	d508      	bpl.n	8004894 <_printf_i+0x144>
 8004882:	6923      	ldr	r3, [r4, #16]
 8004884:	6861      	ldr	r1, [r4, #4]
 8004886:	4299      	cmp	r1, r3
 8004888:	bfde      	ittt	le
 800488a:	2330      	movle	r3, #48	@ 0x30
 800488c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004890:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004894:	1b92      	subs	r2, r2, r6
 8004896:	6122      	str	r2, [r4, #16]
 8004898:	f8cd a000 	str.w	sl, [sp]
 800489c:	464b      	mov	r3, r9
 800489e:	aa03      	add	r2, sp, #12
 80048a0:	4621      	mov	r1, r4
 80048a2:	4640      	mov	r0, r8
 80048a4:	f7ff fee6 	bl	8004674 <_printf_common>
 80048a8:	3001      	adds	r0, #1
 80048aa:	d14a      	bne.n	8004942 <_printf_i+0x1f2>
 80048ac:	f04f 30ff 	mov.w	r0, #4294967295
 80048b0:	b004      	add	sp, #16
 80048b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048b6:	6823      	ldr	r3, [r4, #0]
 80048b8:	f043 0320 	orr.w	r3, r3, #32
 80048bc:	6023      	str	r3, [r4, #0]
 80048be:	4833      	ldr	r0, [pc, #204]	@ (800498c <_printf_i+0x23c>)
 80048c0:	2778      	movs	r7, #120	@ 0x78
 80048c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	6831      	ldr	r1, [r6, #0]
 80048ca:	061f      	lsls	r7, r3, #24
 80048cc:	f851 5b04 	ldr.w	r5, [r1], #4
 80048d0:	d402      	bmi.n	80048d8 <_printf_i+0x188>
 80048d2:	065f      	lsls	r7, r3, #25
 80048d4:	bf48      	it	mi
 80048d6:	b2ad      	uxthmi	r5, r5
 80048d8:	6031      	str	r1, [r6, #0]
 80048da:	07d9      	lsls	r1, r3, #31
 80048dc:	bf44      	itt	mi
 80048de:	f043 0320 	orrmi.w	r3, r3, #32
 80048e2:	6023      	strmi	r3, [r4, #0]
 80048e4:	b11d      	cbz	r5, 80048ee <_printf_i+0x19e>
 80048e6:	2310      	movs	r3, #16
 80048e8:	e7ac      	b.n	8004844 <_printf_i+0xf4>
 80048ea:	4827      	ldr	r0, [pc, #156]	@ (8004988 <_printf_i+0x238>)
 80048ec:	e7e9      	b.n	80048c2 <_printf_i+0x172>
 80048ee:	6823      	ldr	r3, [r4, #0]
 80048f0:	f023 0320 	bic.w	r3, r3, #32
 80048f4:	6023      	str	r3, [r4, #0]
 80048f6:	e7f6      	b.n	80048e6 <_printf_i+0x196>
 80048f8:	4616      	mov	r6, r2
 80048fa:	e7bd      	b.n	8004878 <_printf_i+0x128>
 80048fc:	6833      	ldr	r3, [r6, #0]
 80048fe:	6825      	ldr	r5, [r4, #0]
 8004900:	6961      	ldr	r1, [r4, #20]
 8004902:	1d18      	adds	r0, r3, #4
 8004904:	6030      	str	r0, [r6, #0]
 8004906:	062e      	lsls	r6, r5, #24
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	d501      	bpl.n	8004910 <_printf_i+0x1c0>
 800490c:	6019      	str	r1, [r3, #0]
 800490e:	e002      	b.n	8004916 <_printf_i+0x1c6>
 8004910:	0668      	lsls	r0, r5, #25
 8004912:	d5fb      	bpl.n	800490c <_printf_i+0x1bc>
 8004914:	8019      	strh	r1, [r3, #0]
 8004916:	2300      	movs	r3, #0
 8004918:	6123      	str	r3, [r4, #16]
 800491a:	4616      	mov	r6, r2
 800491c:	e7bc      	b.n	8004898 <_printf_i+0x148>
 800491e:	6833      	ldr	r3, [r6, #0]
 8004920:	1d1a      	adds	r2, r3, #4
 8004922:	6032      	str	r2, [r6, #0]
 8004924:	681e      	ldr	r6, [r3, #0]
 8004926:	6862      	ldr	r2, [r4, #4]
 8004928:	2100      	movs	r1, #0
 800492a:	4630      	mov	r0, r6
 800492c:	f7fb fc58 	bl	80001e0 <memchr>
 8004930:	b108      	cbz	r0, 8004936 <_printf_i+0x1e6>
 8004932:	1b80      	subs	r0, r0, r6
 8004934:	6060      	str	r0, [r4, #4]
 8004936:	6863      	ldr	r3, [r4, #4]
 8004938:	6123      	str	r3, [r4, #16]
 800493a:	2300      	movs	r3, #0
 800493c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004940:	e7aa      	b.n	8004898 <_printf_i+0x148>
 8004942:	6923      	ldr	r3, [r4, #16]
 8004944:	4632      	mov	r2, r6
 8004946:	4649      	mov	r1, r9
 8004948:	4640      	mov	r0, r8
 800494a:	47d0      	blx	sl
 800494c:	3001      	adds	r0, #1
 800494e:	d0ad      	beq.n	80048ac <_printf_i+0x15c>
 8004950:	6823      	ldr	r3, [r4, #0]
 8004952:	079b      	lsls	r3, r3, #30
 8004954:	d413      	bmi.n	800497e <_printf_i+0x22e>
 8004956:	68e0      	ldr	r0, [r4, #12]
 8004958:	9b03      	ldr	r3, [sp, #12]
 800495a:	4298      	cmp	r0, r3
 800495c:	bfb8      	it	lt
 800495e:	4618      	movlt	r0, r3
 8004960:	e7a6      	b.n	80048b0 <_printf_i+0x160>
 8004962:	2301      	movs	r3, #1
 8004964:	4632      	mov	r2, r6
 8004966:	4649      	mov	r1, r9
 8004968:	4640      	mov	r0, r8
 800496a:	47d0      	blx	sl
 800496c:	3001      	adds	r0, #1
 800496e:	d09d      	beq.n	80048ac <_printf_i+0x15c>
 8004970:	3501      	adds	r5, #1
 8004972:	68e3      	ldr	r3, [r4, #12]
 8004974:	9903      	ldr	r1, [sp, #12]
 8004976:	1a5b      	subs	r3, r3, r1
 8004978:	42ab      	cmp	r3, r5
 800497a:	dcf2      	bgt.n	8004962 <_printf_i+0x212>
 800497c:	e7eb      	b.n	8004956 <_printf_i+0x206>
 800497e:	2500      	movs	r5, #0
 8004980:	f104 0619 	add.w	r6, r4, #25
 8004984:	e7f5      	b.n	8004972 <_printf_i+0x222>
 8004986:	bf00      	nop
 8004988:	08004b69 	.word	0x08004b69
 800498c:	08004b7a 	.word	0x08004b7a

08004990 <memmove>:
 8004990:	4288      	cmp	r0, r1
 8004992:	b510      	push	{r4, lr}
 8004994:	eb01 0402 	add.w	r4, r1, r2
 8004998:	d902      	bls.n	80049a0 <memmove+0x10>
 800499a:	4284      	cmp	r4, r0
 800499c:	4623      	mov	r3, r4
 800499e:	d807      	bhi.n	80049b0 <memmove+0x20>
 80049a0:	1e43      	subs	r3, r0, #1
 80049a2:	42a1      	cmp	r1, r4
 80049a4:	d008      	beq.n	80049b8 <memmove+0x28>
 80049a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80049ae:	e7f8      	b.n	80049a2 <memmove+0x12>
 80049b0:	4402      	add	r2, r0
 80049b2:	4601      	mov	r1, r0
 80049b4:	428a      	cmp	r2, r1
 80049b6:	d100      	bne.n	80049ba <memmove+0x2a>
 80049b8:	bd10      	pop	{r4, pc}
 80049ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80049c2:	e7f7      	b.n	80049b4 <memmove+0x24>

080049c4 <_sbrk_r>:
 80049c4:	b538      	push	{r3, r4, r5, lr}
 80049c6:	4d06      	ldr	r5, [pc, #24]	@ (80049e0 <_sbrk_r+0x1c>)
 80049c8:	2300      	movs	r3, #0
 80049ca:	4604      	mov	r4, r0
 80049cc:	4608      	mov	r0, r1
 80049ce:	602b      	str	r3, [r5, #0]
 80049d0:	f7fc fbf6 	bl	80011c0 <_sbrk>
 80049d4:	1c43      	adds	r3, r0, #1
 80049d6:	d102      	bne.n	80049de <_sbrk_r+0x1a>
 80049d8:	682b      	ldr	r3, [r5, #0]
 80049da:	b103      	cbz	r3, 80049de <_sbrk_r+0x1a>
 80049dc:	6023      	str	r3, [r4, #0]
 80049de:	bd38      	pop	{r3, r4, r5, pc}
 80049e0:	20000388 	.word	0x20000388

080049e4 <memcpy>:
 80049e4:	440a      	add	r2, r1
 80049e6:	4291      	cmp	r1, r2
 80049e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80049ec:	d100      	bne.n	80049f0 <memcpy+0xc>
 80049ee:	4770      	bx	lr
 80049f0:	b510      	push	{r4, lr}
 80049f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049fa:	4291      	cmp	r1, r2
 80049fc:	d1f9      	bne.n	80049f2 <memcpy+0xe>
 80049fe:	bd10      	pop	{r4, pc}

08004a00 <_realloc_r>:
 8004a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a04:	4680      	mov	r8, r0
 8004a06:	4615      	mov	r5, r2
 8004a08:	460c      	mov	r4, r1
 8004a0a:	b921      	cbnz	r1, 8004a16 <_realloc_r+0x16>
 8004a0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a10:	4611      	mov	r1, r2
 8004a12:	f7ff bc4b 	b.w	80042ac <_malloc_r>
 8004a16:	b92a      	cbnz	r2, 8004a24 <_realloc_r+0x24>
 8004a18:	f7ff fbdc 	bl	80041d4 <_free_r>
 8004a1c:	2400      	movs	r4, #0
 8004a1e:	4620      	mov	r0, r4
 8004a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a24:	f000 f81a 	bl	8004a5c <_malloc_usable_size_r>
 8004a28:	4285      	cmp	r5, r0
 8004a2a:	4606      	mov	r6, r0
 8004a2c:	d802      	bhi.n	8004a34 <_realloc_r+0x34>
 8004a2e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004a32:	d8f4      	bhi.n	8004a1e <_realloc_r+0x1e>
 8004a34:	4629      	mov	r1, r5
 8004a36:	4640      	mov	r0, r8
 8004a38:	f7ff fc38 	bl	80042ac <_malloc_r>
 8004a3c:	4607      	mov	r7, r0
 8004a3e:	2800      	cmp	r0, #0
 8004a40:	d0ec      	beq.n	8004a1c <_realloc_r+0x1c>
 8004a42:	42b5      	cmp	r5, r6
 8004a44:	462a      	mov	r2, r5
 8004a46:	4621      	mov	r1, r4
 8004a48:	bf28      	it	cs
 8004a4a:	4632      	movcs	r2, r6
 8004a4c:	f7ff ffca 	bl	80049e4 <memcpy>
 8004a50:	4621      	mov	r1, r4
 8004a52:	4640      	mov	r0, r8
 8004a54:	f7ff fbbe 	bl	80041d4 <_free_r>
 8004a58:	463c      	mov	r4, r7
 8004a5a:	e7e0      	b.n	8004a1e <_realloc_r+0x1e>

08004a5c <_malloc_usable_size_r>:
 8004a5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a60:	1f18      	subs	r0, r3, #4
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	bfbc      	itt	lt
 8004a66:	580b      	ldrlt	r3, [r1, r0]
 8004a68:	18c0      	addlt	r0, r0, r3
 8004a6a:	4770      	bx	lr

08004a6c <_init>:
 8004a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a6e:	bf00      	nop
 8004a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a72:	bc08      	pop	{r3}
 8004a74:	469e      	mov	lr, r3
 8004a76:	4770      	bx	lr

08004a78 <_fini>:
 8004a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a7a:	bf00      	nop
 8004a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a7e:	bc08      	pop	{r3}
 8004a80:	469e      	mov	lr, r3
 8004a82:	4770      	bx	lr
